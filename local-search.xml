<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Spring Boot与缓存：使用JCache（JSR-107）注解简化开发</title>
    <link href="/2022/05/10/java-14/"/>
    <url>/2022/05/10/java-14/</url>
    
    <content type="html"><![CDATA[<p>缓存是个好东西，如果你想让前台用户操作流畅的话。经典的倒装句。现在都在追求服务的无状态化，所以这里使用redis作为缓存工具。我也感觉没有必要写，可是简单的你不写，复杂的你又写不好，最后，就是啥也没有。</p><p>springboot版本：2.6.7</p><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>默认生效的是配置类：SimpleCacheConfiguration，其他的配置类比如RedisCacheConfiguration如果要生效必须添加相关的Redis配置信息，否则默认不生效。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cache:</span><br>  <span class="hljs-comment"># 可以为理解指定存储缓存的东西</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">redis</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">database:</span> <span class="hljs-number">0</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>    <span class="hljs-comment"># 如果你有密码的话</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">redis213</span><br></code></pre></td></tr></table></figure><h2 id="启动类加个启用缓存的注解，开启缓存"><a href="#启动类加个启用缓存的注解，开启缓存" class="headerlink" title="启动类加个启用缓存的注解，开启缓存"></a>启动类加个启用缓存的注解，开启缓存</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableCaching</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServerApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(ServerApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><p>推荐注解使用啊，手写的话应该不需要介绍，自己手搓着就行，手搓没啥可说的，注解，也只是说一说注解里的各种属性。英文好点，可以随便使用啊。英文不好，那咱也不是一点也不能看，根据变量名猜，加上机器翻译，日子到也过的下去。</p><div class="note note-info">            <p>我只是一个喜欢写随笔的人啊，每次写这种介绍博客时，总时控制不住去写书，可能和我的初中老师有关系，一股脑的全部到给你，也不管你听不听得懂。还是简略点，写的太详细写的也累，看的也累。最主要感觉还是要起到的一个类似领头的效果吧。很多细节，自己去看源码也是可以解决的。</p>          </div><h2 id="几个重要的概念和注解"><a href="#几个重要的概念和注解" class="headerlink" title="几个重要的概念和注解"></a>几个重要的概念和注解</h2><p><img src="https://tva4.sinaimg.cn/large/005NNTS5ly1h24891grucj30w60ea786.jpg" alt="概念"></p><p><img src="https://tva4.sinaimg.cn/large/005NNTS5ly1h2489u3nmyj30wq0gf4bh.jpg" alt="注解参数"></p><p><img src="https://tva4.sinaimg.cn/large/005NNTS5ly1h248a7wofej30yu0f5n44.jpg" alt="注解中SPEL表达式"></p><h3 id="Cacheable"><a href="#Cacheable" class="headerlink" title="@Cacheable"></a>@Cacheable</h3><p><code>@Cacheable</code>标注的方法在执行之前会先检查缓存中有没有这个数据，默认按照参数的值作为缓存的key去查询缓存，如果没有就运行该方法并将结果放入缓存；以后再来调用就可以直接使用缓存中的数据；</p><ol><li>方法运行之前，先去查询Cache（缓存组件），按照cacheNames指定的名字获取；（CacheManager先获取相应的缓存），第一次获取缓存如果没有Cache组件会自动创建。</li><li>去Cache中查找缓存的内容，使用一个key，默认就是方法的参数；key是按照某种策略生成的；默认是使用<code>keyGenerator</code>生成的，默认使用<code>SimpleKeyGenerator</code>生成key；</li><li>看源码得知<code>SimpleKeyGenerator</code>生成key的默认策略；<ul><li>如果没有参数；<code>key=new SimpleKey()</code>；</li><li>如果有一个参数：<code>key=参数的值</code></li><li>如果有多个参数：<code>key=new SimpleKey(params)</code>；</li></ul></li><li>没有查到缓存就调用目标方法；</li><li>将目标方法返回的结果，放进缓存中</li></ol><div class="note note-info">            <p>将方法的运行结果进行缓存；以后再要相同的数据，直接从缓存中获取，不用调用方法；<br>CacheManager管理多个Cache组件的，对缓存的真正CRUD操作在Cache组件中，每一个缓存组件有自己唯一一个名字；</p>          </div><h4 id="Cacheable注解的可配置项"><a href="#Cacheable注解的可配置项" class="headerlink" title="Cacheable注解的可配置项"></a>Cacheable注解的可配置项</h4><ol><li><code>cacheNames/value</code>：指定缓存组件的名字;将方法的返回结果放在哪个缓存中，是数组的方式，可以指定多个缓存；</li><li><code>key</code>：缓存数据使用的key；可以用它来指定。默认是使用方法参数的值 1-方法的返回值编写SpEL； #id;参数id的值 #a0 #p0 #root.args[0]getEmp[2]</li><li><code>keyGenerator</code>：key的生成器；可以自己指定key的生成器的组件id,<code>key/keyGenerator</code>：二选一使用</li><li><code>cacheManager</code>：指定缓存管理器；或者cacheResolver指定获取解析器</li><li><code>condition</code>：指定符合条件的情况下才缓存；condition &#x3D; “#id&gt;0”；condition &#x3D; “#a0&gt;1”：第一个参数的值大于1的时候才进行缓存</li><li><code>unless</code>: 否定缓存；当unless指定的条件为true，方法的返回值就不会被缓存；可以获取到结果进行判unless &#x3D; “#result &#x3D;&#x3D; null”unless &#x3D; “#a0&#x3D;&#x3D;2”:如果第一个参数的值是2，结果不缓存；</li><li><code>sync</code>：是否使用异步模式</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Cacheable(value = &#123;&quot;emp&quot;&#125;,keyGenerator = &quot;myKeyGenerator&quot;,condition = &quot;#a0&gt;1&quot;,unless = &quot;#a0==2&quot;)</span><br><span class="hljs-keyword">public</span> Employee <span class="hljs-title function_">getEmp</span><span class="hljs-params">(Integer id)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;查询&quot;</span>+id+<span class="hljs-string">&quot;号员工&quot;</span>);<br>    <span class="hljs-type">Employee</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> employeeMapper.getEmpById(id);<br>    <span class="hljs-keyword">return</span> emp;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="CachePut"><a href="#CachePut" class="headerlink" title="@CachePut"></a>@CachePut</h3><ul><li><p>既调用方法，又更新缓存数据；同步更新缓存</p></li><li><p>应用场景：修改了数据库的某个数据，同时更新缓存；</p></li><li><p>流程：</p><ol><li>先调用目标方法</li><li>将目标方法的结果缓存起来</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@CachePut(value = &quot;emp&quot;,key = &quot;#result.id&quot;)</span><br><span class="hljs-keyword">public</span> Employee <span class="hljs-title function_">updateEmp</span><span class="hljs-params">(Employee employee)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;updateEmp:&quot;</span>+employee);<br>    employeeMapper.updateEmp(employee);<br>    <span class="hljs-keyword">return</span> employee;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="CacheEvict"><a href="#CacheEvict" class="headerlink" title="@CacheEvict"></a>@CacheEvict</h3><ul><li><code>@CacheEvict</code>：缓存清除</li><li><code>key</code>：指定要清除的数据</li><li><code>allEntries = true</code>：指定清除这个缓存中所有的数据</li><li><code>beforeInvocation = false</code>：缓存的清除是否在方法之前执行。默认代表缓存清除操作是在方法执行之后执行;如果出现异常缓存就不会清除。</li><li><code>beforeInvocation = true</code>：代表清除缓存操作是在方法运行之前执行，无论方法是否出现异常，缓存都清除</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@CacheEvict(value=&quot;emp&quot;,beforeInvocation = true，key = &quot;#id&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteEmp</span><span class="hljs-params">(Integer id)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;deleteEmp:&quot;</span>+id);<br>    employeeMapper.deleteEmpById(id);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Caching"><a href="#Caching" class="headerlink" title="@Caching"></a>@Caching</h3><ul><li><code>@Caching</code> 综合上面介绍的几个注解，用来定义较为复杂的缓存规则</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Caching(</span><br><span class="hljs-meta">     cacheable = &#123;</span><br><span class="hljs-meta">         @Cacheable(/*value=&quot;emp&quot;,*/key = &quot;#lastName&quot;)</span><br><span class="hljs-meta">     &#125;,</span><br><span class="hljs-meta">     put = &#123;</span><br><span class="hljs-meta">         @CachePut(/*value=&quot;emp&quot;,*/key = &quot;#result.id&quot;),</span><br><span class="hljs-meta">         @CachePut(/*value=&quot;emp&quot;,*/key = &quot;#result.email&quot;)</span><br><span class="hljs-meta">     &#125;</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">public</span> Employee <span class="hljs-title function_">getEmpByLastName</span><span class="hljs-params">(String lastName)</span>&#123;<br>    <span class="hljs-keyword">return</span> employeeMapper.getEmpByLastName(lastName);<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="CacheConfig"><a href="#CacheConfig" class="headerlink" title="@CacheConfig"></a>@CacheConfig</h3><ul><li>在类上使用，提供公共属性。</li><li><code>cacheNames</code>: 缓存名称，同一个类中，不指定缓存名称则使用这个名称，类似于一个以类为单位的全局配置。</li><li>下面和上面类似，而且属性前面也有介绍，就不多说了。</li></ul><p>源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.TYPE)</span> <span class="hljs-comment">// 这个表示只能在类上使用</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> CacheConfig &#123;<br> String[] cacheNames() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br> String <span class="hljs-title function_">keyGenerator</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br> String <span class="hljs-title function_">cacheManager</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br><br> String <span class="hljs-title function_">cacheResolver</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="封面"><a href="#封面" class="headerlink" title="封面"></a>封面</h2><p><img src="https://tva3.sinaimg.cn/large/005NNTS5ly1h249s4uychj32yo1o0kjp.jpg" alt="海绵宝宝"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springboot</tag>
      
      <tag>cache</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java DecimalFormat的主要功能及使用方法</title>
    <link href="/2022/04/02/java-13/"/>
    <url>/2022/04/02/java-13/</url>
    
    <content type="html"><![CDATA[<p>DecimalFormat 是 NumberFormat 的一个具体子类，用于格式化十进制数字。该类设计有各种功能，使其能够分析和格式化任意语言环境中的数，包括对西方语言、阿拉伯语和印度语数字的支持。它还支持不同类型的数，包括整数 (123)、定点数 (123.4)、科学记数法表示的数 (1.23E4)、百分数 (12%) 和金额 ($123)。所有这些内容都可以本地化。<br>DecimalFormat 包含一个模式 和一组符号</p><h2 id="符号含义"><a href="#符号含义" class="headerlink" title="符号含义"></a>符号含义</h2><table><thead><tr><th>符号</th><th>位置</th><th>本地化？</th><th>含义</th></tr></thead><tbody><tr><td>0</td><td>数字</td><td>是</td><td>阿拉伯数字</td></tr><tr><td>#</td><td>数字字</td><td>是</td><td>阿拉伯数字，如果不存在则显示为空</td></tr><tr><td>.</td><td>数字</td><td>是</td><td>小数分隔符或货币小数分隔符</td></tr><tr><td>-</td><td>数字</td><td>是</td><td>减号</td></tr><tr><td>,</td><td>数字</td><td>是</td><td>分组分隔符</td></tr><tr><td>E</td><td>数字</td><td>是</td><td>分隔科学计数法中的尾数和指数。在前缀或后缀中无需加引号。</td></tr><tr><td>;</td><td>子模式边界</td><td>是</td><td>分隔正数和负数子模式</td></tr><tr><td>%</td><td>前缀或后缀</td><td>是</td><td>乘以 100 并显示为百分数</td></tr></tbody></table><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">DecimalFormat</span> <span class="hljs-variable">df1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(<span class="hljs-string">&quot;0.0&quot;</span>); <br><span class="hljs-type">DecimalFormat</span> <span class="hljs-variable">df2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(<span class="hljs-string">&quot;#.#&quot;</span>); <br><span class="hljs-type">DecimalFormat</span> <span class="hljs-variable">df3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(<span class="hljs-string">&quot;000.000&quot;</span>); <br><span class="hljs-type">DecimalFormat</span> <span class="hljs-variable">df4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(<span class="hljs-string">&quot;###.###&quot;</span>); <br>System.out.println(df1.format(<span class="hljs-number">12.34</span>)); <br>System.out.println(df2.format(<span class="hljs-number">12.34</span>)); <br>System.out.println(df3.format(<span class="hljs-number">12.34</span>)); <br>System.out.println(df4.format(<span class="hljs-number">12.34</span>)); <br><br><br><span class="hljs-comment">// 运行结果： </span><br><br><span class="hljs-number">12.3</span> <br><span class="hljs-number">12.3</span> <br><span class="hljs-number">012.340</span> <br><span class="hljs-number">12.34</span><br><br><br><span class="hljs-type">DecimalFormat</span> <span class="hljs-variable">format</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(<span class="hljs-string">&quot;###,####.000&quot;</span>); <br>System.out.println(format.format(<span class="hljs-number">111111123456.1227222</span>)); <br> <br>Locale.setDefault(Locale.US); <br><span class="hljs-type">DecimalFormat</span> <span class="hljs-variable">usFormat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(<span class="hljs-string">&quot;###,###.000&quot;</span>); <br>System.out.println(usFormat.format(<span class="hljs-number">111111123456.1227222</span>)); <br> <br><span class="hljs-type">DecimalFormat</span> <span class="hljs-variable">addPattenFormat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(); <br>addPattenFormat.applyPattern(<span class="hljs-string">&quot;##,###.000&quot;</span>); <br>System.out.println(addPattenFormat.format(<span class="hljs-number">111111123456.1227</span>)); <br> <br><span class="hljs-type">DecimalFormat</span> <span class="hljs-variable">zhiFormat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(); <br>zhiFormat.applyPattern(<span class="hljs-string">&quot;0.000E0000&quot;</span>); <br>System.out.println(zhiFormat.format(<span class="hljs-number">10000</span>)); <br>System.out.println(zhiFormat.format(<span class="hljs-number">12345678.345</span>)); <br> <br><span class="hljs-type">DecimalFormat</span> <span class="hljs-variable">percentFormat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(); <br>percentFormat.applyPattern(<span class="hljs-string">&quot;#0.000%&quot;</span>); <br>System.out.println(percentFormat.format(<span class="hljs-number">0.3052222</span>)); <br><br><br>运行结果 ：<br><span class="hljs-number">1111</span>,<span class="hljs-number">1112</span>,<span class="hljs-number">3456.123</span> <br><span class="hljs-number">111</span>,<span class="hljs-number">111</span>,<span class="hljs-number">123</span>,<span class="hljs-number">456.123</span> <br><span class="hljs-number">111</span>,<span class="hljs-number">111</span>,<span class="hljs-number">123</span>,<span class="hljs-number">456.123</span> <br><span class="hljs-number">1.000E0004</span> <br><span class="hljs-number">1.235E0007</span> <br><span class="hljs-number">30.522</span>% <br></code></pre></td></tr></table></figure><p>如果使用具有多个分组字符的模式，则最后一个分隔符和整数结尾之间的间隔才是使用的分组大小。</p><p>所以 “#,##,###,####” &#x3D;&#x3D; “######,####” &#x3D;&#x3D; “##,####,####”。</p><h2 id="封面"><a href="#封面" class="headerlink" title="封面"></a>封面</h2><p><img src="https://tva3.sinaimg.cn/large/005NNTS5ly1h0zyye8c98j32yo1o0e82.jpg" alt="集原美"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DecimalFormat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Oracle版本对应匹配的ojdbc版本及JDK版本</title>
    <link href="/2022/04/02/java-12/"/>
    <url>/2022/04/02/java-12/</url>
    
    <content type="html"><![CDATA[<p>Oracle JDBC 版本与 JDK 版本的关系如何？<br>Oracle JDBC 驱动程序始终与每一个新版本中的最新 JDK 版本相兼容。在某些版本中，JDBC 驱动程序支持多个 JDK 版本。请使用下表根据您的首选 JDK 版本选择正确的 JDBC 驱动程序。</p><table><thead><tr><th>Oracle 数据库版本</th><th>特定于发行版的 JDBC Jar 文件</th></tr></thead><tbody><tr><td>21.1</td><td>ojdbc11.jar，随带 JDK11、JDK12、JDK13、JDK14 和 JDK15；ojdbc8.jar ，随带 JDK8、JDK11、JDK12、JDK13、JDK14 和 JDK15</td></tr><tr><td>19.x</td><td>ojdbc10.jar，随带 JDK10 和 JDK11；ojdbc8.jar，随带 JDK8、JDK9 和 JDK11</td></tr><tr><td>18.3</td><td>ojdbc8.jar，随带 JDK8、JDK9、JDK10 和 JDK11</td></tr><tr><td>12.2 或 12cR2</td><td>ojdbc8.jar，随带 JDK8</td></tr><tr><td>12.1 或 12cR1</td><td>ojdbc7.jar with JDK 7 and JDK 8；ojdbc6.jar，随带 JDK 6</td></tr><tr><td>11.2 或 11gR2</td><td>ojdbc6.jar，随带 JDK 6、JDK 7 和 JDK 8；（注意：仅 11.2.0.3 和 11.2.0.4 支持 JDK7 和 JDK8）；ojdbc5.jar，随带 JDK 5</td></tr></tbody></table><p><a href="https://www.oracle.com/cn/database/technologies/faq-jdbc.html">oracle常见问题</a></p><h2 id="封面"><a href="#封面" class="headerlink" title="封面"></a>封面</h2><p><img src="https://tvax4.sinaimg.cn/large/005NNTS5ly1h0ve62trn6j32yo1o0b2a.jpg" alt="女孩"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>oracle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu20.x.x使用root登录</title>
    <link href="/2022/04/02/linux-01/"/>
    <url>/2022/04/02/linux-01/</url>
    
    <content type="html"><![CDATA[<h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>以普通用户登录系统，创建root用户的密码<br>在终端输入命令：</p><p><code>sudo passwd root</code></p><p>然后输入设置的密码，输入两次，这样就完成了设置root用户密码了，如果只需要临时获取root权限，在此步操作后就可以在普通用户登录的终端中输入<code>su root</code> 然后输入两遍密码即可在终端中获取root权限。可以稍微防止一点激情删库这一步骤。</p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>修改文件<code>sudo gedit /usr/share/lightdm/lightdm.conf.d/50-ubuntu.conf</code><br>在文件末尾增加如下两行：<br><code>greeter-show-manual-login=true</code><br><code>all-guest=false</code>  </p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>修改 <code>/etc/pam.d/gdm-autologin</code><br>  <code>/etc/pam.d/gdm-password</code><br>两个文件</p><p><code>sudo gedit /etc/pam.d/gdm-autologin</code><br>注释掉<code>auth required pam_succeed_if.so user != root quiet_success</code>这一行(第三行左右)</p><p><code>sudo gedit /etc/pam.d/gdm-password</code><br>注释掉 <code>auth required pam_succeed_if.so user != root quiet_success</code>这一行(第三行左右)</p><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><p>修改<code>/root/.profile</code>文件<br><code>sudo gedit /root/.profile</code><br>将文件末尾的<code>mesg n 2&gt; /dev/null || true</code>这一行修改成<br><code>tty -s &amp;&amp; mesg n || true</code></p><h2 id="封面"><a href="#封面" class="headerlink" title="封面"></a>封面</h2><p><img src="https://tva4.sinaimg.cn/large/005NNTS5ly1h0v56otfr4j32yo1o04qr.jpg" alt="原神-风华节"></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx详细配置</title>
    <link href="/2022/03/17/vue-05/"/>
    <url>/2022/03/17/vue-05/</url>
    
    <content type="html"><![CDATA[<p>Nginx的配置记了忘，忘了记，这东西，一般就是一套配置，到处复制，然后改改，绝大多数时候对于我们的要求就是需要知道改什么地方，nginx相关的博客，我好像不止写了一次，然而属实不怎么常用，学得快，忘得更快，然后借这次吧，重新再写一下。nginx的配置难以理解的地方。就是配置https，其实也没有什么复杂的。</p><h2 id="教程准备"><a href="#教程准备" class="headerlink" title="教程准备"></a>教程准备</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>如日中天的CenterOs倒了（停止维护）。于是我就换上了Ubuntu。</p><p>Linux系统：Ubuntu20.x.x</p><h3 id="安装方式"><a href="#安装方式" class="headerlink" title="安装方式"></a>安装方式</h3><p>两种安装方式，使用命令式的安装是最为简单的，但受限于网络。下载源码编译安装最为通用，但是有一点繁琐。</p><h4 id="APT（软件源）安装"><a href="#APT（软件源）安装" class="headerlink" title="APT（软件源）安装"></a>APT（软件源）安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装之前的准备</span><br>sudo apt install curl gnupg2 ca-certificates lsb-release ubuntu-keyring<br><br><span class="hljs-comment"># 导入官方的nginx签名密钥，以便apt能够验证软件包的真实性</span><br>curl https://nginx.org/keys/nginx_signing.key | gpg --dearmor \<br>    | sudo <span class="hljs-built_in">tee</span> /usr/share/keyrings/nginx-archive-keyring.gpg &gt;/dev/null<br><br><span class="hljs-comment"># 验证下载的文件是否包含正确的密钥</span><br>gpg --dry-run --quiet --import --import-options import-show /usr/share/keyrings/nginx-archive-keyring.gpg<br><br><span class="hljs-comment"># 输出即可</span><br>pub   rsa2048 2011-08-19 [SC] [expires: 2024-06-14]<br>      573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62<br>uid                      nginx signing key &lt;signing-key@nginx.com&gt;<br><br><span class="hljs-comment"># 更新</span><br>sudo apt update<br><br><span class="hljs-comment"># 安装 有提示，y 回车即可</span><br>sudo apt install nginx<br><br><span class="hljs-comment"># 测试是否成功安装, 输出版本号，即安装完成</span><br>nginx -v<br><br><span class="hljs-comment"># 测试访问</span><br>curl https://localhost<br><br><span class="hljs-comment"># 输出</span><br>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;<span class="hljs-built_in">head</span>&gt;<br>&lt;title&gt;Welcome to nginx!&lt;/title&gt;<br>&lt;style&gt;<br>    body &#123;<br>        width: 35em;<br>        margin: 0 auto;<br>        font-family: Tahoma, Verdana, Arial, sans-serif;<br>    &#125;<br>&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;<br>&lt;p&gt;If you see this page, the nginx web server is successfully installed and<br>working. Further configuration is required.&lt;/p&gt;<br><br>&lt;p&gt;For online documentation and support please refer to<br>&lt;a href=<span class="hljs-string">&quot;http://nginx.org/&quot;</span>&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;<br>Commercial support is available at<br>&lt;a href=<span class="hljs-string">&quot;http://nginx.com/&quot;</span>&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;<br><br>&lt;p&gt;&lt;em&gt;Thank you <span class="hljs-keyword">for</span> using nginx.&lt;/em&gt;&lt;/p&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure><p>按照上面的操作如果出现最后的Html文档说明已经正确安装了。</p><h4 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h4><p>比较通用的一种安装方法。首先下载安装包。<a href="http://nginx.org/en/download.html">nginx下载</a>，下载稳定版的即可。我这里下载的是<a href="http://nginx.org/download/nginx-1.20.2.tar.gz">nginx-1.20.2</a>，点击下载到本地，上传到你的Linux服务器上。上传方法不限，弄到服务器的文件夹里即可。</p><p>进入存放tar.gz文件的目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 解压源码文件</span><br>tar -zxcf nginx-1.20.2.tar.gz<br><br><span class="hljs-comment"># 进入解压后的文件中</span><br><span class="hljs-built_in">cd</span> nginx-1.20.2<br><br><span class="hljs-comment"># 创建一个缓存文件夹</span><br><span class="hljs-built_in">mkdir</span> /var/temp/nginx -p<br><br><span class="hljs-comment"># 安装生成安装文件前的必要依赖。</span><br><span class="hljs-comment"># 不建议手动编译安装属实是太麻烦了</span><br>apt install build-essential libssl-dev libghc-zlib-dev libpcre3-dev<br><br><span class="hljs-comment"># 在nginx目录，输入如下命令进行配置，目的是为了创建makefile文件</span><br><span class="hljs-comment"># 注意一下配置中的目录即可</span><br>./configure \<br>--prefix=/usr/local/nginx \<br>--pid-path=/var/run/nginx/nginx.pid \<br>--lock-path=/var/lock/nginx.lock \<br>--error-log-path=/var/log/nginx/error.log \<br>--http-log-path=/var/log/nginx/access.log \<br>--with-http_gzip_static_module \<br>--http-client-body-temp-path=/var/temp/nginx/client \<br>--http-proxy-temp-path=/var/temp/nginx/proxy \<br>--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \<br>--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \<br>--http-scgi-temp-path=/var/temp/nginx/scgi  \<br>--with-http_ssl_module<br><br><span class="hljs-comment"># 如果报错如下，</span><br>checking <span class="hljs-keyword">for</span> OS<br> + Linux 5.13.0-37-generic x86_64<br>checking <span class="hljs-keyword">for</span> C compiler ... not found<br><br>./configure: error: C compiler cc is not found<br><br><span class="hljs-comment"># 说明缺少编译依赖。再次执行此命令。</span><br>apt install build-essential libssl-dev libghc-zlib-dev libpcre3-dev<br><br><span class="hljs-comment"># 生成安装文件成功后应该会输出类似下面的内容</span><br>  nginx path prefix: <span class="hljs-string">&quot;/usr/local/nginx&quot;</span><br>  nginx binary file: <span class="hljs-string">&quot;/usr/local/nginx/sbin/nginx&quot;</span><br>  nginx modules path: <span class="hljs-string">&quot;/usr/local/nginx/modules&quot;</span><br>  nginx configuration prefix: <span class="hljs-string">&quot;/usr/local/nginx/conf&quot;</span><br>  nginx configuration file: <span class="hljs-string">&quot;/usr/local/nginx/conf/nginx.conf&quot;</span><br>  nginx pid file: <span class="hljs-string">&quot;/var/run/nginx/nginx.pid&quot;</span><br>  nginx error <span class="hljs-built_in">log</span> file: <span class="hljs-string">&quot;/var/log/nginx/error.log&quot;</span><br>  nginx http access <span class="hljs-built_in">log</span> file: <span class="hljs-string">&quot;/var/log/nginx/access.log&quot;</span><br>  nginx http client request body temporary files: <span class="hljs-string">&quot;/var/temp/nginx/client&quot;</span><br>  nginx http proxy temporary files: <span class="hljs-string">&quot;/var/temp/nginx/proxy&quot;</span><br>  nginx http fastcgi temporary files: <span class="hljs-string">&quot;/var/temp/nginx/fastcgi&quot;</span><br>  nginx http uwsgi temporary files: <span class="hljs-string">&quot;/var/temp/nginx/uwsgi&quot;</span><br>  nginx http scgi temporary files: <span class="hljs-string">&quot;/var/temp/nginx/scgi&quot;</span><br><br><br></code></pre></td></tr></table></figure><div class="note note-info">            <p>配置相关信息汇总，看表格</p>          </div><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td>–prefix</td><td>指定nginx安装目录</td></tr><tr><td>–pid-path</td><td>指定nginx的pid</td></tr><tr><td>–lock-path</td><td>锁定安装文件，防止篡改</td></tr><tr><td>–error-log-path</td><td>错误日志</td></tr><tr><td>–http-log-path</td><td>日志</td></tr><tr><td>–http-log-path</td><td>日志</td></tr><tr><td>–with-http_gzip_static_module</td><td>启用gzip模块，在线实时压缩输出数据流</td></tr><tr><td>–http-client-body-temp-path</td><td>设定客户端请求临时目录</td></tr><tr><td>–http-proxy-temp-path</td><td>设定http代理临时目录</td></tr><tr><td>–http-fastcgi-temp-path</td><td>设定fastcgi临时目录</td></tr><tr><td>–http-uwsgi-temp-path</td><td>设定uwsgi临时目录</td></tr><tr><td>–http-scgi-temp-path</td><td>设定scgi临时目录</td></tr><tr><td>–with-http_ssl_module</td><td>启用Https模块</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># make编译</span><br>make<br><br><span class="hljs-comment"># 安装</span><br>make install<br><br><span class="hljs-comment"># 进入sbin目录启动nginx</span><br><br><span class="hljs-comment"># 启动：</span><br>./nginx<br><br><span class="hljs-comment"># 停止：</span><br>./nginx -s stop<br><br><span class="hljs-comment"># 重新加载：</span><br>./nginx -s reload<br></code></pre></td></tr></table></figure><p>在Ubuntu上nginx安装的两种方式都已介绍完毕，如果你用的是CentOs,那很可惜，教程并不适用。我这边呢是建议使用apt,yum这种工具去安装nginx的，优点有很多。</p><p>第一：节省服务器空间因为不需要编译环境，第二，节省开发者生命。</p><h2 id="浅说一下APT和Yum…等等类似工具究竟是什么东西"><a href="#浅说一下APT和Yum…等等类似工具究竟是什么东西" class="headerlink" title="浅说一下APT和Yum…等等类似工具究竟是什么东西"></a>浅说一下APT和Yum…等等类似工具究竟是什么东西</h2><p>我们在搜索的时候，有时会搜到一些apt-get命令的操作。</p><div class="note note-info">            <p>使用apt－get的主流Linux系统包括Debian和Ubuntu变异版本。大多数情况下，从命令行运行该工具。桌面上有几个图形前端可以使用，包括Synaptic Package Manager、Ubuntu Software Center、Aptitude和Kpackage。<br>Raspberry Pi和Beaglebone Black nanoLinux版用户可以很容易地使用apt－get加载程序，因为这些系统通常来自Ubuntu或Debian代码。是debian，ubuntu发行版的包管理工具，与红帽中的「yum」工具非常类似。<br>apt－get命令一般需要「root权限」执行，所以一般跟着sudo命令。<br>apt 命令行实用程序于2014年推出第一个稳定版本，用于 Debian 发行版 ．deb 软件包安装。它最初在不稳定的Debian版本中使用，然后在Debian 8中成为标准。<br>在 Ubuntu 16．04 发行后，apt 开始流行，并以某种方式取代了 apt－get 。<br>随着 apt install package 命令的使用频率和普遍性逐步超过 apt－get install package，越来越多的其它 Linux 发行版也开始遵循 Ubuntu 的脚步，开始鼓励用户使用 apt 而不是 apt－get。<br>大多数人不了解 apt 和 apt－get 之间的区别，并且经常在使用一个或另一个时感到困惑。<br>两者都是开源命令行工具，用于管理软件包，例如安装，更新，升级和删除。<br>但是，它们之间仍然存在一些差异。</p>          </div><h3 id="apt"><a href="#apt" class="headerlink" title="apt"></a>apt</h3><div class="note note-info">            <p>apt（Advanced Packaging Tool）是一个在 Debian 和 Ubuntu 中的 Shell 前端软件包管理器。<br>apt 命令提供了查找、安装、升级、删除某一个、一组甚至全部软件包的命令，而且命令简洁而又好记。<br>apt 命令执行需要超级管理员权限(root)。</p>          </div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@ubuntu:/usr/local/nginx/sbin<span class="hljs-comment"># apt -h</span><br>apt 2.0.6 (amd64)<br>用法： apt [选项] 命令<br><br>命令行软件包管理器 apt 提供软件包搜索，管理和信息查询等功能。<br>它提供的功能与其他 APT 工具相同（像 apt-get 和 apt-cache），<br>但是默认情况下被设置得更适合交互。<br><br>常用命令：<br>  list - 根据名称列出软件包<br>  search - 搜索软件包描述<br>  show - 显示软件包细节<br>  install - 安装软件包<br>  reinstall - 重新安装软件包<br>  remove - 移除软件包<br>  autoremove - 卸载所有自动安装且不再使用的软件包<br>  update - 更新可用软件包列表<br>  upgrade - 通过 安装/升级 软件来更新系统<br>  full-upgrade - 通过 卸载/安装/升级 来更新系统<br>  edit-sources - 编辑软件源信息文件<br>  satisfy - 使系统满足依赖关系字符串<br><br>参见 apt(8) 以获取更多关于可用命令的信息。<br>程序配置选项及语法都已经在 apt.conf(5) 中阐明。<br>欲知如何配置软件源，请参阅 sources.list(5)。<br>软件包及其版本偏好可以通过 apt_preferences(5) 来设置。<br>关于安全方面的细节可以参考 apt-secure(8).<br>                                         本 APT 具有超级牛力。<br></code></pre></td></tr></table></figure><h3 id="Yum"><a href="#Yum" class="headerlink" title="Yum"></a>Yum</h3><div class="note note-info">            <p>yum（ Yellow dog Updater, Modified）是一个在 Fedora 和 RedHat 以及 SUSE 中的 Shell 前端软件包管理器。（一般CentOS就用这个）<br>基于 RPM 包管理，能够从指定的服务器自动下载 RPM 包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包，无须繁琐地一次次下载、安装。<br>yum 提供了查找、安装、删除某一个、一组甚至全部软件包的命令，而且命令简洁而又好记。</p>          </div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">1. 列出所有可更新的软件清单命令：yum check-update<br><br>2. 更新所有软件命令：yum update<br><br>3. 仅安装指定的软件命令：yum install &lt;package_name&gt;<br><br>4. 仅更新指定的软件命令：yum update &lt;package_name&gt;<br><br>5. 列出所有可安裝的软件清单命令：yum list<br><br>6. 删除软件包命令：yum remove &lt;package_name&gt;<br><br>7. 查找软件包命令：yum search &lt;keyword&gt;<br><br>8. 清除缓存命令:<br><br>yum clean packages: 清除缓存目录下的软件包<br>yum clean headers: 清除缓存目录下的 headers<br>yum clean oldheaders: 清除缓存目录下旧的 headers<br>yum clean, yum clean all (= yum clean packages; yum clean oldheaders) :清除缓存目录下的软件包及旧的 headers<br></code></pre></td></tr></table></figure><h2 id="默认配置解读"><a href="#默认配置解读" class="headerlink" title="默认配置解读"></a>默认配置解读</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 运行用户，一般设置成root用户即可，百度了一下是用来控制权限的。根据Liunx系统的用户来配置即可，话说通过shell窗口来操作Linux的用户的相关命令，应该不常用。</span><br>user www-data;<br><br><span class="hljs-comment"># 启动进程,通常设置成和cpu的数量相等，auto 表示自动</span><br>worker_processes auto;<br><span class="hljs-comment"># 全局运行PID文件</span><br>pid /run/nginx.pid;<br><span class="hljs-comment"># 导入指定文件夹下所有以.conf结尾的配置文件，一般是一些模块的设置</span><br>include /etc/nginx/modules-enabled/*.conf;<br><br>events &#123;<br> <span class="hljs-comment"># 单个后台worker process进程的最大并发链接数</span><br> worker_connections 768;<br> <span class="hljs-comment"># multi_accept on;</span><br>&#125;<br><br><span class="hljs-comment"># #设定http服务器，利用它的反向代理功能提供负载均衡支持</span><br>http &#123;<br><br> <span class="hljs-comment">##</span><br> <span class="hljs-comment"># 基本设置</span><br> <span class="hljs-comment">##</span><br><br> <span class="hljs-comment"># sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用，</span><br> <span class="hljs-comment"># 必须设为 on,如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，以平衡磁盘与网络I/O处理速度，降低系统的uptime.</span><br> sendfile on;<br> <span class="hljs-comment"># sendfile为on时这里也应该设为on，数据包会累积一下再一起传输，可以提高一些传输效率。</span><br> tcp_nopush on;<br> <span class="hljs-comment"># 小的数据包不等待直接传输。默认为on。</span><br> <span class="hljs-comment"># 看上去是和tcp_nopush相反的功能，但是两边都为on时nginx也可以平衡这两个功能的使用。</span><br> tcp_nodelay on;<br> <span class="hljs-comment"># 连接超时时间</span><br> keepalive_timeout 65;<br> <span class="hljs-comment"># types_hash_max_size影响散列表的冲突率。types_hash_max_size越大，就会消耗更多的内存，但散列key的冲突率会降低，检索速度就更快。types_hash_max_size越小，消耗的内存就越小，但散列key的冲突率可能上升。默认为1024</span><br> types_hash_max_size 2048;<br> <span class="hljs-comment"># server_tokens off;</span><br><br> <span class="hljs-comment"># server_names_hash_bucket_size 64;</span><br> <span class="hljs-comment"># server_name_in_redirect off;</span><br><br> <span class="hljs-comment"># 定义MIME类型和后缀名关联的文件的位置。</span><br> include /etc/nginx/mime.types;<br> <span class="hljs-comment"># 指定mime.types文件中没有记述到的后缀名的处理方法。默认值是text/plain。</span><br> default_type application/octet-stream;<br><br> <span class="hljs-comment">##</span><br> <span class="hljs-comment"># SSL设置</span><br> <span class="hljs-comment">##</span><br><br> ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; <span class="hljs-comment"># Dropping SSLv3, ref: POODLE</span><br> ssl_prefer_server_ciphers on;<br><br> <span class="hljs-comment">##</span><br> <span class="hljs-comment"># 日志记录设置</span><br> <span class="hljs-comment">##</span><br><br> access_log /var/log/nginx/access.log;<br> error_log /var/log/nginx/error.log;<br><br> <span class="hljs-comment">##</span><br> <span class="hljs-comment"># Gzip设置</span><br> <span class="hljs-comment">##</span><br> <span class="hljs-comment">#开启gzip压缩</span><br> gzip on;<br><br> <span class="hljs-comment"># gzip_vary on;</span><br> <span class="hljs-comment"># gzip_proxied any;</span><br> <span class="hljs-comment"># gzip_comp_level 6;</span><br> <span class="hljs-comment"># gzip_buffers 16 8k;</span><br> <span class="hljs-comment"># gzip_http_version 1.1;</span><br> <span class="hljs-comment"># gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;</span><br><br> <span class="hljs-comment">##</span><br> <span class="hljs-comment"># 虚拟主机配置</span><br> <span class="hljs-comment">## </span><br><br> <span class="hljs-comment"># 重点就在这里，因为我们正常看这个配置文件，里面感觉是没有东西的。但是我们访问http://localhost是可以访问的到的。</span><br> <br> <span class="hljs-comment"># 主要就是下面这两行  sites-enabled 这个文件夹下有个 default 文件。就是这个文件里面配置的东西，conf.d 这个文件夹是空文件夹，不看。</span><br> include /etc/nginx/conf.d/*.conf;<br> <span class="hljs-comment"># 导入默认设置</span><br> include /etc/nginx/sites-enabled/*;<br>&#125;<br><br><span class="hljs-comment"># mail模块，用的不多</span><br><span class="hljs-comment">#mail &#123;</span><br><span class="hljs-comment"># # See sample authentication script at:</span><br><span class="hljs-comment"># # http://wiki.nginx.org/ImapAuthenticateWithApachePhpScript</span><br><span class="hljs-comment"># </span><br><span class="hljs-comment"># # auth_http localhost/auth.php;</span><br><span class="hljs-comment"># # pop3_capabilities &quot;TOP&quot; &quot;USER&quot;;</span><br><span class="hljs-comment"># # imap_capabilities &quot;IMAP4rev1&quot; &quot;UIDPLUS&quot;;</span><br><span class="hljs-comment"># </span><br><span class="hljs-comment"># server &#123;</span><br><span class="hljs-comment">#  listen     localhost:110;</span><br><span class="hljs-comment">#  protocol   pop3;</span><br><span class="hljs-comment">#  proxy      on;</span><br><span class="hljs-comment"># &#125;</span><br><span class="hljs-comment"># </span><br><span class="hljs-comment"># server &#123;</span><br><span class="hljs-comment">#  listen     localhost:143;</span><br><span class="hljs-comment">#  protocol   imap;</span><br><span class="hljs-comment">#  proxy      on;</span><br><span class="hljs-comment"># &#125;</span><br><span class="hljs-comment">#&#125;</span><br></code></pre></td></tr></table></figure><h3 id="Default文件"><a href="#Default文件" class="headerlink" title="Default文件"></a>Default文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##</span><br><span class="hljs-comment"># 你应该看看下面的网址，以便掌握一个坚实的理解</span><br><span class="hljs-comment"># 为了充分发挥Nginx的威力，需要使用Nginx配置文件。</span><br><span class="hljs-comment"># https://www.nginx.com/resources/wiki/start/</span><br><span class="hljs-comment"># https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/</span><br><span class="hljs-comment"># https://wiki.debian.org/Nginx/DirectoryStructure</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 在大多数情况下，管理员会从启用/和</span><br><span class="hljs-comment"># 将其保留为网站内的参考，以便继续使用</span><br><span class="hljs-comment"># 由nginx包装团队更新。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 此文件将自动加载其他用户提供的配置文件</span><br><span class="hljs-comment"># 应用程序，如Drupal或Wordpress。这些申请将被提出</span><br><span class="hljs-comment"># 在具有该包名称的路径下可用，例如/drupal8。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 请参阅/usr/share/doc/nginx doc/examples/了解更多详细示例。</span><br><span class="hljs-comment">##</span><br><br><span class="hljs-comment"># 默认服务配置</span><br><span class="hljs-comment">#</span><br>server &#123;<br> <span class="hljs-comment"># listen指定端口号。</span><br> listen 80 default_server;<br> listen [::]:80 default_server;<br><br> <span class="hljs-comment"># SSL配置</span><br> <span class="hljs-comment">#</span><br> <span class="hljs-comment"># listen 443 ssl default_server;</span><br> <span class="hljs-comment"># listen [::]:443 ssl default_server;</span><br> <span class="hljs-comment">#</span><br> <span class="hljs-comment"># 注意：您应该为SSL通信禁用gzip。</span><br> <span class="hljs-comment"># See: https://bugs.debian.org/773332</span><br> <span class="hljs-comment">#</span><br> <span class="hljs-comment"># 阅读ssl_密码以确保安全配置。</span><br> <span class="hljs-comment"># See: https://bugs.debian.org/765782</span><br> <span class="hljs-comment">#</span><br> <span class="hljs-comment"># ssl证书包生成的自签名证书</span><br> <span class="hljs-comment"># 不要在生产服务器中使用它们！</span><br> <span class="hljs-comment">#</span><br> <span class="hljs-comment"># include snippets/snakeoil.conf;</span><br><br> <span class="hljs-comment"># 定义服务器的默认网站根目录位置。</span><br> root /var/www/html;<br><br> <span class="hljs-comment"># 添加首页。如果使用php，请将php添加到列表中</span><br> index index.html index.htm index.nginx-debian.html;<br> <span class="hljs-comment"># 指定服务器的域名。这个_和localhost的区别我也不是很清楚</span><br> server_name _;<br><br> location / &#123;<br>  <span class="hljs-comment"># 首先尝试将请求作为文件，然后</span><br>  <span class="hljs-comment"># 作为目录，然后返回显示404。</span><br>  try_files <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span>/ =404;<br> &#125;<br><br> <span class="hljs-comment"># 将PHP脚本传递给FastCGI服务器</span><br> <span class="hljs-comment">#</span><br> <span class="hljs-comment">#location ~ \.php$ &#123;</span><br> <span class="hljs-comment"># include snippets/fastcgi-php.conf;</span><br> <span class="hljs-comment">#</span><br> <span class="hljs-comment"># # 使用php fpm（或其他unix套接字）:</span><br> <span class="hljs-comment"># fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;</span><br> <span class="hljs-comment"># # 使用php cgi（或其他tcp套接字）:</span><br> <span class="hljs-comment"># fastcgi_pass 127.0.0.1:9000;</span><br> <span class="hljs-comment">#&#125;</span><br><br> <span class="hljs-comment"># deny access to .htaccess files, if Apache&#x27;s document root</span><br> <span class="hljs-comment"># concurs with nginx&#x27;s one</span><br> <span class="hljs-comment"># 拒绝访问。htaccess文件，如果Apache的文档根</span><br> <span class="hljs-comment"># 同意nginx的观点</span><br> <span class="hljs-comment">#</span><br> <span class="hljs-comment">#location ~ /\.ht &#123;</span><br> <span class="hljs-comment"># deny all;</span><br> <span class="hljs-comment">#&#125;</span><br>&#125;<br><br><br><span class="hljs-comment"># Virtual Host configuration for example.com</span><br><span class="hljs-comment"># 例如，虚拟主机配置。example.com</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 您可以将其移动到“可用站点”下的另一个文件中，并将其符号链接</span><br><span class="hljs-comment"># 到已启用的站点/以启用它。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#server &#123;</span><br><span class="hljs-comment"># listen 80;</span><br><span class="hljs-comment"># listen [::]:80;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># server_name example.com;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># root /var/www/example.com;</span><br><span class="hljs-comment"># index index.html;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># location / &#123;</span><br><span class="hljs-comment">#  try_files $uri $uri/ =404;</span><br><span class="hljs-comment"># &#125;</span><br><span class="hljs-comment">#&#125;</span><br></code></pre></td></tr></table></figure><p>学习一途，欲速则不达，真的当你完全弄懂这些配置中的符号的意思之后，你再看这些配置你的感觉是不一样的。当然我也是在一点一点的学习，我甚至装了个有图形化的Ubuntu虚拟机，为了研究nginx,这个默认生成的配置文件，我一开始是看不懂的，我也看了很长时间。😂😂😂</p><h2 id="安装nginx没有生成各类目录文件问题解决"><a href="#安装nginx没有生成各类目录文件问题解决" class="headerlink" title="安装nginx没有生成各类目录文件问题解决"></a>安装nginx没有生成各类目录文件问题解决</h2><p>由于途中我需要手动安装一次，我就把使用apt安装的nginx给卸载了，并且把配置文件给删了，我再次使用apt安装时，发现不重新生成默认配置了。解决办法。依次执行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get --purge remove nginx-common<br><br>sudo apt-get --purge remove nginx*<br><br>sudo apt-get autoremove<br><br>sudo apt install nginx<br></code></pre></td></tr></table></figure><h2 id="常用配置的介绍以及样例"><a href="#常用配置的介绍以及样例" class="headerlink" title="常用配置的介绍以及样例"></a>常用配置的介绍以及样例</h2><h3 id="侦听端口"><a href="#侦听端口" class="headerlink" title="侦听端口"></a>侦听端口</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">server &#123;  <br><span class="hljs-meta prompt_"># </span><span class="language-bash">Standard HTTP Protocol</span>  <br>listen 80;  <br><span class="hljs-meta prompt_"># </span><span class="language-bash">Standard HTTPS Protocol</span>  <br>listen 443 ssl;  <br><span class="hljs-meta prompt_"># </span><span class="language-bash">For http2</span>  <br>listen 443 ssl http2;  <br><span class="hljs-meta prompt_"># </span><span class="language-bash">Listen on 80 using IPv6</span>  <br>listen [::]:80;  <br><span class="hljs-meta prompt_"># </span><span class="language-bash">Listen only on using IPv6</span>  <br>listen [::]:80 ipv6only=on;  <br>&#125;  <br></code></pre></td></tr></table></figure><h3 id="访问日志"><a href="#访问日志" class="headerlink" title="访问日志"></a>访问日志</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">server &#123;  <br><span class="hljs-meta prompt_"># </span><span class="language-bash">Relative or full path to <span class="hljs-built_in">log</span> file</span>  <br>access_log /path/to/file.log;  <br><span class="hljs-meta prompt_"># </span><span class="language-bash">Turn <span class="hljs-string">&#x27;on&#x27;</span> or <span class="hljs-string">&#x27;off&#x27;</span></span>    <br>access_log on;  <br>&#125;  <br></code></pre></td></tr></table></figure><h3 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>server &#123;  <br><span class="hljs-meta prompt_"># </span><span class="language-bash">Listen to yourdomain.com</span>  <br>server_name yourdomain.com;  <br><span class="hljs-meta prompt_"># </span><span class="language-bash">Listen to multiple domains server_name yourdomain.com www.yourdomain.com;</span>  <br><span class="hljs-meta prompt_"># </span><span class="language-bash">Listen to all domains</span>  <br>server_name *.yourdomain.com;  <br><span class="hljs-meta prompt_"># </span><span class="language-bash">Listen to all top-level domains</span>  <br>server_name yourdomain.*;  <br><span class="hljs-meta prompt_"># </span><span class="language-bash">Listen to unspecified Hostnames (Listens to IP address itself)</span>  <br>server_name &quot;&quot;;  <br>&#125; <br></code></pre></td></tr></table></figure><h3 id="静态资产"><a href="#静态资产" class="headerlink" title="静态资产"></a>静态资产</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>server &#123;  <br>listen 80;  <br>server_name yourdomain.com;  <br>location / &#123;  <br>root /path/to/website;  <br>&#125;  <br>&#125;  <br></code></pre></td></tr></table></figure><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">server &#123;  <br>listen 80;  <br>server_name www.yourdomain.com;  <br>return 301 http://yourdomain.com$request_uri;  <br>&#125;  <br>server &#123;  <br>listen 80;  <br>server_name www.yourdomain.com;  <br>location /redirect-url &#123;  <br>return 301 http://otherdomain.com;  <br>&#125;  <br>&#125;  <br></code></pre></td></tr></table></figure><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">[]表示需要填写，</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">nginx默认采用轮训的方式进行负载均衡</span><br>upstream [proxyName] &#123;<br>    server 192.168.1.173:8080;<br>    server 192.168.1.174:8080;<br>    server 192.168.1.175:8080;<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">加权轮询值越高访问频率越高</span><br>upstream [proxyName] &#123;<br>    server 192.168.1.173:8080 weight=1;<br>    server 192.168.1.174:8080 weight=5;<br>    server 192.168.1.175:8080 weight=2;<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"> <span class="hljs-built_in">hash</span>负载均衡</span><br>upstream [proxyName] &#123;<br>    ip_hash<br><br>    server 192.168.1.173:8080;<br>    server 192.168.1.174:8080;<br>    server 192.168.1.175:8080;<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">hash</span>算法实际上只会计算 192.168.1这段做哈希</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用ip_hash的注意点：不能把后台服务器直接移除，只能标记down.</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">url <span class="hljs-built_in">hash</span>负载均衡</span><br>upstream [proxyName] &#123;<br>    hash $request_url;<br><br>    server 192.168.1.173:8080;<br>    server 192.168.1.174:8080;<br>    server 192.168.1.175:8080;<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">最小连接负载均衡</span><br>upstream [proxyName] &#123;<br>    least_conn;<br><br>    server 192.168.1.173:8080;<br>    server 192.168.1.174:8080;<br>    server 192.168.1.175:8080;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="keepalived"><a href="#keepalived" class="headerlink" title="keepalived"></a>keepalived</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">upstream [proxyName] &#123;<br>    server 192.168.1.173:8080 weight=1;<br>    server 192.168.1.174:8080 weight=5;<br>    server 192.168.1.175:8080 weight=2;<br><br>    keepalive 32; #保持的连接数<br>&#125;<br><br>server &#123;<br>    listem  80;<br>    server_name www.tomcats.com;<br><br>    location / &#123;<br>        proxy_pass http://tomcats;<br>        proxy_http_version 1.1; #连接的协议版本<br>        proxy_set_header Connection &quot;&quot;; 清空连接请求头<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="控制浏览器缓存"><a href="#控制浏览器缓存" class="headerlink" title="控制浏览器缓存"></a>控制浏览器缓存</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">server &#123;<br>    listem  80;<br>    server_name www.tomcats.com;<br><br>    location / &#123;<br>        proxy_pass http://tomcats;<br>               expires 10s;  #浏览器缓存10秒钟<br>               #expires @22h30m  #在晚上10点30的时候过期<br>               #expires -1h  #缓存在一小时前时效<br>               #expires epoch  #不设置缓存<br>               #expires off  #缓存关闭，浏览器自己控制缓存<br>               #expires max  #最大过期时间<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="反向代理缓存"><a href="#反向代理缓存" class="headerlink" title="反向代理缓存"></a>反向代理缓存</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell">upstream [proxyName] &#123;<br>    server 192.168.1.173:8080 weight=1;<br>    server 192.168.1.174:8080 weight=5;<br>    server 192.168.1.175:8080 weight=2;<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">proxy_cache_path 设置缓存保存的目录的位置</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">keys_zone设置共享内以及占用的空间大小</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">mas_size 设置缓存最大空间</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">inactive 缓存过期时间，错过此时间自动清理</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">use_temp_path 关闭零时目录</span><br>proxy_cache_path /usr/local/nginx/upsteam_cache keys_zone=mycache:5m max_size=1g inactive=8h use_temp_path=off;<br><br>server &#123;<br>    listem  80;<br>    server_name www.tomcats.com;<br>    #开启并使用缓存<br>    proxy_cache mycache;<br>    #针对200和304响应码的缓存过期时间<br>    proxy_cache_valid 200 304 8h;   <br><br>    location / &#123;<br>        proxy_pass http://tomcats;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">server &#123;  <br>listen 80;  <br>server_name yourdomain.com;  <br>location / &#123;  <br>proxy_pass http://0.0.0.0:3000;  <br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">where</span> 0.0.0.0:3000 is your application server (Ex: node.js) bound on 0.0.0.0 listening on port 3000</span>  <br>&#125;  <br>&#125;  <br></code></pre></td></tr></table></figure><h3 id="SSL-协议"><a href="#SSL-协议" class="headerlink" title="SSL 协议"></a>SSL 协议</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell">server &#123;  <br>listen 443 ssl;  <br>server_name yourdomain.com;  <br>ssl on;  <br>ssl_certificate /path/to/cert.pem;  <br>ssl_certificate_key /path/to/privatekey.pem;  <br>ssl_stapling on;  <br>ssl_stapling_verify on;  <br>ssl_trusted_certificate /path/to/fullchain.pem;  <br>ssl_protocols TLSv1 TLSv1.1 TLSv1.2;  <br>ssl_session_timeout 1h;  <br>ssl_session_cache shared:SSL:50m;  <br>add_header Strict-Transport-Security max-age=15768000;  <br>&#125;  <br><span class="hljs-meta prompt_"># </span><span class="language-bash">Permanent Redirect <span class="hljs-keyword">for</span> HTTP to HTTPS</span>  <br>server   <br>&#123;  <br>listen 80;  <br>server_name yourdomain.com;  <br>return 301 https://$host$request_uri;  <br>&#125;  <br></code></pre></td></tr></table></figure><div class="note note-info">            <p>其实可以采用可视化的方式对 Nginx 进行配置，我在 GitHub 上发现了一款可以一键生成 Nginx 配置的神器，相当给力。</p><p>先来看看它都支持什么功能的配置：反向代理、HTTPS、HTTP&#x2F;2、IPv6, 缓存、WordPress、CDN、Node.js 支持、 Python (Django) 服务器等等。</p><p>如果你想在线进行配置，只需要打开网站：<a href="https://nginxconfig.io/">https://nginxconfig.io/</a>，按照自己的需求进行操作就行了。</p><p>操作这个的前提，也是需要你懂！！别人的理所当然是了如指掌做到的。</p>          </div><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="简单的部署前后台分离的项目配置"><a href="#简单的部署前后台分离的项目配置" class="headerlink" title="简单的部署前后台分离的项目配置"></a>简单的部署前后台分离的项目配置</h3><p>部署前后台分离的项目，随便新建个html项目，里面写一个按钮用来发送Ajax请求。多说两句，webpack项目只是”方便“了开发，最终的产物依然是Html，Css，JavaScript。我们先手撸一个简单的项目前台项目。项目要求就是有个页面，有个按钮。点击能发送Ajax请求，且能把请求的返回内容回馈给用户。需求有了，idea打开，开码！！！</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 这里引入的JS放在nginx中也需要对应根目录存放一个 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/jq/jquery-3.6.0.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.app</span> &#123;</span><br><span class="language-css">   <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">   <span class="hljs-attribute">justify-content</span>: center;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  <span class="hljs-selector-class">.red</span>&#123;</span><br><span class="language-css">   <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  <span class="hljs-selector-class">.green</span>&#123;</span><br><span class="language-css">   <span class="hljs-attribute">color</span>: green;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"> </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;app&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;</span>请点击按钮<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;send()&quot;</span>&gt;</span>点击发送请求<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">   <span class="hljs-keyword">let</span> send = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    $.<span class="hljs-title function_">ajax</span>(&#123;</span><br><span class="language-javascript">     <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;api/get&#x27;</span>,</span><br><span class="language-javascript">     <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;get&#x27;</span>,</span><br><span class="language-javascript">     <span class="hljs-attr">dataType</span>: <span class="hljs-string">&#x27;json&#x27;</span>,</span><br><span class="language-javascript">     <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) &#123;</span><br><span class="language-javascript">      $(<span class="hljs-string">&#x27;#msg&#x27;</span>).<span class="hljs-title function_">remove</span>();</span><br><span class="language-javascript">      $(<span class="hljs-string">&#x27;#app&#x27;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">&#x27;&lt;div id=&quot;msg&quot; class=&quot;green&quot;&gt;返回内容：&#x27;</span>+res.<span class="hljs-property">msg</span>+<span class="hljs-string">&#x27;&lt;div&gt;&#x27;</span>)</span><br><span class="language-javascript">     &#125;,</span><br><span class="language-javascript">     <span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">xhr,status,e</span>) &#123;</span><br><span class="language-javascript">      $(<span class="hljs-string">&#x27;#msg&#x27;</span>).<span class="hljs-title function_">remove</span>();</span><br><span class="language-javascript">      $(<span class="hljs-string">&#x27;#app&#x27;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">&#x27;&lt;div id=&quot;msg&quot; class=&quot;red&quot;&gt;请求错误&lt;div&gt;&#x27;</span>)</span><br><span class="language-javascript">     &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">   &#125;</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>代码写好了，部署。这个很简单啊，你要是图省事，直接覆盖默认配置文件夹中的index.html即可，</p><p><img src="https://tvax4.sinaimg.cn/large/005NNTS5ly1h0s2ijjcdbj31z418gtm3.jpg" alt="前台部署成功"></p><p>很快啊，前台项目部署好了。</p><p>这时候我们需要部署后端项目了。idea打开新建springboot项目。开码！！！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 用来获取端口号项目运行的端口号，后面测试负载均衡时用到 */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConfigWeb</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationListener</span>&lt;WebServerInitializedEvent&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> serverPort;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUrl</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">InetAddress</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            address = InetAddress.getLocalHost();<br>        &#125; <span class="hljs-keyword">catch</span> (UnknownHostException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;http://&quot;</span>+ address.getHostAddress() +<span class="hljs-string">&quot;:&quot;</span>+<span class="hljs-built_in">this</span>.serverPort;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onApplicationEvent</span><span class="hljs-params">(WebServerInitializedEvent event)</span> &#123;<br>        <span class="hljs-built_in">this</span>.serverPort = event.getWebServer().getPort();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>核心代码，get请求返回项目运行端口号。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/api&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IndexController</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> ConfigWeb configWeb;<br>    <span class="hljs-meta">@GetMapping(&quot;/get&quot;)</span><br>    ResponseEntity&lt;Map&lt;String,Object&gt;&gt; <span class="hljs-title function_">get</span><span class="hljs-params">()</span> &#123;<br>        HashMap&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;服务端口&quot;</span>+configWeb.getUrl());<br>        <span class="hljs-keyword">return</span> ResponseEntity.ok(map);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>核心代码如上图。</p><p>很快啊后端也不，后端快不起来，需要装Java环境。稍等，很快啊后端也部署好了。后台服务的端口是8081。这时候我们很自然的想到了，把之前的Ajax中的请求url<code>api/get</code>换成<code>http://localhost:8081/api/get</code>,这样前后台应该就能连通了。于是改了一下刷新页面，再次点击，还是不行。</p><p>报错信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">已拦截跨源请求：同源策略禁止读取位于 http://localhost:8081/api/get 的远程资源。（原因：CORS 头缺少 <span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span>）。状态码：200。<br></code></pre></td></tr></table></figure><p>火狐浏览器是这样提示的，别的浏览器可能会有些许的差别，但不重要，重要的是，我们的前后台并没有连通！！<br>这个时候我们需要配置反向代理了，来规避跨域的错误。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">在配置文件的根目录中块，upstream 后面的字符并不是标识符，</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">你可以写别的如tomcat,我这里是写成了nginx。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">这个块里的server是可以有多个的。这就是传说中的负载均衡。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">你配一个就用来做简单的反向代理即可。配多个就是负载均衡。 默认使用轮询，</span><br>upstream nginx &#123;<br>    server localhost:8081;<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">在server块中加一个location块。`/api/`,表示url中有`/api/`，</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">执行这个逻辑，且别的location不在处理这个url请求</span><br>location /api/ &#123;<br><span class="hljs-meta prompt_">  # </span><span class="language-bash">这里就是反向代理，http://后面的字符对应上面upstream块后的字符。</span><br> roxy_pass http://nginx;<br>&#125;<br></code></pre></td></tr></table></figure><p>到这里配置结束，项目就是就可以正常启动了。需要弄负载均衡，你就多跑几个服务，能进行负载均衡的项目，对项目有一点点要求，要求项目本身必须是无状态的，不然的话可能会影响到正常使用，比如如果你这个项目中是在项目里也就是内存里保存的用户的登录状态，那么你负载均衡时，就会出问题，因为负载均衡默认是轮询，你可以理解成这个节点，你登陆过，你刷新一个页面，然后就访问了新的节点，但是你的登录信息是保存在上一个节点中的，这个新节点，并没有保存你的登录信息，你就需要重新登录。这就影响功能了。所以这种情况一般使用Redis来保存一些状态信息。就可以想跑几个项目就跑几个项目了。状态，这个概念可能难以理解，但是，官方文档英文就是这个意思，理解了自然也就理解了。加油。</p><p>全部配置文件<code>nginx.conf</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs shell">user www-data;<br>worker_processes auto;<br>pid /run/nginx.pid;<br>include /etc/nginx/modules-enabled/*.conf;<br><br>events &#123;<br> worker_connections 768;<br><span class="hljs-meta prompt_"> # </span><span class="language-bash">multi_accept on;</span><br>&#125;<br><br>http &#123;<br> sendfile on;<br> tcp_nopush on;<br> tcp_nodelay on;<br> keepalive_timeout 65;<br> types_hash_max_size 2048;<br> include /etc/nginx/mime.types;<br> default_type application/octet-stream;<br> ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; # Dropping SSLv3, ref: POODLE<br> ssl_prefer_server_ciphers on;<br> access_log /var/log/nginx/access.log;<br> error_log /var/log/nginx/error.log;<br> gzip on;<br> include /etc/nginx/conf.d/*.conf;<br> <br>  upstream nginx &#123;<br>    server localhost:8081;<br>  &#125;<br>  server &#123;<br>  listen 80 default_server;<br>  listen [::]:80 default_server;<br>  root /var/www/html;<br>  index index.html index.htm index.nginx-debian.html;<br>  server_name _;<br><br>  location /api/ &#123;<br>    proxy_pass http://nginx;<br>  &#125;<br><br>  location / &#123;<br>    try_files $uri $uri/ =404;<br>  &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="配置SSL"><a href="#配置SSL" class="headerlink" title="配置SSL"></a>配置SSL</h3><h4 id="使用openssl生成证书"><a href="#使用openssl生成证书" class="headerlink" title="使用openssl生成证书"></a>使用openssl生成证书</h4><p>openssl是目前最流行的SSL密码库工具，其提供了一个通用、健壮、功能完备的工具套件，用以支持SSL&#x2F;TLS协议的实现。</p><p>比如生成到：<code>/usr/local/ssl</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">openssl req -x509 -nodes -days 36500 -newkey rsa:2048 -keyout /usr/local/ssl/nginx.key -out /usr/local/ssl/nginx.crt<br></code></pre></td></tr></table></figure><p>生成好了，一般我们直接强制https，只需要配置一个重定向即可。</p><p>完整的配置nginx.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>user www-data;<br>worker_processes auto;<br>pid /run/nginx.pid;<br>include /etc/nginx/modules-enabled/*.conf;<br><br>events &#123;<br> worker_connections 768;<br><span class="hljs-meta prompt_"> # </span><span class="language-bash">multi_accept on;</span><br>&#125;<br><br>http &#123;<br> sendfile on;<br> tcp_nopush on;<br> tcp_nodelay on;<br> keepalive_timeout 65;<br> types_hash_max_size 2048;<br> include /etc/nginx/mime.types;<br> default_type application/octet-stream;<br> ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; # Dropping SSLv3, ref: POODLE<br> ssl_prefer_server_ciphers on;<br> access_log /var/log/nginx/access.log;<br> error_log /var/log/nginx/error.log;<br> gzip on;<br> include /etc/nginx/conf.d/*.conf;<br><span class="hljs-meta prompt_"> # </span><span class="language-bash">这里是负载均衡。请求后端时建议使用这种方式。默认负载均衡是轮询，就是一个一个按顺序来</span><br>upstream nginx &#123;<br>    # 生产上这里一般配置域名或者ip地址<br>    server localhost:8081;<br>    server localhost:8082;<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">HTTP redirect</span><br>server &#123;<br>    listen      80;<br>    listen      [::]:80;<br>    # 生产上这里一般配置域名<br>    server_name localhost;<br>    # http强制跳转https，可以理解为强制https<br>    return  301 https://localhost$request_uri;<br>&#125;<br><br>server &#123;<br> listen              443 ssl http2;<br> listen              [::]:443 ssl http2;<br> server_name         localhost;<br><span class="hljs-meta prompt_"> # </span><span class="language-bash">SSL 这里生产上需要换成生产上的证书位置即可。自己生成的证书浏览器并不认可。</span><br> ssl_certificate     /usr/local/ssl/nginx.crt;<br> ssl_certificate_key /usr/local/ssl/nginx.key;<br><br> root /var/www/html;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"> # </span><span class="language-bash">首页设置</span><br> index index.html index.htm index.nginx-debian.html;<br><br> location /api/ &#123;<br><span class="hljs-meta prompt_">  # </span><span class="language-bash"> 请求后端服务，这里访问的是配置的负载均衡服务器。</span><br>  proxy_pass http://nginx;<br> &#125;<br><br> location / &#123;<br><span class="hljs-meta prompt_">  # </span><span class="language-bash">如果部署的是Vue等项目，这里可能需要改动，</span><br><span class="hljs-meta prompt_">  # </span><span class="language-bash">如果项目url中有<span class="hljs-comment">#这个的，那就不要动，如果没有#的，那就需要改动。</span></span><br>  try_files $uri $uri/ =404;<br> &#125;<br><br>&#125;<br> <br>&#125;<br><br></code></pre></td></tr></table></figure><p>常用的一般是反向代理和负载均衡。关于负载均衡的地方可以多看看，如果负载均衡中一个服务挂了的情况，会是怎么个处理情况，不同的负载均衡模式下，又有什么不同。等等，都是需要思考的。</p><p>最后应该是关于Ngixn的高可用，作为静态服务器时，Nginx的性能应该够用，反向代理时，我们主要考虑的应该是反向代理目标服务器的稳定。所以就暂且不研究Ngixn的高可用，一般主备双机之类的，真到Nginx扛不住的那时候，首先应该考虑的是架构的问题了。得上微服务了。</p><h2 id="封"><a href="#封" class="headerlink" title="封"></a>封</h2><p><img src="https://tvax4.sinaimg.cn/large/005NNTS5ly1h0v3nbhzz0j32yo1o0u0y.jpg" alt="原神和煦希望之风"></p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>动态数据源，多数据源，读写分离</title>
    <link href="/2022/03/11/java-11/"/>
    <url>/2022/03/11/java-11/</url>
    
    <content type="html"><![CDATA[<p>使用springboot给你带来多大便利，你就要接受方便使用带来的相应的复杂度。直线正常跑谁不会给油啊，弯道快，才是真的快。说一说，数据源，就是个DataSource，多数据源就是多个DataSource，读写分离，就是读用一个数据源，写入一个数据源。一般增删改使用主库，查使用从库。配置数据库主从复制。</p><p>在springboot中对数据源怎么操作嘞。说思路，springboot中的自动配置用的很舒服，我们要做的就是把springboot这个我们用的很舒服的自动配置给去掉。这个自动配置会往运行环境里添加一个默认的数据源。这个自动配置这块东西不少，各种花里胡哨的注解，我见都是第一次见，你让我知道它的作用，是有一点扯的。害，没有开发springbooot-stater的经验，不宜多说。</p><h2 id="手动注入数据源"><a href="#手动注入数据源" class="headerlink" title="手动注入数据源"></a>手动注入数据源</h2><h3 id="以前的XML写法"><a href="#以前的XML写法" class="headerlink" title="以前的XML写法"></a>以前的XML写法</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--2. 配置数据源--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="JavaConfig写法"><a href="#JavaConfig写法" class="headerlink" title="JavaConfig写法"></a>JavaConfig写法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataContext</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">dataSource</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">HikariDataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HikariDataSource</span>();<br>        dataSource.setJdbcUrl(<span class="hljs-string">&quot;xxxx&quot;</span>);<br>        dataSource.setUsername(<span class="hljs-string">&quot;xxxx&quot;</span>);<br>        dataSource.setPassword(<span class="hljs-string">&quot;xxxx&quot;</span>);<br>        <span class="hljs-keyword">return</span> dataSource;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>springboot相当于是集JavaConfig于大成者，springboot的stater，大多数就是配置上面的内容，使用springboot的规范就能在启动的时候加载配置类。一般手动注入数据源，需要先把springboot自动加载的配置类给排除掉，改一下启动类的注解<code>@SpringBootApplication(exclude = &#123;DataSourceAutoConfiguration.class&#125;)</code> 改成这样就可以，为什么我要拿出来说呢，因为在下面实现动态数据源的时候也是需要排除这个的。</p><h2 id="动态数据源"><a href="#动态数据源" class="headerlink" title="动态数据源"></a>动态数据源</h2><p>浅聊一下，动态数据源是对数据源的高级操作，所以就不要有这样的疑问，动态数据源能不能做到读写分离，能不能多数据源这样的问题。这种问题就和知乎上的提问：请问我拿了诺奖后可不可以保研？</p><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dynamic-datasource-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;dynamic.verion&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-comment">&lt;!-- maven官网上用最新的版本即可 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="yml配置"><a href="#yml配置" class="headerlink" title="yml配置"></a>yml配置</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-comment"># 数据源配置</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-comment"># 动态数据源配置</span><br>    <span class="hljs-attr">dynamic:</span><br>      <span class="hljs-comment"># 设置默认的库,默认master</span><br>      <span class="hljs-attr">primary:</span> <span class="hljs-string">master</span><br>      <span class="hljs-comment"># 是否启用严格模式,默认不启动. 严格模式下未匹配到数据源直接报错, 非严格模式下则使用默认数据源primary所设置的数据源</span><br>      <span class="hljs-attr">strict:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-comment"># 是否使用p6spy输出，默认不输出</span><br>      <span class="hljs-attr">p6spy:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-comment"># 数据源列表</span><br>      <span class="hljs-attr">datasource:</span><br>        <span class="hljs-comment"># 主库</span><br>        <span class="hljs-attr">master:</span><br>          <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://127.0.0.1:3306/xxxx</span><br>          <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>          <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br>        <span class="hljs-comment"># 从库1</span><br>        <span class="hljs-attr">second1:</span><br>          <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://127.0.0.1:3306/xxxx</span><br>          <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>          <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br>        <span class="hljs-comment"># 从库2</span><br>        <span class="hljs-attr">second2:</span><br>          <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://127.0.0.1:3306/xxxx</span><br>          <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>          <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br></code></pre></td></tr></table></figure><h3 id="使用-DS切换数据源"><a href="#使用-DS切换数据源" class="headerlink" title="使用@DS切换数据源"></a>使用<code>@DS</code>切换数据源</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NameServer</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    JdbcTemplate jdbcTemplate;<br>    <span class="hljs-meta">@DS(ConstSource.SECOND2)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br>        List&lt;Map&lt;String, Object&gt;&gt; maps = jdbcTemplate.queryForList(<span class="hljs-string">&quot;select name from wlf&quot;</span>);<br>        <span class="hljs-keyword">return</span> maps.get(<span class="hljs-number">0</span>).get(<span class="hljs-string">&quot;name&quot;</span>)+<span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 这里一般对应配置文件中的数据源新建常量。</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 数据源常量</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConstSource</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">MASTER</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;master&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SECOND1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;second1&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SECOND2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;second2&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>@DS</code> 可以注解在方法上或类上，同时存在就近原则 方法上注解 优先于 类上注解。</p><table><thead><tr><th>注解</th><th>结果</th></tr></thead><tbody><tr><td>没有@DS</td><td>默认数据源</td></tr><tr><td>@DS(“dsName”)</td><td>dsName可以为组名也可以为具体某个库的名称</td></tr></tbody></table><h3 id="编程式切换数据源"><a href="#编程式切换数据源" class="headerlink" title="编程式切换数据源"></a>编程式切换数据源</h3><p>框架提供了编程式切换数据源。稍加封装改造一下。不建议手动修改数据源。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataContext</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">protected</span> DataSource dataSource;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">protected</span> DefaultDataSourceCreator dataSourceCreator;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 新增数据源</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name 名称</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> username 账户</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> password 密码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> url 连接</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> driver 驱动</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createDataSource</span><span class="hljs-params">(String name, String username, String password, String url, String driver)</span>&#123;<br>        <span class="hljs-type">DynamicRoutingDataSource</span> <span class="hljs-variable">dynamicRoutingDataSource</span> <span class="hljs-operator">=</span> (DynamicRoutingDataSource) dataSource;<br><br>        <span class="hljs-type">DataSourceProperty</span> <span class="hljs-variable">dsp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataSourceProperty</span>();<br>        dsp.setPoolName(name);<br>        dsp.setUrl(url);<br>        dsp.setUsername(username);<br>        dsp.setPassword(password);<br>        dsp.setDriverClassName(driver);<br><br>        <span class="hljs-type">DataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> dataSourceCreator.createDataSource(dsp);<br>        dynamicRoutingDataSource.addDataSource(name, dataSource);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 不建议手动调用</span><br><span class="hljs-comment">     * 切换数据源，调用过后使用完毕后请务必调用一次cleanDataSource()方法。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name 名称</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changeDataSource</span><span class="hljs-params">(String name)</span>&#123;<br>        DynamicDataSourceContextHolder.push(name);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 清空数据源</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name 名称</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cleanDataSource</span><span class="hljs-params">(String name)</span> &#123;<br>        DynamicDataSourceContextHolder.poll();<br>    &#125;<br><br>     <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 清空所有数据源</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cleanDataSource</span><span class="hljs-params">()</span> &#123;<br>        DynamicDataSourceContextHolder.clear();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 修改数据源</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name 名称</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> username 账户</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> password 密码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> url 连接</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> driver 驱动</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateDataSource</span><span class="hljs-params">(String name, String username, String password, String url, String driver)</span> &#123;<br>        removeDataSource(name);<br>        createDataSource(name, username, password, url, driver);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除数据源</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name 名称</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeDataSource</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-type">DynamicRoutingDataSource</span> <span class="hljs-variable">dynamicRoutingDataSource</span> <span class="hljs-operator">=</span> (DynamicRoutingDataSource) dataSource;<br>        dynamicRoutingDataSource.removeDataSource(name);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 数据源列表</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-keyword">public</span> Map&lt;String, DataSource&gt; <span class="hljs-title function_">getDataSources</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">DynamicRoutingDataSource</span> <span class="hljs-variable">dynamicRoutingDataSource</span> <span class="hljs-operator">=</span> (DynamicRoutingDataSource) dataSource;<br>        <span class="hljs-keyword">return</span> dynamicRoutingDataSource.getDataSources();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取数据源</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name 名称</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">getDataSource</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-type">DynamicRoutingDataSource</span> <span class="hljs-variable">dynamicRoutingDataSource</span> <span class="hljs-operator">=</span> (DynamicRoutingDataSource) dataSource;<br>        <span class="hljs-keyword">return</span> dynamicRoutingDataSource.getDataSource(name);<br>    &#125;<br><br>    <span class="hljs-comment">// init dataSource</span><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadDataSource</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 这里是伪码，正常情况是从数据库中获取数据库连接信息</span><br>        List&lt;SysDataSource&gt; sysDataSources = sysDataSourceService.list();<br>        <span class="hljs-comment">// 循环调用添加方法即可</span><br>        sysDataSources.forEach(sysDataSource -&gt; &#123;<br>            createDataSource(<br>                    sysDataSource.getName(),<br>                    sysDataSource.getUsername(),<br>                    sysDataSource.getPassword(),<br>                    sysDataSource.getUrl(),<br>                    sysDataSource.getDriver());<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>PS: 这种编程运行时操作数据源已经有点十分方便了，核心就是这个类<code>DefaultDataSourceCreator</code>，如果想深入了解可以看一看源码，可以以此种模式操作多租户的模式，根据不同用户连接不同的数据源。</p><h3 id="使用MyBatis插件读写分离"><a href="#使用MyBatis插件读写分离" class="headerlink" title="使用MyBatis插件读写分离"></a>使用MyBatis插件读写分离</h3><p>添加配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CoreConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ConfigurationCustomizer <span class="hljs-title function_">mybatisConfigurationCustomizer</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> configuration -&gt; configuration.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MasterSlaveAutoRoutingPlugin</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>支持MybatisPlus。及MyBatis.<br>PS：主从数据源配置应为</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">dynamic:</span><br>      <span class="hljs-attr">primary:</span> <span class="hljs-string">master</span><br>      <span class="hljs-attr">datasource:</span><br>        <span class="hljs-comment"># 主库</span><br>        <span class="hljs-attr">master:</span><br>        <span class="hljs-comment"># 从库1</span><br>        <span class="hljs-attr">slave_1:</span><br>        <span class="hljs-comment"># 从库2</span><br>        <span class="hljs-attr">slave_2:</span><br></code></pre></td></tr></table></figure><p><code>slave_1</code>,<code>slave_2</code>这样表示这两个数据源为一组，注解切换或者手动切换是数据源名应为<code>slave</code>,而不是<code>slave_1</code>,</p><h2 id="切换数据源失败"><a href="#切换数据源失败" class="headerlink" title="切换数据源失败"></a>切换数据源失败</h2><h3 id="使用了spring的事务，则切换数据源会有几率会失效，或者百分百失效"><a href="#使用了spring的事务，则切换数据源会有几率会失效，或者百分百失效" class="headerlink" title="使用了spring的事务，则切换数据源会有几率会失效，或者百分百失效"></a>使用了spring的事务，则切换数据源会有几率会失效，或者百分百失效</h3><p>开发者原文：</p><div class="note note-info">            <p>原因： spring开启事务后会维护一个ConnectionHolder，保证在整个事务下，都是用同一个数据库连接。请检查整个调用链路涉及的类的方法和类本身还有继承的抽象类上是否有@Transactional注解。</p>          </div><h3 id="方法内部调用"><a href="#方法内部调用" class="headerlink" title="方法内部调用"></a>方法内部调用</h3><p>查看以下示例 回答 外部调用 userservice.test1() 能在执行到 test2() 切换到second数据源吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> UserService &#123;<br><br>    <span class="hljs-meta">@DS(&quot;first&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// do something</span><br>         test2();<br>    &#125;<br><br>    <span class="hljs-meta">@DS(&quot;second&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// do something</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>答案：！！！不能不能不能！！！！ 数据源核心原理是基于aop代理实现切换，内部方法调用不会使用aop。</p><p>解决方法:</p><p>把test2()方法提到另外一个service,单独调用。</p><h3 id="使用了Shiro"><a href="#使用了Shiro" class="headerlink" title="使用了Shiro"></a>使用了Shiro</h3><p>建议不用，可以使用<code>sa-token</code>来代替。</p><h2 id="事务控制"><a href="#事务控制" class="headerlink" title="事务控制"></a>事务控制</h2><p>上面说到了使用spring的事务，会导致切换数据源失败。框架开发者也了解这个情况，写了一个本地的事务工具类<code>LocalTxUtil</code>来解决此问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LocalTxUtil</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 手动开启事务</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startTransaction</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(TransactionContext.getXID())) &#123;<br>            log.debug(<span class="hljs-string">&quot;dynamic-datasource exist local tx [&#123;&#125;]&quot;</span>, TransactionContext.getXID());<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">xid</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();<br>            TransactionContext.bind(xid);<br>            log.debug(<span class="hljs-string">&quot;dynamic-datasource start local tx [&#123;&#125;]&quot;</span>, xid);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 手动提交事务</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">commit</span><span class="hljs-params">()</span> &#123;<br>        ConnectionFactory.notify(<span class="hljs-literal">true</span>);<br>        log.debug(<span class="hljs-string">&quot;dynamic-datasource commit local tx [&#123;&#125;]&quot;</span>, TransactionContext.getXID());<br>        TransactionContext.remove();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 手动回滚事务</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rollback</span><span class="hljs-params">()</span> &#123;<br>        ConnectionFactory.notify(<span class="hljs-literal">false</span>);<br>        log.debug(<span class="hljs-string">&quot;dynamic-datasource rollback local tx [&#123;&#125;]&quot;</span>, TransactionContext.getXID());<br>        TransactionContext.remove();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>在如今各种持久层框架中，我们越来越感知不到数据源的存在，好处是，配置简单了，坏处就是对数据源的处理时就有些麻烦。在古老的JDBC中，其实没有这个问题，万物<code>queryForList()</code>，换个数据源继续<code>queryForList()</code>。这个框架理论上支持任何持久层，因为人根本没把目光放在持久层上，专注于数据源，它只操作数据源的。</p><p>在springboot2.6.x的版本的不允许依赖循环，我属实不能理解。我不理解，</p><h2 id="封面"><a href="#封面" class="headerlink" title="封面"></a>封面</h2><p><img src="https://tva1.sinaimg.cn/large/005NNTS5ly1h0d0j8r2dkj32yo1o07wi.jpg" alt="cosplay原神 珊瑚宫心海"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springboot</tag>
      
      <tag>数据源</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PostgreSQL数据库安装</title>
    <link href="/2022/03/01/java-10/"/>
    <url>/2022/03/01/java-10/</url>
    
    <content type="html"><![CDATA[<p>postgresql和mysql差不多，都是免费开源的的数据库软件，在免费数据库，postgresql算是一个后起之秀。好像是比Mysql要优异一点，在各方面上。对于开发者来说，学习一个东西的第一步，肯定是先安装，然后再使用，使用我还没有在项目中使用过，不过我感觉都是sql标准，大差不差吧。</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="https://www.baidu.com/s?ie=UTF-8&wd=PostgreSQL">百度一下</a></p><p>官网上下载。我这边下载的是14.2的版本，压缩包的安装方式，下载解压进入<code>pgsql</code>文件夹下，新建一个data文件夹，用来存放数据文件，cmd进入<code>pgsql</code>目录。执行命令。</p><h3 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bin\initdb -D data -U postgres -A password -E utf8 --locale=C -W<br></code></pre></td></tr></table></figure><div class="note note-info">            <p>-D  data                       指定初始化的数据库目录(此处为当前目录的data文件夹)<br>-U  postgres                数据库超级用户名（此处为postgres，如果不设置，会用当前windows用户名为账号）<br>-A  password              数据库使用密码授权<br>-E  utf8                       数据库编码格式<br>–locale&#x3D;C                  数据库簇使用的本地化语言<br>-W                              命令行执行后 输入密码</p>          </div><p>执行命令过后输入密码，应该要输入两遍，输入一个自己记得住的密码，其他的从参数输入 <code>initdb --help</code>查看</p><h3 id="启动数据库"><a href="#启动数据库" class="headerlink" title="启动数据库"></a>启动数据库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bin\pg_ctl -D data start<br></code></pre></td></tr></table></figure><p>然后使用数据库连接软件连接查看即可。</p><h3 id="注册到服务"><a href="#注册到服务" class="headerlink" title="注册到服务"></a>注册到服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bin\pg_ctl register -N <span class="hljs-string">&quot;pgsql&quot;</span> -D xxxx<br></code></pre></td></tr></table></figure><p>注意：</p><div class="note note-info">            <p>-D后面填写你新建的那个data文件夹的绝对路径</p>          </div><p>运行过后即可使用 <code>net start pgsql</code> 命令来启动数据库服务，也可以设置成开机自启。停止运行的命令<code>net stop pgsql</code>，执行net命令失败的话请使用管理员身份操作CMD</p><h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>为什么要使用压缩包的安装方式？主要数据库这东西大多数都是在服务器上运行的，而现在小公司linux服务用的居多，多是没有操作界面的，使用压缩包的安装方式主要不挑系统。就是这个原因。话说有几个同学知道Linux解压文件的命令是什么。哈哈哈😆😆😆😆</p><h2 id="封面"><a href="#封面" class="headerlink" title="封面"></a>封面</h2><p><img src="https://tvax4.sinaimg.cn/large/005NNTS5ly1gzwgk3spe5j32yo1o04qq.jpg" alt="冬天雪风景"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springboot项目记录http请求记录</title>
    <link href="/2022/02/18/java-09/"/>
    <url>/2022/02/18/java-09/</url>
    
    <content type="html"><![CDATA[<p>代码来咯，看代码多是一件美事呦，你他奶奶的为什么不看代码，给我看。</p><p>工作的时候，尤其是接口联调的时候，打印http请求记录是甩锅和解决问题的最好的方式。尤其是请求体里的内容。就是这个获取请求体的内容其实还有点门道，我就被坑过，你直接在拦截器里直接获取request里面的body，拦截器里能获取到，Controller里面就获取不到了。具体原因不深究，就是Body是用流传的，你读取了之后这个流就被消耗了，然后后面的代码再从request里面就读取不到了。</p><h2 id="引入spring-boot-starter-actuator"><a href="#引入spring-boot-starter-actuator" class="headerlink" title="引入spring-boot-starter-actuator"></a>引入<code>spring-boot-starter-actuator</code></h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>引入之后，配置存储方式<code>httpTraceRepository</code>，这个实例就是添加在内存中存储最近100次请求记录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConfigTrace</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> HttpTraceRepository <span class="hljs-title function_">httpTraceRepository</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryHttpTraceRepository</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后在application.properties中加入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">management.endpoints.web.exposure.include=*<br></code></pre></td></tr></table></figure><p>运行项目访问<code>http://localhost:8080/actuator/httptrace</code></p><p>得到这样的JSON数据（已经格式化），</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;traces&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;timestamp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2022-02-19T05:08:05.370267100Z&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;principal&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">null</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;session&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">null</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;request&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;method&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;GET&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;uri&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://localhost:8080/index?a=%E4%BB%8E%E5%89%8D%E4%BB%8E%E5%89%8D&amp;b=%E6%9C%89%E4%B8%AA%E4%BA%BA%E7%88%B1%E4%BD%A0%E5%BE%88%E4%B9%85&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;headers&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;host&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;localhost:8080&quot;</span><br>          <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;content-type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span><br>          <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;connection&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;Keep-Alive&quot;</span><br>          <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;accept-encoding&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;gzip,deflate&quot;</span><br>          <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;user-agent&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;Apache-HttpClient/4.5.13 (Java/11.0.12)&quot;</span><br>          <span class="hljs-punctuation">]</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;remoteAddress&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">null</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;response&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">200</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;headers&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;Keep-Alive&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;timeout=60&quot;</span><br>          <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;Connection&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;keep-alive&quot;</span><br>          <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;Content-Length&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;35&quot;</span><br>          <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;Date&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;Sat, 19 Feb 2022 05:08:05 GMT&quot;</span><br>          <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;Content-Type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;text/plain;charset=UTF-8&quot;</span><br>          <span class="hljs-punctuation">]</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;timeTaken&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">120</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>引入这个依赖的好处，就是几乎不需要写任何代码，引入，然后配置一下即可查看，缺点也有就是不能记录post请求的请求体，也无法记录返回值，持久化，目前我没有研究，但是我感觉可以。可以自行查阅资料研究。</p><h2 id="使用springmvc自带的一个类"><a href="#使用springmvc自带的一个类" class="headerlink" title="使用springmvc自带的一个类"></a>使用springmvc自带的一个类</h2><p>增加一个配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br>    CommonsRequestLoggingFilter <span class="hljs-title function_">loggingFilter</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">CommonsRequestLoggingFilter</span> <span class="hljs-variable">loggingFilter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonsRequestLoggingFilter</span>();<br>        <span class="hljs-comment">// 记录 客户端 IP信息</span><br>        loggingFilter.setIncludeClientInfo(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">// 记录请求头</span><br>        loggingFilter.setIncludeHeaders(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">// 如果记录请求头的话，可以指定哪些记录，哪些不记录</span><br>        <span class="hljs-comment">// loggingFilter.setHeaderPredicate();</span><br>        <span class="hljs-comment">// 记录 请求体  特别是POST请求的body参数</span><br>        loggingFilter.setIncludePayload(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">// 请求体的大小限制 默认50</span><br>        loggingFilter.setMaxPayloadLength(<span class="hljs-number">10000</span>);<br>        <span class="hljs-comment">//记录请求路径中的query参数</span><br>        loggingFilter.setIncludeQueryString(<span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">return</span> loggingFilter;<br>    &#125;<br></code></pre></td></tr></table></figure><p><code>CommonsRequestLoggingFilter</code>可以点进去看一下，就是一个springboot提供得一个类。可以自己进行改造。接下来再配置一下logback就行。配置如下。看不懂或者不理解看这个<a href="https://wangijun.com/2022/01/05/java-07/">logback配置详情</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        输出日志到控制台</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;soutAppender&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">layout</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.PatternLayout&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%date %level [%thread] %logger&#123;10&#125;.%class&#123;0&#125;#%method[%file:%line] %n%msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        输出日志到文件</span><br><span class="hljs-comment">     --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fileAppender&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">append</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">append</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">prudent</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">prudent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">File</span>&gt;</span>logs/log.log<span class="hljs-tag">&lt;/<span class="hljs-name">File</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>logs/%d&#123;yyyy-MM-dd&#125;/log%i.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 单个日志文件最大体积 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>10MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 对日志进行格式化 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%date %level [%thread] %logger&#123;10&#125;.%class&#123;0&#125;#%method[%file:%line] %n%msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 这个是重点 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.springframework.web.filter.CommonsRequestLoggingFilter&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;debug&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;soutAppender&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;fileAppender&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置好打印的日志应该是这样</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-number">2022</span><span class="hljs-number">-02</span><span class="hljs-number">-19</span> <span class="hljs-number">19</span><span class="hljs-punctuation">:</span><span class="hljs-number">02</span><span class="hljs-punctuation">:</span><span class="hljs-number">28</span><span class="hljs-punctuation">,</span><span class="hljs-number">608</span> DEBUG <span class="hljs-punctuation">[</span>http-nio<span class="hljs-number">-8080</span>-exec<span class="hljs-number">-1</span><span class="hljs-punctuation">]</span> o.s.w.f.CommonsRequestLoggingFilter.CommonsRequestLoggingFilter#beforeRequest<span class="hljs-punctuation">[</span>CommonsRequestLoggingFilter.java<span class="hljs-punctuation">:</span><span class="hljs-number">47</span><span class="hljs-punctuation">]</span> <br>Before request <span class="hljs-punctuation">[</span>GET /index?a=%E4%BB%<span class="hljs-number">8</span>E%E5%<span class="hljs-number">89</span>%<span class="hljs-number">8</span>D%E4%BB%<span class="hljs-number">8</span>E%E5%<span class="hljs-number">89</span>%<span class="hljs-number">8</span>D&amp;b=%E6%<span class="hljs-number">9</span>C%<span class="hljs-number">89</span>%E4%B8%AA%E4%BA%BA%E7%<span class="hljs-number">88</span>%B1%E4%BD%A0%E5%BE%<span class="hljs-number">88</span>%E4%B9%<span class="hljs-number">85</span><span class="hljs-punctuation">,</span> client=<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-punctuation">,</span> headers=<span class="hljs-punctuation">[</span>host<span class="hljs-punctuation">:</span><span class="hljs-string">&quot;localhost:8080&quot;</span><span class="hljs-punctuation">,</span> connection<span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Keep-Alive&quot;</span><span class="hljs-punctuation">,</span> user-agent<span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Apache-HttpClient/4.5.13 (Java/11.0.12)&quot;</span><span class="hljs-punctuation">,</span> accept-encoding<span class="hljs-punctuation">:</span><span class="hljs-string">&quot;gzip,deflate&quot;</span><span class="hljs-punctuation">,</span> Content-Type<span class="hljs-punctuation">:</span><span class="hljs-string">&quot;application/x-www-form-urlencoded;charset=UTF-8&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-number">2022</span><span class="hljs-number">-02</span><span class="hljs-number">-19</span> <span class="hljs-number">19</span><span class="hljs-punctuation">:</span><span class="hljs-number">02</span><span class="hljs-punctuation">:</span><span class="hljs-number">28</span><span class="hljs-punctuation">,</span><span class="hljs-number">668</span> DEBUG <span class="hljs-punctuation">[</span>http-nio<span class="hljs-number">-8080</span>-exec<span class="hljs-number">-1</span><span class="hljs-punctuation">]</span> o.s.w.f.CommonsRequestLoggingFilter.CommonsRequestLoggingFilter#afterRequest<span class="hljs-punctuation">[</span>CommonsRequestLoggingFilter.java<span class="hljs-punctuation">:</span><span class="hljs-number">55</span><span class="hljs-punctuation">]</span> <br>After request <span class="hljs-punctuation">[</span>GET /index?a=%E4%BB%<span class="hljs-number">8</span>E%E5%<span class="hljs-number">89</span>%<span class="hljs-number">8</span>D%E4%BB%<span class="hljs-number">8</span>E%E5%<span class="hljs-number">89</span>%<span class="hljs-number">8</span>D&amp;b=%E6%<span class="hljs-number">9</span>C%<span class="hljs-number">89</span>%E4%B8%AA%E4%BA%BA%E7%<span class="hljs-number">88</span>%B1%E4%BD%A0%E5%BE%<span class="hljs-number">88</span>%E4%B9%<span class="hljs-number">85</span><span class="hljs-punctuation">,</span> client=<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-punctuation">,</span> headers=<span class="hljs-punctuation">[</span>host<span class="hljs-punctuation">:</span><span class="hljs-string">&quot;localhost:8080&quot;</span><span class="hljs-punctuation">,</span> connection<span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Keep-Alive&quot;</span><span class="hljs-punctuation">,</span> user-agent<span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Apache-HttpClient/4.5.13 (Java/11.0.12)&quot;</span><span class="hljs-punctuation">,</span> accept-encoding<span class="hljs-punctuation">:</span><span class="hljs-string">&quot;gzip,deflate&quot;</span><span class="hljs-punctuation">,</span> Content-Type<span class="hljs-punctuation">:</span><span class="hljs-string">&quot;application/x-www-form-urlencoded;charset=UTF-8&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-number">2022</span><span class="hljs-number">-02</span><span class="hljs-number">-19</span> <span class="hljs-number">19</span><span class="hljs-punctuation">:</span><span class="hljs-number">02</span><span class="hljs-punctuation">:</span><span class="hljs-number">39</span><span class="hljs-punctuation">,</span><span class="hljs-number">737</span> DEBUG <span class="hljs-punctuation">[</span>http-nio<span class="hljs-number">-8080</span>-exec<span class="hljs-number">-3</span><span class="hljs-punctuation">]</span> o.s.w.f.CommonsRequestLoggingFilter.CommonsRequestLoggingFilter#beforeRequest<span class="hljs-punctuation">[</span>CommonsRequestLoggingFilter.java<span class="hljs-punctuation">:</span><span class="hljs-number">47</span><span class="hljs-punctuation">]</span> <br>Before request <span class="hljs-punctuation">[</span>POST /save<span class="hljs-punctuation">,</span> client=<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-punctuation">,</span> headers=<span class="hljs-punctuation">[</span>content-length<span class="hljs-punctuation">:</span><span class="hljs-string">&quot;14&quot;</span><span class="hljs-punctuation">,</span> host<span class="hljs-punctuation">:</span><span class="hljs-string">&quot;localhost:8080&quot;</span><span class="hljs-punctuation">,</span> connection<span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Keep-Alive&quot;</span><span class="hljs-punctuation">,</span> user-agent<span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Apache-HttpClient/4.5.13 (Java/11.0.12)&quot;</span><span class="hljs-punctuation">,</span> accept-encoding<span class="hljs-punctuation">:</span><span class="hljs-string">&quot;gzip,deflate&quot;</span><span class="hljs-punctuation">,</span> Content-Type<span class="hljs-punctuation">:</span><span class="hljs-string">&quot;application/x-www-form-urlencoded;charset=UTF-8&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br><span class="hljs-number">2022</span><span class="hljs-number">-02</span><span class="hljs-number">-19</span> <span class="hljs-number">19</span><span class="hljs-punctuation">:</span><span class="hljs-number">02</span><span class="hljs-punctuation">:</span><span class="hljs-number">39</span><span class="hljs-punctuation">,</span><span class="hljs-number">743</span> DEBUG <span class="hljs-punctuation">[</span>http-nio<span class="hljs-number">-8080</span>-exec<span class="hljs-number">-3</span><span class="hljs-punctuation">]</span> o.s.w.f.CommonsRequestLoggingFilter.CommonsRequestLoggingFilter#afterRequest<span class="hljs-punctuation">[</span>CommonsRequestLoggingFilter.java<span class="hljs-punctuation">:</span><span class="hljs-number">55</span><span class="hljs-punctuation">]</span> <br>After request <span class="hljs-punctuation">[</span>POST /save<span class="hljs-punctuation">,</span> client=<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-punctuation">,</span> headers=<span class="hljs-punctuation">[</span>content-length<span class="hljs-punctuation">:</span><span class="hljs-string">&quot;14&quot;</span><span class="hljs-punctuation">,</span> host<span class="hljs-punctuation">:</span><span class="hljs-string">&quot;localhost:8080&quot;</span><span class="hljs-punctuation">,</span> connection<span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Keep-Alive&quot;</span><span class="hljs-punctuation">,</span> user-agent<span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Apache-HttpClient/4.5.13 (Java/11.0.12)&quot;</span><span class="hljs-punctuation">,</span> accept-encoding<span class="hljs-punctuation">:</span><span class="hljs-string">&quot;gzip,deflate&quot;</span><span class="hljs-punctuation">,</span> Content-Type<span class="hljs-punctuation">:</span><span class="hljs-string">&quot;application/x-www-form-urlencoded;charset=UTF-8&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> payload=a=%E4%BD%A0%E5%A5%BD%E4%B8%<span class="hljs-number">96</span>%E7%<span class="hljs-number">95</span>%<span class="hljs-number">8</span>C<span class="hljs-punctuation">]</span><br><br></code></pre></td></tr></table></figure><p>payload中得东西为请求体。一次请求会打印两条日志，Before request为过滤器前，After request为过滤器后的记录，这种方式其实已经挺好用了。但是还有个问题就是不能记录返回值，也有方法。</p><h2 id="记录返回值"><a href="#记录返回值" class="headerlink" title="记录返回值"></a>记录返回值</h2><p>继承<code>ResponseBodyAdvice</code>和使用<code>RestControllerAdvice</code>注解来实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RestBodyAdvice</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ResponseBodyAdvice</span>&lt;Object&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEFAULT_MAX_PAYLOAD_LENGTH</span> <span class="hljs-operator">=</span> <span class="hljs-number">10000</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">REQUEST_MESSAGE_PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Request [&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">REQUEST_MESSAGE_SUFFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;]&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 顶级异常</span><br><span class="hljs-comment">     * 异常的信息也能捕获到</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ExceptionHandler(Exception.class)</span><br>    ResponseEntity&lt;Object&gt; <span class="hljs-title function_">handlerException</span><span class="hljs-params">(Exception e,</span><br><span class="hljs-params">                                              HttpServletRequest rq, HttpServletResponse rp)</span> &#123;<br>        log.error(<span class="hljs-string">&quot;顶级异常: &#123;&#125;&quot;</span>,e.getMessage());<br>        e.printStackTrace();<br>        <span class="hljs-keyword">return</span> ResponseEntity.ok(<span class="hljs-string">&quot;系统错误&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supports</span><span class="hljs-params">(MethodParameter returnType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; converterType)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@SneakyThrows</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">beforeBodyWrite</span><span class="hljs-params">(Object body,</span><br><span class="hljs-params">                                  MethodParameter returnType,</span><br><span class="hljs-params">                                  MediaType selectedContentType,</span><br><span class="hljs-params">                                  Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; selectedConverterType,</span><br><span class="hljs-params">                                  ServerHttpRequest request,</span><br><span class="hljs-params">                                  ServerHttpResponse response)</span> &#123;<br><br>        <span class="hljs-type">ServletServerHttpRequest</span> <span class="hljs-variable">servletServerHttpRequest</span> <span class="hljs-operator">=</span> (ServletServerHttpRequest) request;<br><br>        log.debug(createRequestMessage(servletServerHttpRequest.getServletRequest(), REQUEST_MESSAGE_PREFIX, REQUEST_MESSAGE_SUFFIX));<br>        <span class="hljs-comment">// 这里注意一下，如果body已经是JOSN数据了在进行转JSON处理会报错。</span><br>        log.debug(<span class="hljs-string">&quot;Response Body [&quot;</span>+ objectMapper.writeValueAsString(body) +<span class="hljs-string">&quot;]&quot;</span>);<br>        <span class="hljs-keyword">return</span> body;<br>    &#125;<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">checkPrimitive</span><span class="hljs-params">(Object body)</span> &#123;<br>        Class&lt;?&gt; clazz = body.getClass();<br>        <span class="hljs-keyword">return</span> clazz.isPrimitive()<br>                || clazz.isArray()<br>                || Collection.class.isAssignableFrom(clazz)<br>                || body <span class="hljs-keyword">instanceof</span> Number<br>                || body <span class="hljs-keyword">instanceof</span> Boolean<br>                || body <span class="hljs-keyword">instanceof</span> Character<br>                || body <span class="hljs-keyword">instanceof</span> String;<br>    &#125;<br><br><br>    <span class="hljs-keyword">protected</span> String <span class="hljs-title function_">createRequestMessage</span><span class="hljs-params">(HttpServletRequest request, String prefix, String suffix)</span> &#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        msg.append(prefix);<br>        msg.append(request.getMethod()).append(<span class="hljs-string">&quot; &quot;</span>);<br>        msg.append(request.getRequestURI());<br><br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">queryString</span> <span class="hljs-operator">=</span> request.getQueryString();<br>        <span class="hljs-keyword">if</span> (queryString != <span class="hljs-literal">null</span>) &#123;<br>            msg.append(<span class="hljs-string">&#x27;?&#x27;</span>).append(queryString);<br>        &#125;<br><br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> request.getRemoteAddr();<br>        <span class="hljs-keyword">if</span> (StringUtils.hasLength(client)) &#123;<br>            msg.append(<span class="hljs-string">&quot;, client=&quot;</span>).append(client);<br>        &#125;<br>        <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession(<span class="hljs-literal">false</span>);<br>        <span class="hljs-keyword">if</span> (session != <span class="hljs-literal">null</span>) &#123;<br>            msg.append(<span class="hljs-string">&quot;, session=&quot;</span>).append(session.getId());<br>        &#125;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> request.getRemoteUser();<br>        <span class="hljs-keyword">if</span> (user != <span class="hljs-literal">null</span>) &#123;<br>            msg.append(<span class="hljs-string">&quot;, user=&quot;</span>).append(user);<br>        &#125;<br><br>        <span class="hljs-type">HttpHeaders</span> <span class="hljs-variable">headers</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletServerHttpRequest</span>(request).getHeaders();<br>        msg.append(<span class="hljs-string">&quot;, headers=&quot;</span>).append(headers);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> getMessagePayload(request);<br>        <span class="hljs-keyword">if</span> (payload != <span class="hljs-literal">null</span>) &#123;<br>            msg.append(<span class="hljs-string">&quot;, payload=&quot;</span>).append(payload);<br>        &#125;<br><br>        msg.append(suffix);<br>        <span class="hljs-keyword">return</span> msg.toString();<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> String <span class="hljs-title function_">getMessagePayload</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>        <span class="hljs-type">ContentCachingRequestWrapper</span> <span class="hljs-variable">wrapper</span> <span class="hljs-operator">=</span><br>                WebUtils.getNativeRequest(request, ContentCachingRequestWrapper.class);<br>        <span class="hljs-keyword">if</span> (wrapper != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">byte</span>[] buf = wrapper.getContentAsByteArray();<br>            <span class="hljs-keyword">if</span> (buf.length &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> Math.min(buf.length, DEFAULT_MAX_PAYLOAD_LENGTH);<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buf, <span class="hljs-number">0</span>, length, wrapper.getCharacterEncoding());<br>                &#125; <span class="hljs-keyword">catch</span> (UnsupportedEncodingException ex) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;[unknown]&quot;</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后再配置logback</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.example.springboothttptrace.RestBodyAdvice&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;debug&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置一下，输出的日志为</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-number">2022</span><span class="hljs-number">-02</span><span class="hljs-number">-21</span> <span class="hljs-number">10</span><span class="hljs-punctuation">:</span><span class="hljs-number">19</span><span class="hljs-punctuation">:</span><span class="hljs-number">29</span><span class="hljs-punctuation">,</span><span class="hljs-number">880</span> DEBUG <span class="hljs-punctuation">[</span>http-nio<span class="hljs-number">-8080</span>-exec<span class="hljs-number">-3</span><span class="hljs-punctuation">]</span> c.e.s.RestBodyAdvice.RestBodyAdvice#beforeBodyWrite<span class="hljs-punctuation">[</span>RestBodyAdvice.java<span class="hljs-punctuation">:</span><span class="hljs-number">64</span><span class="hljs-punctuation">]</span> <br>Request <span class="hljs-punctuation">[</span>POST /save<span class="hljs-punctuation">,</span> client=<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-punctuation">,</span> headers=<span class="hljs-punctuation">[</span>content-length<span class="hljs-punctuation">:</span><span class="hljs-string">&quot;14&quot;</span><span class="hljs-punctuation">,</span> host<span class="hljs-punctuation">:</span><span class="hljs-string">&quot;localhost:8080&quot;</span><span class="hljs-punctuation">,</span> connection<span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Keep-Alive&quot;</span><span class="hljs-punctuation">,</span> user-agent<span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Apache-HttpClient/4.5.13 (Java/11.0.12)&quot;</span><span class="hljs-punctuation">,</span> accept-encoding<span class="hljs-punctuation">:</span><span class="hljs-string">&quot;gzip,deflate&quot;</span><span class="hljs-punctuation">,</span> Content-Type<span class="hljs-punctuation">:</span><span class="hljs-string">&quot;application/x-www-form-urlencoded;charset=UTF-8&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> payload=a=%E4%BD%A0%E5%A5%BD%E4%B8%<span class="hljs-number">96</span>%E7%<span class="hljs-number">95</span>%<span class="hljs-number">8</span>C<span class="hljs-punctuation">]</span><br><span class="hljs-number">2022</span><span class="hljs-number">-02</span><span class="hljs-number">-21</span> <span class="hljs-number">10</span><span class="hljs-punctuation">:</span><span class="hljs-number">19</span><span class="hljs-punctuation">:</span><span class="hljs-number">29</span><span class="hljs-punctuation">,</span><span class="hljs-number">880</span> DEBUG <span class="hljs-punctuation">[</span>http-nio<span class="hljs-number">-8080</span>-exec<span class="hljs-number">-3</span><span class="hljs-punctuation">]</span> c.e.s.RestBodyAdvice.RestBodyAdvice#beforeBodyWrite<span class="hljs-punctuation">[</span>RestBodyAdvice.java<span class="hljs-punctuation">:</span><span class="hljs-number">66</span><span class="hljs-punctuation">]</span> <br>Response Body <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;你好世界&quot;</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>至此，http的请求记录就全部记录到了，payload中为请求体，请求体和返回内容。自己可以按需使用，开发过程中建议打印全部日志，方便调试，上线后，可以不打印。去掉也很方便，直接在logback配置中配置一下就可以了。</p><h2 id="封面"><a href="#封面" class="headerlink" title="封面"></a>封面</h2><p><img src="https://tvax2.sinaimg.cn/large/005NNTS5ly1gzkx54or65j32yo1o01ky.jpg" alt="坐在树上的美女宋仁何 绿色裙子 美腿 护眼森系"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springboot</tag>
      
      <tag>httptrace</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码如诗</title>
    <link href="/2022/01/26/gossip-06/"/>
    <url>/2022/01/26/gossip-06/</url>
    
    <content type="html"><![CDATA[<p>代码如诗，只有懂，才能了解，进而才能欣赏。没事的时候读了读Java编程思想这本书，想起自己以前对编程思想这东西不怎么在乎，狂妄且傲慢的认为只需要实现功能就可以了，但不得不说，确实能实现功能，但如果你一直是这种心态，你写不出什么多大的项目，或者说，没有办法养成架构的思想。只能解决解决边角料问题，当然，解决边角料问题，也是有工资的，也是能吃饭的，但就感觉差了那么一点点。</p><p>阅读代码是一个好习惯，怎么写出好文章，多读书嘛，代码也是这个道理嘛，多看，多想嘛，看看优秀框架如何保证代码自由的情况下尽可能的方便使用，同时又兼顾着代码规范。</p><p>阅读文档同阅读代码，是一个非常好的编码习惯。很多人就是不看文档，尤大的经典言论，就是不看文档，很多功能，或者完成需求的方式文档里面是有介绍的，阅读文档和代码实际上是一种代码储备。</p><p>越接触底层，能解决的问题就越多。大道至简。在享受springboot带来的便利时，一个多数据源的需求实现起来却变的十分麻烦了起来，而原始的JDBC，压根就不需要多数据源这个概念，JDBC中一个DataSource就是一个数据源，我也并不是提倡使用原始的东西，因为效率确实比较低，我需要了解这个概念，多数据源，本质上就是创建多个DataSource。再说回spring，概念在提一嘴，实现了AOP的一个轻量化Bean容器。AOP就是各种框架的灵魂，AOP依靠的是什么？反射。好了，通过注解来使用多数据源的代码雏形以及在脑海里了，利用AOP的前置在方法执行前，替换DataSource，本质就是这样，具体实现仍然需要考虑很多细节，只是举一个例子，不做深究。</p><p>在聊数据源，运行时对数据源进行变动这个需求，我们应该如何完成。在不重启项目的情况下，增删或者修改数据源。我也是出于新奇，以前没了解过，数据源还能这么玩，感觉就贼好用了且强大了，虽然实际中可能用到的机会不多，但这东西怎么说呢，虽说买菜用不上微积分，但是吧，我会微积分买菜是不是可以比别人硬气一点，😂😂😂</p><p>只是简单聊一聊，在为后续的博客写下一个伏笔，多数据源以及动态增删改数据源。工作中用的技术都过于底层（落后）反而帮助了我了解了很多以前没有想过的东西，说Java的网络编程，了解的人不多，可如果说Web编程，啊，那这我会，殊不知基于Servlet的Http协议只是Java网络编程的一个子分支，说白了就是一种特殊的且被大家遵守的一个Socket通信协议。</p><p>Unix系统中有一个理念，万物皆文件，你对此概念理解有几分。我是学Java入门的，面向对象的Java帮我们做了很多的事，经典的就是把万物皆文件，变成了万物皆对象。请想一想这是何等壮举。</p><h2 id="封面"><a href="#封面" class="headerlink" title="封面"></a>封面</h2><p><img src="https://tvax3.sinaimg.cn/large/005NNTS5ly1gyrfsbigf3j32yo1o0kjl.jpg" alt="西域美女"></p>]]></content>
    
    
    <categories>
      
      <category>碎碎念</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>请求第三方接口的各种姿势</title>
    <link href="/2022/01/16/java-08/"/>
    <url>/2022/01/16/java-08/</url>
    
    <content type="html"><![CDATA[<p>最近写了一些请求第三方接口的需求，基于http协议的接口，实际上写起来并不麻烦，因为就三个核心要素，地址，请求方式，请求内容。地址他们给的是什么地址就是什么地址，没有变数，请求方式是写死的，复杂且容易出错的地方就是请求内容，不同的请求方式又有不同的传参方式。请求内容是JSON数据还是表单数据，等等，有时因为提供接口的开发者描述不准确，这个时候我们怎么办呢，很简单的一个一个试，基本上只需要试两到三下就能解决问题。你问人是表单数据还是JSON数据可能他们自己也说不清楚，因为这个表单数据的数据格式我也不知道官方的叫法是什么，表单数据，是我自己的理解，意义可能就是为了区分不是JSON数据，有这个问的时间，你已经试出来了。因为就这三种数据，还有一种数据是上传的文件数据，除去文件数据就两种数据。get请求只能发送表单数据，post能发送表单数据，也能发送json数据，一般post用的多。所以记住这两种传参方式就可以了。</p><p>实际操作中使用了hutool这个工具类，当然你也可以用大家更为熟知一点的okhttp这个http工具，萝卜青菜都能写，只不过我感觉hutool提供的工具代码比较简洁也便于理解。</p><p>依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">implementation(<span class="hljs-string">&#x27;cn.hutool:hutool-all:5.7.19&#x27;</span>)<br></code></pre></td></tr></table></figure><p>实际操作代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">// 发起get请求，并获取返回内容</span><br><span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> HttpRequest.get(<span class="hljs-string">&quot;url&quot;</span>) <span class="hljs-comment">// 请求方式，以及url</span><br>        .form(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;小红&quot;</span>)<span class="hljs-comment">// 参数，重复调用即可</span><br>        .form(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-string">&quot;24&quot;</span>)<br>        .execute().body();<span class="hljs-comment">// 获取body内容</span><br><br><span class="hljs-comment">// 发起post请求发送表单数据，并获取返回数据</span><br><span class="hljs-type">String</span> <span class="hljs-variable">body1</span> <span class="hljs-operator">=</span> HttpRequest.post(<span class="hljs-string">&quot;utl&quot;</span>) <span class="hljs-comment">// post请求</span><br>        .form(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;小红&quot;</span>)<br>        .form(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-string">&quot;24&quot;</span>)<br>        .execute().body();<br><br><span class="hljs-comment">// 发送post请求并发送JSON数据，并获取返回信息</span><br><span class="hljs-type">String</span> <span class="hljs-variable">body2</span> <span class="hljs-operator">=</span> HttpRequest.post(<span class="hljs-string">&quot;url&quot;</span>)<br>        .body(JSONUtil<br>                .createObj()<br>                .set(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;小红&quot;</span>)<br>                .set(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-string">&quot;24&quot;</span>)<br>                .toString())<br>        .execute().body();<br><br></code></pre></td></tr></table></figure><p>如果确认传递的参数没有问题，一个一个试基本就能解决问题。如果还有特殊的需求，阅读源码，建议直接看源码，注释都是中文的，使用起来基本没有任何障碍。<a href="https://www.hutool.cn/docs/#/http/Http%E8%AF%B7%E6%B1%82-HttpRequest">官网文档地址</a></p><h2 id="封面"><a href="#封面" class="headerlink" title="封面"></a>封面</h2><p><img src="https://tva2.sinaimg.cn/large/005NNTS5ly1gyfnlrsvuyj32yo1o0kjl.jpg" alt="海琴烟 同人"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>http</tag>
      
      <tag>hu-tool</tag>
      
      <tag>api</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于Java程序的日志处理</title>
    <link href="/2022/01/05/java-07/"/>
    <url>/2022/01/05/java-07/</url>
    
    <content type="html"><![CDATA[<p>日志记录这块，简单的控制台打印也是日志，输出log文件也是日志，跨服务器输出日志，也是日志。这还没说复杂的日志监控，日志监控，需要对代码打印日志的标准有要求。这个就比较复杂了，</p><p>首先我们要知道，日志是有级别的，log4j,我记得好像有7个级别，slf4j，有五个级别。首先我们得知道log4j和slf4j是什么东西，为啥把这两个放在一起说。题外话说一下命名，这个4j应该不少人有疑问，因为这东西不符合Java的驼峰命名规则啊，为啥要起这个名呢，好吧，其实就是For Java的音译加缩写。据说是传统，比如什么dom4j等等。这个级别是用来控制日志输出内容的，你设置的级别越高，打印的日志就越少，你配置级别最低，则打印全部级别的日志。准确来说是包含关系，就像一个金字塔结构一样。</p><p>还有Log4j和Slf4j这两个并不负责输出日志，准确的说这两个是Java日志的门面，又或者是标准，门面是什么意思，就是服务员，你去吃饭，只需要和服务员说，我要一碗蛋炒饭。至于服务员去找哪个厨师帮你做，你不用管，这两个东西也是一样，你和slf4j说，我要打印日志，slf4j得去找实现给你打印日志，但是只有slf4j是没有办法给你打印日志的。这个时候你就需要去找一个厨师，就是实现。logback是直接实现了slf4j的一个日志实现。好了。应该说明白了。</p><p>实际上<a href="https://logback.qos.ch/">logback官网</a>上是有十分详细的介绍，尬就尬在，是英文文档。</p><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p>普通的Java项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">implementation <span class="hljs-string">&#x27;ch.qos.logback:logback-classic:1.2.10&#x27;</span><br>implementation <span class="hljs-string">&#x27;ch.qos.logback:logback-core:1.2.10&#x27;</span><br>implementation <span class="hljs-string">&#x27;org.slf4j:slf4j-api:1.7.32&#x27;</span><br></code></pre></td></tr></table></figure><p>springboot中无需此依赖，默认的日志就是lagback。</p><h2 id="配置文件介绍"><a href="#配置文件介绍" class="headerlink" title="配置文件介绍"></a>配置文件介绍</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    configuration节点有三个属性</span><br><span class="hljs-comment">    scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true</span><br><span class="hljs-comment">    scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位默认单位是毫秒，当scan为true时此属性生效，默认时间间隔为1分钟</span><br><span class="hljs-comment">    de<span class="hljs-doctag">bug:</span>当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态，默认值为false</span><br><span class="hljs-comment"> --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span> <span class="hljs-attr">scan</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">scanPeriod</span>=<span class="hljs-string">&quot;2 seconds&quot;</span> <span class="hljs-attr">debug</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">        设置上下文名称，每个&lt;logger&gt;都关联到&lt;logger&gt;上下文，默认上下文名称为default,但可以使用设置成其他名字，用于区分不同应用程序的记录,一旦设置，不能修改,可以通过 %contextName 来打印日志上下文名称，一般来说我们不用这个属性，可有可无。</span><br><span class="hljs-comment">     --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">contextName</span>&gt;</span>demo<span class="hljs-tag">&lt;/<span class="hljs-name">contextName</span>&gt;</span><br>    <br><br>    <span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">        用来定义变量的节点，定义变量后，可以使$&#123;&#125;来使用变量,两个属性</span><br><span class="hljs-comment">        这个属性只有在springboot环境中使用才可以，且配置文件名要为logback-spring.xml才可正常使用。</span><br><span class="hljs-comment">        name: 和下文中的name一样</span><br><span class="hljs-comment">        scope：一般就填context就行了，具体配置可查看官网</span><br><span class="hljs-comment">        source: 读取application.yml或application.properties文件中的配置，</span><br><span class="hljs-comment">     --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">springProperty</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;context&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;app_name&quot;</span> <span class="hljs-attr">source</span>=<span class="hljs-string">&quot;logging.file.name&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">        用来定义变量的节点，定义变量后，可以使$&#123;&#125;来使用变量,两个属性,当定义了多个&lt;appender&gt;的时候还是很有用的：</span><br><span class="hljs-comment">        name：变量名</span><br><span class="hljs-comment">        value：变量值</span><br><span class="hljs-comment">     --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;log.dir&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;logs&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    定义滚动记录文件appender 作用:滚动记录文件,先将日志记录到指定文件,当符合某个条件时,将日志记录到其他文件</span><br><span class="hljs-comment">    RollingFileAppender class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span><br><span class="hljs-comment">        参数：</span><br><span class="hljs-comment">        &lt;append&gt;:如果是true日志被追加到文件结尾，如果是false清空现存文件,默认是true</span><br><span class="hljs-comment">        &lt;fileNamePattern&gt;:被写入的文件名，可以是相对目录也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值</span><br><span class="hljs-comment">        &lt;rollingPolicy&gt;:当发生滚动时，决定RollingFileAppender的行为，涉及文件移动和重命名</span><br><span class="hljs-comment">        &lt;triggeringPolicy&gt;:告知RollingFileAppender合适激活滚动</span><br><span class="hljs-comment">        &lt;prudent&gt;:当为true时不支持FixedWindowRollingPolicy支持TimeBasedRollingPolicy，但是有两个限制:1不支持也不允许文件压缩,2不能设置file属性必须留空</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fileAppender&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 如果是true,日志被追加到文件结尾，如果是false,清空现存文件.默认是true --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">append</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">append</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">prudent</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">prudent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 每天滚动一次的日志 只保留30天内的日志文件 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>logs/%d&#123;yyyy-MM-dd&#125;/info%i.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>10MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 对日志进行格式化 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%date %level [%thread] %logger&#123;10&#125;.%class&#123;0&#125;#%method[%file:%line] %n%msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;errorAppender&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">prudent</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">prudent</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则</span><br><span class="hljs-comment">            如果同时有&lt;File&gt;和&lt;FileNamePattern&gt;，那么当天日志是&lt;File&gt;，明天会自动把今天</span><br><span class="hljs-comment">            的日志改名为今天的日期。即，&lt;File&gt; 的日志都是当天的。</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">File</span>&gt;</span>logs/error.log<span class="hljs-tag">&lt;/<span class="hljs-name">File</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">append</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">append</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">            当为true时不支持FixedWindowRollingPolicy支持TimeBasedRollingPolicy，但是有两个限制:1不支持也不允许文件压缩,2不能设置file属性必须留空</span><br><span class="hljs-comment">         --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">prudent</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">prudent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>logs/%d&#123;yyyy-MM-dd&#125;/error%i.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>10MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%date %level [%thread] %logger&#123;10&#125;.%class&#123;0&#125;#%method[%file:%line] %n%msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">             配置日志级别过滤器 作用:根据日志级别进行过滤，如果日志级别等于配置级别过滤器会根据onMath和onMismatch接收或拒绝日志</span><br><span class="hljs-comment">             参数:</span><br><span class="hljs-comment">             &lt;level&gt;:设置过滤级别</span><br><span class="hljs-comment">             &lt;onMatch&gt;:用于配置符合过滤条件的操作</span><br><span class="hljs-comment">             &lt;onMismatch&gt;:用于配置不符合过滤条件的操作</span><br><span class="hljs-comment">                                       此处配置为只接收ERROR日志级别信息</span><br><span class="hljs-comment">         --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>ERROR<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 定义控制台appender 作用:把日志输出到控制台 class=&quot;ch.qos.logback.core.ConsoleAppender&quot; --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;console&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">layout</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.PatternLayout&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%date %level [%thread] %logger&#123;10&#125;.%class&#123;0&#125;#%method[%file:%line] %n%msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">       logger用来设置某一个包的日志打印级别</span><br><span class="hljs-comment">       &lt;loger&gt; 仅有一个name属性,一个可选的level和一个可选的addtivity属性</span><br><span class="hljs-comment">               name:用来指定受此loger约束的某一个包或者具体的某一个类</span><br><span class="hljs-comment">               level:用来设置打印级别,大小写无关:TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF</span><br><span class="hljs-comment">               addtivity:是否向上级loger传递打印信息。默认是true,会将信息输入到root配置指定的地方,可以包含多个appender-ref，标识这个appender会添加到这个logger</span><br><span class="hljs-comment">   --&gt;</span><br>    <span class="hljs-comment">&lt;!--    &lt;logger name=&quot;com.xcbeyond.springboot&quot; level=&quot;debug&quot;/&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!-- 将root的打印级别设置为&quot;error&quot;,指定了名字为&quot;console&quot;,&quot;fileAppender&quot;,&quot;errorAppender&quot;的appender --&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">        springProfile标签用来处理开发环境和生产环境的不同配置</span><br><span class="hljs-comment">        name: 读取spring.profiles.active的值</span><br><span class="hljs-comment">        profile即根据不同的环境使用不同的日志策略，这里举例开发和生产环境：</span><br><span class="hljs-comment">     --&gt;</span><br><br>     <span class="hljs-comment">&lt;!-- 开发环境输出到控制台 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">springProfile</span>  <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dev&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">springProfile</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 生产环境输出到文件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">springProfile</span>  <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prod&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;INFO&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;FILE_LOG&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">springProfile</span>&gt;</span>   <br><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;debug&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;console&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;fileAppender&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;errorAppender&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>应该是介绍的比较详细了，因为这东西平时很少有人去专门去记一下，我也是弄好一套，然后CV一下就可以了，<strong>注意上面的配置只是用来演示的，并不能直接CV下来用。下面我配置几种常用的配置，可以直接CV下来用的。</strong></p><h2 id="全部日志一个文件"><a href="#全部日志一个文件" class="headerlink" title="全部日志一个文件"></a>全部日志一个文件</h2><div class="note note-info">            <p>控制台打印日志，并输出日志文件。</p>          </div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">        输出日志到控制台</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;soutAppender&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">layout</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.PatternLayout&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%date %level [%thread] %logger&#123;10&#125;.%class&#123;0&#125;#%method[%file:%line] %n%msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">        输出日志到文件</span><br><span class="hljs-comment">     --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fileAppender&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">append</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">append</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">prudent</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">prudent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">File</span>&gt;</span>logs/log.log<span class="hljs-tag">&lt;/<span class="hljs-name">File</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>logs/%d&#123;yyyy-MM-dd&#125;/log%i.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 单个日志文件最大体积 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>10MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 对日志进行格式化 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%date %level [%thread] %logger&#123;10&#125;.%class&#123;0&#125;#%method[%file:%line] %n%msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;all&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;soutAppender&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;fileAppender&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="不同级别不同文件"><a href="#不同级别不同文件" class="headerlink" title="不同级别不同文件"></a>不同级别不同文件</h2><div class="note note-info">            <p>控制台打印太基础我就不说了，加强主要针对log文件，这个配置我们按日志级别输出对应级别的日志。方便我们定位和查找。一般来说，我们只需要info和error级别的日志即可。</p>          </div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">        输出日志到控制台</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;soutAppender&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">layout</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.PatternLayout&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%date %level [%thread] %logger&#123;10&#125;.%class&#123;0&#125;#%method[%file:%line] %n%msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">        输出日志到文件</span><br><span class="hljs-comment">     --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;infoAppender&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 如果是true,日志被追加到文件结尾，如果是false,清空现存文件.默认是true --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">append</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">append</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">prudent</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">prudent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">File</span>&gt;</span>logs/info.log<span class="hljs-tag">&lt;/<span class="hljs-name">File</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>logs/%d&#123;yyyy-MM-dd&#125;/info%i.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 单个日志文件最大体积 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>10MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 对日志进行格式化 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%date %level [%thread] %logger&#123;10&#125;.%class&#123;0&#125;#%method[%file:%line] %n%msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 两个过滤器过滤warn和error基本的日志 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--过滤 WARN--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>WARN<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--匹配到就禁止--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--没有匹配到就允许--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--过滤 Error--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>ERROR<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--匹配到就禁止--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--没有匹配到就允许--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;errorAppender&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 如果是true,日志被追加到文件结尾，如果是false,清空现存文件.默认是true --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">append</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">append</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">prudent</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">prudent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">File</span>&gt;</span>logs/error.log<span class="hljs-tag">&lt;/<span class="hljs-name">File</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>logs/%d&#123;yyyy-MM-dd&#125;/error%i.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 单个日志文件最大体积 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>10MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 对日志进行格式化 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%date %level [%thread] %logger&#123;10&#125;.%class&#123;0&#125;#%method[%file:%line] %n%msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">            过滤日志，只包含warn以及warn以上级别的日志也就是error的日志</span><br><span class="hljs-comment">         --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>WARN<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;all&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;soutAppender&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;infoAppender&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;errorAppender&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>最终结果是会输出两个日志文件，<code>info.log</code>和<code>error.log</code>, info包括info级别以及以下级别的日志，<code>error.log</code>包括<code>warn</code>和<code>error</code>两个级别的日志。</p><h2 id="不同包不同日志文件"><a href="#不同包不同日志文件" class="headerlink" title="不同包不同日志文件"></a>不同包不同日志文件</h2><p>我们一般的系统基本都有几层架构，有controller层，以及service层，logback可以根据不同的包来输出日志，也可以精确到具体的某一个类名。主要使用<code>logger</code>这个标签来完成。<strong>这个没有办法CV，因为不同的项目包名不一样，根据自己的项目需要修改一下</strong>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        输出日志到控制台</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;soutAppender&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">layout</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.PatternLayout&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%date %level [%thread] %logger&#123;10&#125;.%class&#123;0&#125;#%method[%file:%line] %n%msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        输出日志到文件</span><br><span class="hljs-comment">     --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;infoAppender&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 如果是true,日志被追加到文件结尾，如果是false,清空现存文件.默认是true --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">append</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">append</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">prudent</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">prudent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">File</span>&gt;</span>logs/info.log<span class="hljs-tag">&lt;/<span class="hljs-name">File</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>logs/%d&#123;yyyy-MM-dd&#125;/info%i.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 单个日志文件最大体积 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>10MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 对日志进行格式化 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%date %level [%thread] %logger&#123;10&#125;.%class&#123;0&#125;#%method[%file:%line] %n%msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--过滤 WARN--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>WARN<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--匹配到就禁止--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--没有匹配到就允许--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--过滤 Error--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>ERROR<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--匹配到就禁止--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--没有匹配到就允许--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;errorAppender&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 如果是true,日志被追加到文件结尾，如果是false,清空现存文件.默认是true --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">append</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">append</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">prudent</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">prudent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">File</span>&gt;</span>logs/error.log<span class="hljs-tag">&lt;/<span class="hljs-name">File</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>logs/%d&#123;yyyy-MM-dd&#125;/error%i.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 单个日志文件最大体积 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>10MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 对日志进行格式化 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%date %level [%thread] %logger&#123;10&#125;.%class&#123;0&#125;#%method[%file:%line] %n%msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>WARN<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;wlfAppender&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 如果是true,日志被追加到文件结尾，如果是false,清空现存文件.默认是true --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">append</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">append</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">prudent</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">prudent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">File</span>&gt;</span>logs/wlf/wlf.log<span class="hljs-tag">&lt;/<span class="hljs-name">File</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>logs/wlf/%d&#123;yyyy-MM-dd&#125;/wlf%i.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 单个日志文件最大体积 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>10MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 对日志进行格式化 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%date %level [%thread] %logger&#123;10&#125;.%class&#123;0&#125;#%method[%file:%line] %n%msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">        这个配置表示把com.wlf包下的日志以wlfAppender的配置进行打印日志</span><br><span class="hljs-comment">        level： 代表日志级别，不配置默认为all</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.wlf&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;debug&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;wlfAppender&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;all&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;soutAppender&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;infoAppender&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;errorAppender&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这个不怎么常用，只需要知道就行了，一般只使用第二个配置就行了，直接CV就行。至于和springboot中使用，可以整，但是没啥必要。具体的配置还是多看看介绍，多多学习。或者直接CV。😁😁</p><h2 id="尾"><a href="#尾" class="headerlink" title="尾"></a>尾</h2><p>主要内容到这里就介绍完了，logback的配置十分的灵活，但想要灵活的使用，还是需要多多的了解。当然打印日志归打印日志，如果你写代码打日志时不按照标准输出，再牛逼的配置也救不了。打印日志也需要规范一点。开发使用debug，需要留存的日志信息用info，异常信息用error。</p><h2 id="封面"><a href="#封面" class="headerlink" title="封面"></a>封面</h2><p><img src="https://tva1.sinaimg.cn/large/005NNTS5ly1gy6gxzioj4j32yo1o0gv3.jpg" alt="2022新年快乐"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>log</tag>
      
      <tag>logback</tag>
      
      <tag>slf4j</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据校验二三事</title>
    <link href="/2021/12/25/java-06/"/>
    <url>/2021/12/25/java-06/</url>
    
    <content type="html"><![CDATA[<p>做开发的应该都写过类似的校验方法，最简单的判断null，复杂一点的字符串正则校验。单纯从逻辑上说这类代码不复杂，但是有没有一种可能假如需要一次性判断多个，再加上判断失败后的处理逻辑，还有可能需要一些特殊处理，比如正则校验，等等，三个一下，写写也还行，五个以上，如果代码按行收费的话，那能够狠狠的赚了一笔。</p><p>大家脑海里的代码可能是这样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SysController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;by_id&quot;)</span><br>    Object <span class="hljs-title function_">getById</span><span class="hljs-params">(String id)</span>&#123;<br>        <span class="hljs-keyword">if</span> (id == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">//·····</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;msg: id为null&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (id.length() &gt; <span class="hljs-number">10</span>)&#123;<br>            <span class="hljs-comment">// ····</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;id,长度过长&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这只是一个，实际开发中有些录入非常复杂的表单数据时可能有三四十个，上面我写的处理逻辑也不复杂，真实中可能有些需要使用异常提示，有些需要直接return返回信息，等等，复杂且难以维护。难以维护，到并不是不能维护，钱给的够多，维护，也还是能维护的，当然这个杠不能这样抬。🤣😂😂😂</p><p>介绍一个工具，应该说是一套工具，基于注解和反射。</p><p>看到这两个词，性能有所损耗是很正常的，比如我们开发全员Map，其实代码的运行速度来说，不慢，但是总所周知HASH(哈希)表是一种非常耗内存的数据结构，所以代码在本地跑的时候时不时的omm异常一下也是合符情理的一件事。😁😁，现在这硬件发展的环境，应该不缺内存这东西。</p><h3 id="validation是什么"><a href="#validation是什么" class="headerlink" title="validation是什么"></a>validation是什么</h3><p>框架名字叫javax.validation，它提供了一系列的注解来进行对JavaBean的参数校验。通常用来处理Controller里面方法的参数的校验。就是暴露出去的API，内部的方法也可以用，但没必要，暴露出去的接口获取的数据是不可控的，所以才需要校验，内部的数据是可控的，当然内部方法可控的前提是源头的数据是可控的。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>springboot中有些博客中写的是这个依赖默认包含在starter-web中了，不清楚从哪个版本开始就不包含在其中了，就说现在的环境是springboot2.5.x系列的，validation默认已经不包含在starter-web中了，需要单独引入这个依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Controller参数校验--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在其他项目中可以引入这个依赖，并自己调整版本即可使用。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.hibernate.validator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hibernate-validator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.0.2.Final<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="注解说明"><a href="#注解说明" class="headerlink" title="注解说明"></a>注解说明</h3><table><thead><tr><th>验证注解</th><th>验证的数据类型</th><th>说明</th></tr></thead><tbody><tr><td>@AssertFalse</td><td>Boolean,boolean</td><td>验证注解的元素值是false</td></tr><tr><td>@AssertTrue</td><td>Boolean,boolean</td><td>验证注解的元素值是true</td></tr><tr><td>@NotNull</td><td>任意类型</td><td>验证注解的元素值不是null</td></tr><tr><td>@Null</td><td>任意类型</td><td>验证注解的元素值是null</td></tr><tr><td>@Min(value&#x3D;值)</td><td>BigDecimal，BigInteger, byte,short, int, long，等任何Number或CharSequence（存储的是数字）子类型</td><td>验证注解的元素值大于等于@Min指定的value值</td></tr><tr><td>@Max（value&#x3D;值）</td><td>和@Min要求一样</td><td>验证注解的元素值小于等于@Max指定的value值</td></tr><tr><td>@DecimalMin(value&#x3D;值)</td><td>和@Min要求一样</td><td>验证注解的元素值大于等于@ DecimalMin指定的value值</td></tr><tr><td>@DecimalMax(value&#x3D;值)</td><td>和@Min要求一样</td><td>验证注解的元素值小于等于@ DecimalMax指定的value值</td></tr><tr><td>@Digits(integer&#x3D;整数位数, fraction&#x3D;小数位数)</td><td>和@Min要求一样</td><td>验证注解的元素值的整数位数和小数位数上限</td></tr><tr><td>@Size(min&#x3D;下限, max&#x3D;上限)</td><td>字符串、Collection、Map、数组等</td><td>验证注解的元素值的在min和max（包含）指定区间之内，如字符长度、集合大小</td></tr><tr><td>@Past</td><td>java.util.Date,java.util.Calendar;Joda Time类库的日期类型</td><td>验证注解的元素值（日期类型）比当前时间早</td></tr><tr><td>@Future</td><td>与@Past要求一样</td><td>验证注解的元素值（日期类型）比当前时间晚</td></tr><tr><td>@NotBlank</td><td>CharSequence子类型</td><td>验证注解的元素值不为空（不为null、去除首位空格后长度为0），不同于@NotEmpty，@NotBlank只应用于字符串且在比较时会去除字符串的首位空格</td></tr><tr><td>@Length(min&#x3D;下限, max&#x3D;上限)</td><td>CharSequence子类型</td><td>验证注解的元素值长度在min和max区间内</td></tr><tr><td>@NotEmpty</td><td>CharSequence子类型、Collection、Map、数组</td><td>验证注解的元素值不为null且不为空（字符串长度不为0、集合大小不为0）</td></tr><tr><td>@Range(min&#x3D;最小值, max&#x3D;最大值)</td><td>BigDecimal,BigInteger,CharSequence, byte, short, int, long等原子类型和包装类型</td><td>验证注解的元素值在最小值和最大值之间</td></tr><tr><td>@Email(regexp&#x3D;正则表达式,flag&#x3D;标志的模式)</td><td>CharSequence子类型（如String）</td><td>验证注解的元素值是Email，也可以通过regexp和flag指定自定义的email格式</td></tr><tr><td>@Pattern(regexp&#x3D;正则表达式,flag&#x3D;标志的模式)</td><td>String，任何CharSequence的子类型</td><td>验证注解的元素值与指定的正则表达式匹配</td></tr><tr><td>@Valid</td><td>任何非原子类型</td><td>指定递归验证关联的对象如用户对象中有个地址对象属性，如果想在验证用户对象时一起验证地址对象的话，在地址对象上加@Valid注解即可级联验证</td></tr></tbody></table><p>这里只列出Hibernate Validator提供的大部分验证约束注解，如需了解更多请参考hibernate validator官方文档了解其他验证约束注解和进行自定义的验证约束注解定义。这块内容基本就是翻译文档，没啥好说的。</p><h3 id="实际使用"><a href="#实际使用" class="headerlink" title="实际使用"></a>实际使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 接口是引用类型，可以使用这种方式进行参数校验。</span><br>    <span class="hljs-meta">@PostMapping(&quot;/save/valid&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">save</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> <span class="hljs-meta">@Validated</span> UserDTO userDTO)</span> &#123;<br>        userService.save(userDTO);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;成功&quot;</span>;<br>    &#125;<br><br><span class="hljs-comment">// 如果接口接收参数是这种原子类型，需要在这个方法所在类上 `@Validated` 注解</span><br>    <span class="hljs-meta">@GetMapping(&quot;/get/id&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">save</span><span class="hljs-params">(<span class="hljs-meta">@NotBlank</span> String id)</span> &#123;<br>        userService.save(userDTO);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;成功&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>DTO 上的注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDTO</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-comment">/*** 用户ID*/</span><br>    <span class="hljs-meta">@NotNull(message = &quot;用户id不能为空&quot;)</span><br>    <span class="hljs-keyword">private</span> Long userId;<br>    <br>    <span class="hljs-comment">/** 用户名*/</span><br>    <span class="hljs-meta">@NotBlank(message = &quot;用户名不能为空&quot;)</span><br>    <span class="hljs-meta">@Length(max = 20, message = &quot;用户名不能超过20个字符&quot;)</span><br>    <span class="hljs-meta">@Pattern(regexp = &quot;^[\\u4E00-\\u9FA5A-Za-z0-9\\*]*$&quot;, message = &quot;用户昵称限制：最多20字符，包含文字、字母和数字&quot;)</span><br>    <span class="hljs-keyword">private</span> String username;<br>    <br>    <span class="hljs-comment">/** 手机号*/</span><br>    <span class="hljs-meta">@NotBlank(message = &quot;手机号不能为空&quot;)</span><br>    <span class="hljs-meta">@Pattern(regexp = &quot;^[1][3,4,5,6,7,8,9][0-9]&#123;9&#125;$&quot;, message = &quot;手机号格式有误&quot;)</span><br>    <span class="hljs-keyword">private</span> String mobile;<br><br>    <span class="hljs-comment">/**性别*/</span><br>    <span class="hljs-keyword">private</span> String sex;<br><br>    <span class="hljs-comment">/** 邮箱*/</span><br>    <span class="hljs-meta">@NotBlank(message = &quot;联系邮箱不能为空&quot;)</span><br>    <span class="hljs-meta">@Email(message = &quot;邮箱格式不对&quot;)</span><br>    <span class="hljs-keyword">private</span> String email;<br><br>    <span class="hljs-comment">/** 密码*/</span><br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-comment">/*** 创建时间 */</span><br>    <span class="hljs-meta">@Future(message = &quot;时间必须是将来时间&quot;)</span><br>    <span class="hljs-keyword">private</span> Date createTime;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="全局异常处理"><a href="#全局异常处理" class="headerlink" title="全局异常处理"></a>全局异常处理</h3><p>参数校验失败时会报异常，但是把异常直接显示给用户是非常不友好的，于是需要全局处理一下异常。</p><p>默认异常信息</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;timestamp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2022-01-01T04:41:23.164+00:00&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">500</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;error&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Internal Server Error&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/by_id&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>全局异常拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@RestControllerAdvice</span><span class="hljs-comment">// 全局异常拦截并返回JSON数据</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalExceptionHandler</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    这个拦截异常，异常的接口级别越高就越要放在下面写，</span><br><span class="hljs-comment">    因为这个拦截异常是匹配链的方式，如果匹配到了就不往下匹配了，</span><br><span class="hljs-comment">    如果你第一个就写最高级别的异常，那么下面的异常匹配就匹配不到。</span><br><span class="hljs-comment">    */</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(getClass());<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">DUPLICATE_KEY_CODE</span> <span class="hljs-operator">=</span> <span class="hljs-number">1001</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">PARAM_FAIL_CODE</span> <span class="hljs-operator">=</span> <span class="hljs-number">1002</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">VALIDATION_CODE</span> <span class="hljs-operator">=</span> <span class="hljs-number">1003</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 处理自定义异常</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ExceptionHandler(BizException.class)</span><span class="hljs-comment">// 注解里面写需要拦截的异常即可</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">handleRRException</span><span class="hljs-params">(BizException e)</span> &#123;<br>        logger.error(e.getMessage(), e);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-comment">// 自己决定返回什么类型的数据</span><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 方法参数校验</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ExceptionHandler(MethodArgumentNotValidException.class)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">handleMethodArgumentNotValidException</span><span class="hljs-params">(MethodArgumentNotValidException e)</span> &#123;<br>        logger.error(e.getMessage(), e);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-comment">// 自己决定返回什么类型的数据</span><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ValidationException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ExceptionHandler(ValidationException.class)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">handleValidationException</span><span class="hljs-params">(ValidationException e)</span> &#123;<br>        logger.error(e.getMessage(), e);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-comment">// 自己决定返回什么类型的数据</span><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ConstraintViolationException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ExceptionHandler(ConstraintViolationException.class)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">handleConstraintViolationException</span><span class="hljs-params">(ConstraintViolationException e)</span> &#123;<br>        logger.error(e.getMessage(), e);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-comment">// 自己决定返回什么类型的数据</span><br>    &#125;<br><br>    <span class="hljs-meta">@ExceptionHandler(NoHandlerFoundException.class)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">handlerNoFoundException</span><span class="hljs-params">(Exception e)</span> &#123;<br>        logger.error(e.getMessage(), e);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-comment">// 自己决定返回什么类型的数据</span><br>    &#125;<br><br>    <span class="hljs-meta">@ExceptionHandler(DuplicateKeyException.class)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">handleDuplicateKeyException</span><span class="hljs-params">(DuplicateKeyException e)</span> &#123;<br>        logger.error(e.getMessage(), e);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-comment">// 自己决定返回什么类型的数据</span><br>    &#125;<br><br><br>    <span class="hljs-meta">@ExceptionHandler(Exception.class)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">handleException</span><span class="hljs-params">(Exception e)</span> &#123;<br>        logger.error(e.getMessage(), e);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-comment">// 自己决定返回什么类型的数据</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="自定义参数注解"><a href="#自定义参数注解" class="headerlink" title="自定义参数注解"></a>自定义参数注解</h3><p>如果默认的注解不够用，你还可以自定义注解，比如一个身份证号的验证</p><h4 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Target(&#123;ElementType.PARAMETER, ElementType.FIELD&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Constraint(validatedBy = IdentityCardNumberValidator.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> IdentityCardNumber &#123;<br><br>    String <span class="hljs-title function_">message</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;身份证号码不合法&quot;</span>;<br><br>    Class&lt;?&gt;[] groups() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Payload</span>&gt;[] payload() <span class="hljs-keyword">default</span> &#123;&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="自定义Validator"><a href="#自定义Validator" class="headerlink" title="自定义Validator"></a>自定义Validator</h4><p>这里才是才是真正的处理逻辑，注解类似是一个徽章，在AOP处理处理时，是一个特殊的标识。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IdentityCardNumberValidator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ConstraintValidator</span>&lt;IdentityCardNumber, Object&gt; &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initialize</span><span class="hljs-params">(IdentityCardNumber identityCardNumber)</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isValid</span><span class="hljs-params">(Object o, ConstraintValidatorContext constraintValidatorContext)</span> &#123;<br>        <span class="hljs-keyword">return</span> IdCardValidatorUtils.isValidate18Idcard(o.toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@NotBlank(message = &quot;身份证号不能为空&quot;)</span><br><span class="hljs-meta">@IdentityCardNumber(message = &quot;身份证信息有误,请核对后提交&quot;)</span><br><span class="hljs-keyword">private</span> String clientCardNo;<br></code></pre></td></tr></table></figure><h3 id="使用groups的校验"><a href="#使用groups的校验" class="headerlink" title="使用groups的校验"></a>使用groups的校验</h3><p>就是分组校验，一个实体类作为不同的接口参数校验时，可能有不同的需求。定义两个接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.validation.groups.Default;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Create</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Default</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">import</span> javax.validation.groups.Default;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Update</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Default</span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>再在需要校验的地方@Validated声明校验组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/update/groups&quot;)</span>                 <span class="hljs-comment">// 这里就是核心</span><br>   <span class="hljs-keyword">public</span> RspDTO <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> <span class="hljs-meta">@Validated(Update.class)</span> UserDTO userDTO)</span> &#123;<br>       userService.updateById(userDTO);<br>       <span class="hljs-keyword">return</span> RspDTO.success();<br>   &#125;<br></code></pre></td></tr></table></figure><p>DTO 改一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDTO</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-comment">/*** 用户ID*/</span><br>    <span class="hljs-meta">@NotNull(message = &quot;用户id不能为空&quot;, groups = Update.class)</span><br>    <span class="hljs-keyword">private</span> Long userId;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户名</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@NotBlank(message = &quot;用户名不能为空&quot;)</span><br>    <span class="hljs-meta">@Length(max = 20, message = &quot;用户名不能超过20个字符&quot;, groups = &#123;Create.class, Update.class&#125;)</span><br>    <span class="hljs-meta">@Pattern(regexp = &quot;^[\\u4E00-\\u9FA5A-Za-z0-9\\*]*$&quot;, message = &quot;用户昵称限制：最多20字符，包含文字、字母和数字&quot;)</span><br>    <span class="hljs-keyword">private</span> String username;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 手机号</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@NotBlank(message = &quot;手机号不能为空&quot;)</span><br>    <span class="hljs-meta">@Pattern(regexp = &quot;^[1][3,4,5,6,7,8,9][0-9]&#123;9&#125;$&quot;, message = &quot;手机号格式有误&quot;, groups = &#123;Create.class, Update.class&#125;)</span><br>    <span class="hljs-keyword">private</span> String mobile;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 性别</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String sex;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 邮箱</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@NotBlank(message = &quot;联系邮箱不能为空&quot;)</span><br>    <span class="hljs-meta">@Email(message = &quot;邮箱格式不对&quot;)</span><br>    <span class="hljs-keyword">private</span> String email;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 密码</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-comment">/*** 创建时间 */</span><br>    <span class="hljs-meta">@Future(message = &quot;时间必须是将来时间&quot;, groups = &#123;Create.class&#125;)</span><br>    <span class="hljs-keyword">private</span> Date createTime;<br><br>&#125;<br></code></pre></td></tr></table></figure><div class="note note-info">            <p>tips 注意:在声明分组的时候尽量加上 <code>extend javax.validation.groups.Default</code> 否则,在你声明<code>@Validated(Update.class)</code> 的时候,就会出现你在默认没添加<code>groups = {}</code>的时候的校验组<code>@Email(message = &quot;邮箱格式不对&quot;)</code>,会不去校验,因为默认的校验组是<code>groups = {Default.class}</code></p>          </div><h3 id="restful风格用法"><a href="#restful风格用法" class="headerlink" title="restful风格用法"></a>restful风格用法</h3><p>在多个参数校验,或者@RequestParam 形式时候,需要在controller上加注@Validated</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/get&quot;)</span><br><span class="hljs-keyword">public</span> RspDTO <span class="hljs-title function_">getUser</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;userId&quot;)</span> <span class="hljs-meta">@NotNull(message = &quot;用户id不能为空&quot;)</span> Long userId)</span> &#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userService.selectById(userId);<br>    <span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RspDTO</span>&lt;User&gt;().nonAbsent(<span class="hljs-string">&quot;用户不存在&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RspDTO</span>&lt;User&gt;().success(user);<br>&#125;<br></code></pre></td></tr></table></figure><p>需要加上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;user/&quot;)</span><br><span class="hljs-meta">@Validated</span>  <span class="hljs-comment">// 这个是重点</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractController</span> &#123;<br>    ·········<br>&#125;<br></code></pre></td></tr></table></figure><p>说了一大通基础的东西，但是感觉其实挺全面了，各种用法都介绍了，不足就是 但是没有很深入，如异常的日志的记录，等等。</p><h2 id="封面"><a href="#封面" class="headerlink" title="封面"></a>封面</h2><p><img src="https://tvax3.sinaimg.cn/large/005NNTS5ly1gxy53k0f3ej335s1o0nif.jpg" alt="集原美 粉色帽子"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>validation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>晚闻</title>
    <link href="/2021/12/20/gossip-05/"/>
    <url>/2021/12/20/gossip-05/</url>
    
    <content type="html"><![CDATA[<p>正常晚上下班，下了公交车，车站到我租的的出租屋里还有段距离，下了班到也不着急，悠哉游哉的走在路上，视野里不知道从哪个角落里冒出来一只流浪狗，一开始我并没有去注意这个动物，人来人往的大街上流浪狗很多，我只是一个路人而已，无聊的摇头晃脑时不经意撇了一眼，是一只我也不太会形容，个子不高，四肢短小，不知 是因为流浪的缘故，还是夜色笼罩的缘故，我看着是只灰溜溜的小狗，不过眼睛在灰暗中显的很亮，不知道为什么，没由头的念想让我想跟着它走一走，就跟了它一阵子，想试试能不能把它带走，也不知道为什么会生出这种想法，下了班的时间是我可以自由支配的时间，我便跟着它走了一段时间，小狗的戒心比较重，根本不让我靠近，这也是它存活到现在的原因吧，我不是一个很有耐心的人，跟着的时候，我没有别的行动，我唯一做的就是跟在后面尝试如果它回过头来我就蹲下，伸出手来，看看它会不会过来，最后的最后它没有过来，我也转身回去了，我对自己说，这就是没有缘分啊，不仅人与人，人与狗也是。路上我可以从店里买两根火腿肠，这样做也许会增加它过来的几率，可我不想，这种事还是相信缘分吧，买火腿这种行为会不会只是在骗自己。它不过来，这也不是一件坏事，我就一普普通通打工人，就算它过来跟我走了，我可以让它“锦衣玉食”，“干干净净”一段时间，可现实是，我没有汽车，我没有办法带它上高铁，或者大巴，可能这也是借口，是我为我的自私自利找的一个借口，没有办法带回家。在过年回家这一铁律下，它被我抛弃的可能性很高。那时候才是真正的好心办了坏事，它本来就是流浪的，原本就是，一直如此就挺好。</p><p>因为你的一点“善意”。你打破它平静的生活，故事的最后，你还表现出一幅我已经尽力的无辜表情。挺让人笑话的。</p><blockquote><p>原文记于2020年末</p></blockquote><h2 id="封面"><a href="#封面" class="headerlink" title="封面"></a>封面</h2><p><img src="https://tva3.sinaimg.cn/large/005NNTS5ly1gxkcc6lgslj32yo1o0x6p.jpg" alt="火影忍者春野樱"></p>]]></content>
    
    
    <categories>
      
      <category>碎碎念</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初恋</title>
    <link href="/2021/12/20/other-05/"/>
    <url>/2021/12/20/other-05/</url>
    
    <content type="html"><![CDATA[<div class="note note-light">            <p>无论我们最后生疏成什么样子，曾经对你的好都是真的，就算终有一散，也别辜负相遇，希望你不后悔认识我，也是真的快乐过，如果能回到从前，我会选择不认识你，不是我后悔，是我不能面对现在的结局。</p>          </div><div class="note note-light">            <p>相恋867天，分手七年，单身七年，至今无法释怀，更多的可能是不甘吧。</p>          </div><div class="note note-light">            <p>到现在都记得很清楚！<br>读初二，报道的第一天，一眼望去就看中了他，然后给了我一个朋友5块钱，叫他跟我换座位。这样就坐在了她后面位置，就这样一来二去慢慢熟悉了，后来在一起了，初三读完她考上了高中我因为差了几分，最后读了职校，到了2015年因为读职校学会了混社会，最后家里下了通牒，与她商量了后选择了入伍，当时记得还跟她约定好了，五年后回来就娶她，2016年我满18岁的时候她还跟我父母来了部队跟我庆祝生日，我父母对她也很满意，农历2016大年三十，因为部队晚上有跨年晚会，手机就放在了宿舍里，等到回来时，只知道她跟我说出了分手！随后我2017年退伍，回来也打听了她消息，可是不愿意见我！之后谈过几个女朋友，但是都已习惯与她做比较，直到现在都记得她的生日，手机号码，或许她手机号码已换，或许她已结婚，为人母，但是很高兴有这么一段回忆，或许不美好！</p>          </div><div class="note note-light">            <p>我的初恋是一个很善解人意的女孩，只是败在了当初的年少无知，如今回忆起来，追悔莫及！</p>          </div><div class="note note-light">            <p>她是第一个我很正式的介绍给家里的女孩子</p>          </div><div class="note note-light">            <p>初恋 一个现在时刻牵动我情绪的人 即使分开了 也希望她能过的好 年少不懂爱的时期碰到爱的人真的很难把握住 当一个要走一个挽留无果的时候 那时可能真的是心力憔悴 无能为力吧 只能说错过了她以后 貌似是丧失了爱别人的能力 每当自己去做或者得到新的东西的时候 总会幻想她在身边应该会是怎么样 可能到现在也还没有释怀 释怀不掉这段感情 释怀不掉她 总是在回忆与现实中来回拉扯 不过可以确定的是她不会回来了 也没有反方向的钟 也不会有那个一起上课 一起自习 一起吃饭的情景 上课 自习 吃饭可能不会变 变得只是从两人变成两个人 陷入回忆不可自拔 可能真的是想谈一场从始而终的恋爱 导致爱得太满 太用力 半年感情两年祭奠 所以说啊 不会爱的年纪 年少时期真的不要爱的太用力 物极必反<br> 只能说一步一回眸 但不会停留原地</p>          </div><div class="note note-light">            <p>她是我想把所有温暖都给她的人 她也救赎过我</p>          </div><div class="note note-light">            <p>初恋啊，有点甜有点酸有点无奈，让我久久不能忘怀，他说过的话做过的事都刻在我心里并永远存在，和他分开我觉得我再也不会那么开心，此时此刻我都觉得我们应该永远在一起，好想拥有一台时光机啊，回到我们眼里都是彼此的时候。。。</p>          </div><div class="note note-light">            <p>她就站在哪儿 站在我十八岁的心中。</p>          </div><div class="note note-light">            <p>大概就是山海亦可平，唯有她终是意难平吧</p>          </div><h2 id="封"><a href="#封" class="headerlink" title="封"></a>封</h2><p><img src="https://tvax2.sinaimg.cn/large/005NNTS5ly1gxk2cqm12uj32yo1o0kjp.jpg" alt="阿尔卑斯山"></p>]]></content>
    
    
    <categories>
      
      <category>Other</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大学里de一些事</title>
    <link href="/2021/12/14/gossip-04/"/>
    <url>/2021/12/14/gossip-04/</url>
    
    <content type="html"><![CDATA[<p>遥想刚进大学，漫无目的，不知道自己要走哪条路，无一例外，坚持下来就是你走的路。大一初，原本的计算机网络专业，专科就专科呗，当时也没有主见，听了别人的要求，转了一次专业，转到了土木专业，我的性格是属于比较极端的，或者说及其的遵循本心，专业课学得不多，算是为自己不好好学习找了个借口吧，听闻大学里面学生会有意思，理所应当的加了一个学生会，感受了一下，算是有了一点见解。大一由于只是一个大一新生，又由于一些让人生恼的愁绪，我没啥表现，只是本本分分的做一些简单的事。</p><p>大二，当了一个所谓的部长，当时不知道为什么，就想留下来，</p><p>我记得学生会主席说的话我有一点见解，说你们当部长不是因为你们有多优秀，而是只是你们愿意留下来。是啊，愿意留下来的才是真的想留下来的，优秀不优秀，留下来的才是真的。留下来的才是真的。</p><p>接下来的日子，大二一年是我最巅峰的时候，带着大一的新生一起玩闹，几个部长之间的打闹，这段时间算是我大学里最快乐的时光，我的性格如此，如果没有事情让我们产生联系，我们的关系及其容易就止步于此，就算偶尔能撞见，也只是简单的寒暄两句，是没有办法回到从前的。从小到大，无一例外！</p><p>再者大三了，当时上学期还是一起直接在操场上喝啤酒，眼里闪着小星星和大家说着被粉饰过后的爱情故事，听完乐了，我也乐了。上头之后，有人吵，有人闹，有人哭着喊着要吃健胃消食片，我也不说是谁，这个确实挺讨喜。后来啊，因为没有学生会的交集，加上我毕业将至，再后来，因为一场突如其来的疫情，月亮下了山，星星也失了约，我们都弄丢了一些人和事，尽管你现在变得比以前优秀了。</p><p>又是一年寒冬，我在何处天涯，你又在谁的伞下。</p><blockquote><p>原文记于2020年年末。</p></blockquote><h2 id="封面"><a href="#封面" class="headerlink" title="封面"></a>封面</h2><p><img src="https://tva4.sinaimg.cn/large/005NNTS5ly1gxdqoo9ln1j32yo1o07wj.jpg" alt="集原美2周年生日快乐"></p>]]></content>
    
    
    <categories>
      
      <category>碎碎念</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>知易行难</title>
    <link href="/2021/12/14/gossip-03/"/>
    <url>/2021/12/14/gossip-03/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>“无一例外，我永远知道哪条路是对的。但我从来不走，因为太他娘难了”</p><p>– 这句话不是我说的，但事实如此。</p>          </div><p>距离上一次写这东西的时候已经过去有段时间了，从时间上来说，我并不忙，但是我却迟迟不动键盘，我却一直没有产出，在保持输出的时候，同时也是需要保持输入的，否则会有一种拔剑四顾心茫然的感觉，午休的时候，电脑面前一坐，感觉我应该做点什么，于是新建了一个文件夹，👼然后安心的打开了原神。</p><p>现在相较于写demo，更多的时间是在看demo，我代码写的并不少，坚持是一件很难的事，在一次一次的重复造轮子中，我的写代码的热情好像被消耗的非常严重，一段时间就是懒癌上身，不想重构，不想看自己写的代码，看自己的代码有种无力的茫然感，这时候我会期待有个人能帮我重构一下代码，能帮我把这个代码变得耳目一新，以让我重拾对代码的热情，但可惜的是，这种期待只能是期待，只是我给自己找的一个借口，借口的背后就是我真实的惰性。道理都懂，你不想做的事，其实就是你应该做的事。知易行难。</p><p>看开源项目的代码，实际上是很轻松的，但有些人看代码感觉累，感觉累，应该就是代码写少了，需要多多学习，带入原有开发者的思想，在你未阅读一定量的代码之前，请务必虚心当一个学习者。</p><p>努力让自己成为了一个参与者，参与开源项目，是最好的提升自己的方式，学习优秀项目的思路，是提升自己最好的方法，</p><h2 id="雾失楼台"><a href="#雾失楼台" class="headerlink" title="雾失楼台"></a>雾失楼台</h2><div class="note note-info">            <p>那日本人靠不住，我靠谁啊？老蒋？”</p><p>“更靠不住。”</p><p>“一个写日记的人。”</p><p>“正经人谁写日记啊。”</p><p>“是啊。”</p><p>“你写日记吗。”</p><p>“我不写。”</p><p>“你写日记吗？”</p><p>“谁能把心里话写日记里？”</p><p>“写出来的哪能叫心里话？”</p><p>“下贱。”</p><p>“下贱。”</p>          </div><h2 id="封"><a href="#封" class="headerlink" title="封"></a>封</h2><p><img src="https://tva4.sinaimg.cn/large/005NNTS5ly1gxdqc3tq92j31z41404qp.jpg" alt="女孩"></p>]]></content>
    
    
    <categories>
      
      <category>碎碎念</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue+TS+默认组合式API</title>
    <link href="/2021/11/29/vue-03/"/>
    <url>/2021/11/29/vue-03/</url>
    
    <content type="html"><![CDATA[<p>对于前端的开发，我一直有在关注，Vue的写法有点多，是好事还是坏事，我也搞不懂了，几种写法我也都试了一试，可能是TS的原因，觉得并不是很完美，默认的写法对TS兼容性应该是最好的，兼容的场景还是蛮多的，但是监听自定义事件的时候，没有提示。</p><p><code>&lt;script setup lang=&quot;ts&quot;&gt;</code>的写法监听自定义事件的提示十分友好，但这种写法访问子组件里的属性时也不友好。但是转念想一想，组件之间应该是独立的，况且Vue也提供了父子组件交互的方法，父组件直接操作子组件这种行为并不推荐。这种写法代码的简洁度很高，按常理来说，代码越少越易维护。自己斟酌。</p><p>我是期望前端发展如后端的springboot一样，写法规范统一起来，不管从维护上，还是开发上都能减少一些没有必要的工作量。</p><h2 id="默认组合式API写法"><a href="#默认组合式API写法" class="headerlink" title="默认组合式API写法"></a>默认组合式API写法</h2><h3 id="响应式"><a href="#响应式" class="headerlink" title="响应式"></a>响应式</h3><h4 id="简单的响应式"><a href="#简单的响应式" class="headerlink" title="简单的响应式"></a>简单的响应式</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;&#123; name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;&#123;sum&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; defineComponent, toRefs, reactive, computed, watch, ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineComponent</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;HelloWorld&#x27;</span>,</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 定义</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> sum = <span class="hljs-title function_">ref</span>(<span class="hljs-number">200</span>)</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> name = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;hahahahah&#x27;</span>)</span><br><span class="language-javascript">        <span class="hljs-comment">// 使用第一步</span></span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">            sum,name</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="复杂的响应式"><a href="#复杂的响应式" class="headerlink" title="复杂的响应式"></a>复杂的响应式</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 使用 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;&#123;user.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;&#123;user.age&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;&#123;user.sex&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; defineComponent, toRefs, reactive, computed, watch, ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineComponent</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;HelloWorld&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 定义一个变量</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> user = <span class="hljs-title function_">reactive</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;小红&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">age</span>: <span class="hljs-number">23</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;男&#x27;</span></span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        <span class="hljs-comment">// 导出才能在模板中使用</span></span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">            user</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="一些小妙招"><a href="#一些小妙招" class="headerlink" title="一些小妙招"></a>一些小妙招</h4><p>不想在return中写太多的感觉没啥意义的代码，这时候我们就可以这样写</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 使用 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;&#123; user.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;&#123; user.age &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;&#123; user.sex &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;&#123; sum &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;sunc(&#x27;233&#x27;)&quot;</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; defineComponent, toRefs, reactive, computed, watch, ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;</span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineComponent</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;HelloWorld&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> data = <span class="hljs-title function_">reactive</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">user</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;小红&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">age</span>: <span class="hljs-number">23</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;男&#x27;</span></span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-comment">// 可以写任意变量，就不需要在return中写了</span></span><br><span class="language-javascript">            <span class="hljs-attr">sum</span>: <span class="hljs-number">200</span>,</span><br><span class="language-javascript">            <span class="hljs-comment">// 函数也可以在这里面写</span></span><br><span class="language-javascript">            <span class="hljs-title function_">sunc</span>(<span class="hljs-attr">id</span>:string):<span class="hljs-keyword">void</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;id=&#x27;</span> + id);</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-comment">// 计算属性也可以在这里写，就不需要在return里面写很多代码了。</span></span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 解构导出，访问的时候不需要带上data</span></span><br><span class="language-javascript">            ...<span class="hljs-title function_">toRefs</span>(data)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="监听事件"><a href="#监听事件" class="headerlink" title="监听事件"></a>监听事件</h3><p>关于监听的API还挺多的，这里不过多介绍，只介绍常见的。</p><h4 id="简单的监听"><a href="#简单的监听" class="headerlink" title="简单的监听"></a>简单的监听</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-keyword">const</span> fastName = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;3222&#x27;</span>)<br>       <span class="hljs-title function_">watch</span>(fastName,<span class="hljs-function">(<span class="hljs-params">newVal,oldVal</span>)=&gt;</span>&#123;<br>           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newVal +<span class="hljs-string">&#x27;---&#x27;</span>+oldVal);<br>       &#125;)<br>       <span class="hljs-keyword">return</span> &#123;<br>           fastName<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="侦听一个Getter函数"><a href="#侦听一个Getter函数" class="headerlink" title="侦听一个Getter函数"></a>侦听一个Getter函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 使用reactive定义的不能直接data.user.name来监听。</span><br>    <span class="hljs-keyword">const</span> data = <span class="hljs-title function_">reactive</span>(&#123;<br>        <span class="hljs-attr">user</span>: &#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;小红&#x27;</span>,<br>            <span class="hljs-attr">age</span>: <span class="hljs-number">23</span>,<br>            <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;男&#x27;</span><br>        &#125;,<br>        <span class="hljs-comment">// 可以写任意变量，就不需要在return中写了</span><br>        <span class="hljs-attr">sum</span>: <span class="hljs-number">200</span><br>    &#125;)<br>    <span class="hljs-comment">// 使用这种方式就是可以监听得到。</span><br>    <span class="hljs-title function_">watch</span>(<span class="hljs-function">() =&gt;</span> data.<span class="hljs-property">user</span>.<span class="hljs-property">name</span>, <span class="hljs-function">(<span class="hljs-params">newVal, oldVal</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newVal + <span class="hljs-string">&#x27;---&#x27;</span> + oldVal);<br>    &#125;)<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-comment">// 解构导出，访问的时候不需要带上data</span><br>        ...<span class="hljs-title function_">toRefs</span>(data)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="监听多个源"><a href="#监听多个源" class="headerlink" title="监听多个源"></a>监听多个源</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> fooRef = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&quot;foo&quot;</span>)<br>    <span class="hljs-keyword">const</span> barRef = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&quot;bar&quot;</span>)<br>    <span class="hljs-title function_">watch</span>([fooRef, barRef], <span class="hljs-function">(<span class="hljs-params">[foo, bar], [prevFoo, prevBar]</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;newVal = &#x27;</span> + foo+ <span class="hljs-string">&#x27;-&#x27;</span> + bar+<span class="hljs-string">&#x27;,,,oldVal&#x27;</span> + prevFoo+ <span class="hljs-string">&#x27;-&#x27;</span> + prevBar);<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="定义Props"><a href="#定义Props" class="headerlink" title="定义Props"></a>定义Props</h3><h4 id="简单的定义"><a href="#简单的定义" class="headerlink" title="简单的定义"></a>简单的定义</h4><p>父组件传值时会有类型校验。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineComponent</span>(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;HelloWorld&#x27;</span>,<br>  <span class="hljs-attr">props</span>: &#123;<br>    <span class="hljs-attr">msg</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,<br>        <br>    &#125;,<br>  &#125;,<br>  <span class="hljs-title function_">setup</span>(<span class="hljs-params">props,ctx</span>) &#123;<br>  &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure><h4 id="高端的定义"><a href="#高端的定义" class="headerlink" title="高端的定义"></a>高端的定义</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript">interface <span class="hljs-title class_">Book</span> &#123;<br>  <span class="hljs-attr">title</span>: string<br>  <span class="hljs-attr">author</span>: string<br>  <span class="hljs-attr">year</span>: number<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineComponent</span>(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;HelloWorld&#x27;</span>,<br>  <span class="hljs-attr">props</span>: &#123;<br>    <span class="hljs-comment">// 普通变量</span><br>    <span class="hljs-attr">msg</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,<br>      <span class="hljs-comment">// 默认值</span><br>      <span class="hljs-attr">default</span>: <span class="hljs-function">() =&gt;</span> (<span class="hljs-string">&#x27;这是默认值&#x27;</span>),<br>      <span class="hljs-comment">// 校验</span><br>      <span class="hljs-attr">validator</span>: <span class="hljs-function">(<span class="hljs-params">msg: <span class="hljs-built_in">String</span></span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> msg.<span class="hljs-property">length</span> &gt; <span class="hljs-number">3</span><br>      &#125;<br>    &#125;,<br>    <span class="hljs-comment">// 对象变量</span><br>    <span class="hljs-attr">book</span>: &#123;<br>        <span class="hljs-comment">// 要使用PropType来定义变量</span><br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">Object</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">PropType</span>&lt;<span class="hljs-title class_">Book</span>&gt;,<br>      <span class="hljs-comment">// 请务必使用箭头函数</span><br>      <span class="hljs-attr">default</span>: <span class="hljs-function">() =&gt;</span> (&#123;<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;这是一个错误&#x27;</span><br>      &#125;),<br>      <span class="hljs-attr">validator</span>: <span class="hljs-function">(<span class="hljs-params">book: Book</span>) =&gt;</span> !!book.<span class="hljs-property">title</span><br>    &#125;<br>  &#125;,<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h3><p>props和自定义事件都属于组件化常用的，自定义事件的历史包袱过重，在setup的写法中得到了解决，这个组合式API中没啥好的办法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 这里传入第二个参数</span><br><span class="hljs-title function_">setup</span>(<span class="hljs-params">props, ctx</span>) &#123;<br>    <span class="hljs-keyword">const</span> aaaa = <span class="hljs-title function_">reactive</span>(&#123;<br>      <span class="hljs-title function_">changeTaa</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// 抛出事件，事件名为del</span><br>        ctx.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;del&#x27;</span>, <span class="hljs-number">233</span>)<br>      &#125;,<br>    &#125;)<br>    <span class="hljs-keyword">return</span> &#123;<br>      ...<span class="hljs-title function_">toRefs</span>(aaaa)<br>    &#125;<br>  &#125;<br><br><br>&lt;!-- 监听部分 --&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">HelloWorld</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;model&quot;</span> @<span class="hljs-attr">del</span>=<span class="hljs-string">&quot;testEmit&quot;</span>/&gt;</span></span><br><br><span class="hljs-comment">// 当在子组件中抛出事件此方法就会被触发，我们还可以用这个方法返回值来给子组件传递数据。工欲善其事必先利其器，半吊子很难的啦。</span><br><br><span class="hljs-title function_">testEmit</span>(<span class="hljs-params">id:string</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;自定义事件触发了&#x27;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;id=&#x27;</span>+id);<br>&#125;<br></code></pre></td></tr></table></figure><p>到这，常用的组合式API的写法其实就已经差不多了。</p><h2 id="封面"><a href="#封面" class="headerlink" title="封面"></a>封面</h2><p><img src="https://tva3.sinaimg.cn/large/005NNTS5ly1gwwg1k0x9cj32yo1o04qq.jpg" alt="集原美Sky train"></p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>typescript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot2.5.x整合Quartz并持久化</title>
    <link href="/2021/11/22/java-05/"/>
    <url>/2021/11/22/java-05/</url>
    
    <content type="html"><![CDATA[<p>风风火火，恍恍惚惚，springboot2.6.0正式版也发布了，同时也宣布了2.4x版本停止维护。2.5.x系列也是目前自己写Demo在用的，为什么要记录下来呢， 主要我把项目升级到2.6之后项目跑不起来了，原因我知道，但是我不知道怎么解决，看了看机翻的更新文档，有处可能是影响我项目跑不起来的原因，就是限制了依赖的循环导入，现在依赖循环导入，项目是会直接跑不起来。我的问题是项目里获取不到DataSource数据源，我用了各种姿势，都获取不到，靓仔在线疑惑。既然不能无缝升级，那我就记下来一个正常的版本。</p><p>定时任务是很常用的一个功能，比如简单的生日提醒，每天定点查询用户的生日信息。然后发出一系列的提示操作。不了解你就感觉很难，但是现在spring给我们带来了很多的便利，看一看，在头脑风暴一下，也不难。编程一途，殊途同归。</p><p>主要工作中好多同步代码感觉都可以使用定时任务来处理，然而实际上用的是一个一个的Main方法，吐槽吧，人家那代码又不是不能跑，不仅能跑，还能赚钱。没啥好吐槽的，就是维护时想骂娘，骂娘就骂娘，还十分容易出错。</p><h2 id="核心配置类"><a href="#核心配置类" class="headerlink" title="核心配置类"></a>核心配置类</h2><p>用了这个配置类，腰不酸了，腿不痛了，一次能爬五层楼。觉也睡的香了。好吧，前面纯属扯淡，写了这个yml中就不需要配置了，大致看一下每行的注释，测试学习中以先跑起来为主，然后再慢慢研究即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangijun.springbootdemo.config;<br><br><span class="hljs-keyword">import</span> ...;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * quartz配置类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QuartzConfig</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 此种注入方式，在springboot2.6中获取不到，</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> DataSource dataSource;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Describe: 定时任务工厂</span><br><span class="hljs-comment">     * Param: DataSource</span><br><span class="hljs-comment">     * Return: ScheduleFactoryBean</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> SchedulerFactoryBean <span class="hljs-title function_">schedulerFactoryBean</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        <span class="hljs-comment">// QlScheduler这个值可以自定义</span><br>        prop.put(<span class="hljs-string">&quot;org.quartz.scheduler.instanceName&quot;</span>, <span class="hljs-string">&quot;QlScheduler&quot;</span>);<br>        <span class="hljs-comment">// 设置为AUTO时使用，默认的实现org.quartz.scheduler.SimpleInstanceGenerator是基于主机名称和时间戳生成。</span><br>        prop.put(<span class="hljs-string">&quot;org.quartz.scheduler.instanceId&quot;</span>, <span class="hljs-string">&quot;AUTO&quot;</span>);<br>        <span class="hljs-comment">// 线程池相关配置</span><br>        prop.put(<span class="hljs-string">&quot;org.quartz.threadPool.class&quot;</span>, <span class="hljs-string">&quot;org.quartz.simpl.SimpleThreadPool&quot;</span>);<br>        prop.put(<span class="hljs-string">&quot;org.quartz.threadPool.threadCount&quot;</span>, <span class="hljs-string">&quot;20&quot;</span>);<br>        prop.put(<span class="hljs-string">&quot;org.quartz.threadPool.threadPriority&quot;</span>, <span class="hljs-string">&quot;5&quot;</span>);<br>        <span class="hljs-comment">// JobStoreTX在每次执行任务后都使用commit或者rollback来提交更改。</span><br>        prop.put(<span class="hljs-string">&quot;org.quartz.jobStore.class&quot;</span>, <span class="hljs-string">&quot;org.quartz.impl.jdbcjobstore.JobStoreTX&quot;</span>);<br>        <span class="hljs-comment">// 集群配置：如果有多个调度器实体的话则必须设置为true，如果项目部署了多个，就设置为true</span><br>        prop.put(<span class="hljs-string">&quot;org.quartz.jobStore.isClustered&quot;</span>, <span class="hljs-string">&quot;false&quot;</span>);<br>        <span class="hljs-comment">// 集群配置：检查集群下的其他调度器实体的时间间隔</span><br>        prop.put(<span class="hljs-string">&quot;org.quartz.jobStore.clusterCheckinInterval&quot;</span>, <span class="hljs-string">&quot;15000&quot;</span>);<br>        <span class="hljs-comment">// 设置一个频度(毫秒)，用于实例报告给集群中的其他实例</span><br>        prop.put(<span class="hljs-string">&quot;org.quartz.jobStore.maxMisfiresToHandleAtATime&quot;</span>, <span class="hljs-string">&quot;5000&quot;</span>);<br>        <span class="hljs-comment">// 触发器触发失败后再次触犯的时间间隔</span><br>        prop.put(<span class="hljs-string">&quot;org.quartz.jobStore.misfireThreshold&quot;</span>, <span class="hljs-string">&quot;12000&quot;</span>);<br><br>        <span class="hljs-comment">// 数据库表前缀 重点这个和建表SQL是对应的关系，如果改了需要改动建表语句</span><br><br>        prop.put(<span class="hljs-string">&quot;org.quartz.jobStore.tablePrefix&quot;</span>, <span class="hljs-string">&quot;schedule_&quot;</span>);<br>        <span class="hljs-comment">// 从 LOCKS 表查询一行并对这行记录加锁的 SQL 语句</span><br>        prop.put(<span class="hljs-string">&quot;org.quartz.jobStore.selectWithLockSQL&quot;</span>, <span class="hljs-string">&quot;SELECT * FROM &#123;0&#125;LOCKS UPDLOCK WHERE LOCK_NAME = ?&quot;</span>);<br><br>        <span class="hljs-type">SchedulerFactoryBean</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SchedulerFactoryBean</span>();<br>        <span class="hljs-comment">// 数据源</span><br>        factory.setDataSource(dataSource);<br>        <span class="hljs-comment">// 上面的配置</span><br>        factory.setQuartzProperties(prop);<br>        <span class="hljs-comment">// 可自定义</span><br>        factory.setSchedulerName(<span class="hljs-string">&quot;QlScheduler&quot;</span>);<br>        <span class="hljs-comment">// 项目启动后30秒后启动开始执行定时任务</span><br>        factory.setStartupDelay(<span class="hljs-number">30</span>);<br>        factory.setApplicationContextSchedulerContextKey(<span class="hljs-string">&quot;applicationContextKey&quot;</span>);<br>        factory.setOverwriteExistingJobs(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">// 自动启动</span><br>        factory.setAutoStartup(<span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">return</span> factory;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><div class="note note-info">            <p>此种配置的Quartz是持久化到数据库的，就是项目重启定时任务的状态并不会丢失。</p>          </div><h2 id="用于Web管理Bean"><a href="#用于Web管理Bean" class="headerlink" title="用于Web管理Bean"></a>用于Web管理Bean</h2><p>可以自定义，要点看代码注释。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangijun.springbootdemo.pojo;<br><br><span class="hljs-keyword">import</span> ...;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 定时任务</span><br><span class="hljs-comment">    */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@TableName(value = &quot;schedule_job&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScheduleJob</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123; <span class="hljs-comment">// 必须序列化</span><br><br>    <span class="hljs-comment">// 必须要有</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">JOB_PARAM_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;JOB_PARAM_KEY&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 任务id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableId(value = &quot;id&quot;, type = IdType.ASSIGN_ID)</span><br>    <span class="hljs-keyword">private</span> String id;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * spring bean名称</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(value = &quot;bean_name&quot;)</span><br>    <span class="hljs-keyword">private</span> String beanName;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 参数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(value = &quot;params&quot;)</span><br>    <span class="hljs-keyword">private</span> String params;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * cron表达式</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(value = &quot;cron_expression&quot;)</span><br>    <span class="hljs-keyword">private</span> String cronExpression;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 任务状态  0：正常  1：暂停</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(value = &quot;`status`&quot;)</span><br>    <span class="hljs-keyword">private</span> Byte status;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 备注</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(value = &quot;remark&quot;)</span><br>    <span class="hljs-keyword">private</span> String remark;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建时间</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(value = &quot;create_time&quot;)</span><br>    <span class="hljs-keyword">private</span> LocalDateTime createTime;<br><br>    <span class="hljs-meta">@TableField(value = &quot;job_name&quot;)</span><br>    <span class="hljs-keyword">private</span> String jobName;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>; <span class="hljs-comment">// 必须要有</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="定时任务执行日志Bean"><a href="#定时任务执行日志Bean" class="headerlink" title="定时任务执行日志Bean"></a>定时任务执行日志Bean</h2><p>主要就是记录一下日志，可根据自己需求，自行扩展。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangijun.qluiserver.pojo;<br><br><span class="hljs-keyword">import</span> ...;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 定时任务日志</span><br><span class="hljs-comment">    */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@TableName(value = &quot;schedule_log&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScheduleLog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 任务日志id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableId(value = &quot;id&quot;, type = IdType.INPUT)</span><br>    <span class="hljs-keyword">private</span> String id;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 任务id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(value = &quot;job_id&quot;)</span><br>    <span class="hljs-keyword">private</span> String jobId;<br><br>    <span class="hljs-meta">@TableField(value = &quot;job_name&quot;)</span><br>    <span class="hljs-keyword">private</span> String jobName;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 参数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(value = &quot;params&quot;)</span><br>    <span class="hljs-keyword">private</span> String params;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 任务状态    0：成功    1：失败</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(value = &quot;`status`&quot;)</span><br>    <span class="hljs-keyword">private</span> String status;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 失败信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(value = &quot;error&quot;)</span><br>    <span class="hljs-keyword">private</span> String error;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 耗时(单位：毫秒)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(value = &quot;times&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer times;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建时间</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(value = &quot;create_time&quot;)</span><br>    <span class="hljs-keyword">private</span> LocalDateTime createTime;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * spring bean名称</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(value = &quot;bean_name&quot;)</span><br>    <span class="hljs-keyword">private</span> String beanName;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="执行定时任务的上下文"><a href="#执行定时任务的上下文" class="headerlink" title="执行定时任务的上下文"></a>执行定时任务的上下文</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangijun.springbootdemo.schedule;<br><br><span class="hljs-keyword">import</span> ...;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Describe: 定时任务执行上下文</span><br><span class="hljs-comment"> * Author: 就免仪式</span><br><span class="hljs-comment"> * CreateTime: 2019/10/23</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScheduleContext</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">QuartzJobBean</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Describe: 执行任务并记录日志</span><br><span class="hljs-comment">     * Param: JobExecutionContext</span><br><span class="hljs-comment">     * Return: 无返回值</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">executeInternal</span><span class="hljs-params">(JobExecutionContext context)</span> &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> context.getMergedJobDataMap().get(ScheduleJob.JOB_PARAM_KEY);<br>        <span class="hljs-type">ScheduleJob</span> <span class="hljs-variable">jobBean</span> <span class="hljs-operator">=</span> (ScheduleJob) o;<br>        <span class="hljs-type">ScheduleLogService</span> <span class="hljs-variable">scheduleJobLogService</span> <span class="hljs-operator">=</span> (ScheduleLogService) SpringUtil.getBean(<span class="hljs-string">&quot;scheduleLogService&quot;</span>);<br>        <span class="hljs-type">ScheduleLog</span> <span class="hljs-variable">logBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScheduleLog</span>() ;<br>        logBean.setId(IdWorker.getIdStr());<br>        logBean.setJobId(jobBean.getId());<br>        logBean.setJobName(jobBean.getJobName());<br>        logBean.setBeanName(jobBean.getBeanName());<br>        logBean.setParams(jobBean.getParams());<br>        logBean.setCreateTime(LocalDateTime.now());<br>        <span class="hljs-type">long</span> <span class="hljs-variable">beginTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis() ;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> SpringUtil.getBean(jobBean.getBeanName());<br>            <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> target.getClass().getDeclaredMethod(<span class="hljs-string">&quot;run&quot;</span>, String.class);<br>            method.invoke(target, jobBean.getParams());<br>            <span class="hljs-type">long</span> <span class="hljs-variable">executeTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis() - beginTime;<br>            logBean.setTimes((<span class="hljs-type">int</span>) executeTime);<br>            logBean.setStatus(<span class="hljs-string">&quot;0&quot;</span>);<br>            log.info(<span class="hljs-string">&quot;定时器 === &gt;&gt; &quot;</span> + jobBean.getJobName() + <span class="hljs-string">&quot;执行成功,耗时 === &gt;&gt; &quot;</span> + executeTime);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">executeTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis() - beginTime;<br>            logBean.setTimes((<span class="hljs-type">int</span>)executeTime);<br>            logBean.setStatus(<span class="hljs-string">&quot;1&quot;</span>);<br>            logBean.setError(e.getCause().getMessage());<br>            e.getCause().printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            scheduleJobLogService.save(logBean);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="定时任务处理器"><a href="#定时任务处理器" class="headerlink" title="定时任务处理器"></a>定时任务处理器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangijun.springbootdemo.schedule;<br><br><br><span class="hljs-keyword">import</span> ...;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Describe: 定时任务处理器</span><br><span class="hljs-comment"> * Author: 就免仪式</span><br><span class="hljs-comment"> * CreateTime: 2019/10/23</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScheduleHandler</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 定时任务标识 Key,</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SCHEDULE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Ql_&quot;</span> ;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 触发器 KEY</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> TriggerKey <span class="hljs-title function_">getTriggerKey</span><span class="hljs-params">(Long jobId)</span>&#123;<br>        <span class="hljs-keyword">return</span> TriggerKey.triggerKey(SCHEDULE_NAME + jobId) ;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 定时器 Key</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JobKey <span class="hljs-title function_">getJobKey</span> <span class="hljs-params">(Long jobId)</span>&#123;<br>        <span class="hljs-keyword">return</span> JobKey.jobKey(SCHEDULE_NAME+jobId) ;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 表达式触发器</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CronTrigger <span class="hljs-title function_">getCronTrigger</span> <span class="hljs-params">(Scheduler scheduler, Long jobId)</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> (CronTrigger)scheduler.getTrigger(getTriggerKey(jobId)) ;<br>        &#125; <span class="hljs-keyword">catch</span> (SchedulerException e)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Describe: 创建定时任务</span><br><span class="hljs-comment">     * Param: Scheduler ScheduleJobBean</span><br><span class="hljs-comment">     * Return: null</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createJob</span> <span class="hljs-params">(Scheduler scheduler, ScheduleJob scheduleJob)</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 构建定时器</span><br>            <span class="hljs-type">JobDetail</span> <span class="hljs-variable">jobDetail</span> <span class="hljs-operator">=</span> JobBuilder.newJob(ScheduleContext.class).withIdentity(getJobKey(Long.parseLong(scheduleJob.getId()))).build() ;<br>            <span class="hljs-type">CronScheduleBuilder</span> <span class="hljs-variable">scheduleBuilder</span> <span class="hljs-operator">=</span> CronScheduleBuilder<br>                    .cronSchedule(scheduleJob.getCronExpression())<br>                    .withMisfireHandlingInstructionDoNothing() ;<br>            <span class="hljs-type">CronTrigger</span> <span class="hljs-variable">trigger</span> <span class="hljs-operator">=</span> TriggerBuilder.newTrigger()<br>                    .withIdentity(getTriggerKey(Long.parseLong(scheduleJob.getId())))<br>                    .withSchedule(scheduleBuilder).build();<br>            jobDetail.getJobDataMap().put(ScheduleJob.JOB_PARAM_KEY,scheduleJob);<br>            scheduler.scheduleJob(jobDetail,trigger);<br>            <span class="hljs-comment">// 如果该定时器处于暂停状态</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;1&quot;</span>.equals(scheduleJob.getStatus()))&#123;<br>                pauseJob(scheduler,Long.parseLong(scheduleJob.getId())) ;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SchedulerException e)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;createJob Fail&quot;</span>,e) ;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Describe: 更新定时任务</span><br><span class="hljs-comment">     * Param: Scheduler ScheduleJobBean</span><br><span class="hljs-comment">     * Return: null</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateJob</span><span class="hljs-params">(Scheduler scheduler, ScheduleJob scheduleJob)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">TriggerKey</span> <span class="hljs-variable">triggerKey</span> <span class="hljs-operator">=</span> getTriggerKey(Long.parseLong(scheduleJob.getId()));<br>            <span class="hljs-type">CronScheduleBuilder</span> <span class="hljs-variable">scheduleBuilder</span> <span class="hljs-operator">=</span> CronScheduleBuilder.cronSchedule(scheduleJob.getCronExpression()).withMisfireHandlingInstructionDoNothing();<br>            <span class="hljs-type">CronTrigger</span> <span class="hljs-variable">trigger</span> <span class="hljs-operator">=</span> getCronTrigger(scheduler, Long.parseLong(scheduleJob.getId()));<br>            <span class="hljs-keyword">assert</span> trigger != <span class="hljs-literal">null</span>;<br>            trigger = trigger.getTriggerBuilder().withIdentity(triggerKey).withSchedule(scheduleBuilder).build();<br>            trigger.getJobDataMap().put(ScheduleJob.JOB_PARAM_KEY, scheduleJob);<br>            scheduler.rescheduleJob(triggerKey, trigger);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;1&quot;</span>.equals(scheduleJob.getStatus()))&#123;<br>                pauseJob(scheduler, Long.parseLong(scheduleJob.getId()));<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SchedulerException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;updateJob Fail&quot;</span>,e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Describe: 停止定时任务</span><br><span class="hljs-comment">     * Param: Scheduler ScheduleJobBean</span><br><span class="hljs-comment">     * Return: null</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pauseJob</span> <span class="hljs-params">(Scheduler scheduler, Long jobId)</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            scheduler.pauseJob(getJobKey(jobId));<br>        &#125; <span class="hljs-keyword">catch</span> (SchedulerException e)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;pauseJob Fail&quot;</span>,e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Describe: 恢复定时任务</span><br><span class="hljs-comment">     * Param: Scheduler ScheduleJobBean</span><br><span class="hljs-comment">     * Return: null</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">resumeJob</span> <span class="hljs-params">(Scheduler scheduler, Long jobId)</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            scheduler.resumeJob(getJobKey(jobId));<br>        &#125; <span class="hljs-keyword">catch</span> (SchedulerException e)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;resumeJob Fail&quot;</span>,e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Describe: 删除定时任务</span><br><span class="hljs-comment">     * Param: Scheduler ScheduleJobBean</span><br><span class="hljs-comment">     * Return: null</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteJob</span> <span class="hljs-params">(Scheduler scheduler, Long jobId)</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            scheduler.deleteJob(getJobKey(jobId));<br>        &#125; <span class="hljs-keyword">catch</span> (SchedulerException e)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;deleteJob Fail&quot;</span>,e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Describe: 执行定时任务</span><br><span class="hljs-comment">     * Param: Scheduler ScheduleJobBean</span><br><span class="hljs-comment">     * Return: null</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span> <span class="hljs-params">(Scheduler scheduler, ScheduleJob scheduleJob)</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">JobDataMap</span> <span class="hljs-variable">dataMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JobDataMap</span>() ;<br>            dataMap.put(ScheduleJob.JOB_PARAM_KEY,scheduleJob);<br>            scheduler.triggerJob(getJobKey(Long.parseLong(scheduleJob.getId())),dataMap);<br>        &#125; <span class="hljs-keyword">catch</span> (SchedulerException e)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;run Fail&quot;</span>,e) ;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="定时任务启动处理类"><a href="#定时任务启动处理类" class="headerlink" title="定时任务启动处理类"></a>定时任务启动处理类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangijun.springbootdemo.schedule;<br><br><span class="hljs-keyword">import</span> ...;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Describe: 定时任务启动处理类</span><br><span class="hljs-comment"> * Author: 就眠仪式</span><br><span class="hljs-comment"> * CreateTime: 2019/10/23</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScheduleStarted</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> Scheduler scheduler ;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> ScheduleJobService scheduleJobService;<br><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span> <span class="hljs-params">()</span>&#123;<br>        List&lt;ScheduleJob&gt; scheduleJobList = scheduleJobService.list();<br>        <span class="hljs-keyword">for</span> (ScheduleJob scheduleJob : scheduleJobList) &#123;<br>            <span class="hljs-type">CronTrigger</span> <span class="hljs-variable">cronTrigger</span> <span class="hljs-operator">=</span> com.wangijun.springbootdemo.schedule.ScheduleHandler.getCronTrigger(scheduler,Long.parseLong(scheduleJob.getId())) ;<br>            <span class="hljs-keyword">if</span> (cronTrigger == <span class="hljs-literal">null</span>)&#123;<br>                com.wangijun.springbootdemo.schedule.ScheduleHandler.createJob(scheduler,scheduleJob);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                com.wangijun.springbootdemo.schedule.ScheduleHandler.updateJob(scheduler,scheduleJob);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="Web接口"><a href="#Web接口" class="headerlink" title="Web接口"></a>Web接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangijun.springbootdemo;<br><br><span class="hljs-keyword">import</span> ...;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScheduleController</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    ScheduleJobService jobService;<br>    <span class="hljs-meta">@Resource</span><br>    ScheduleLogService logService;<br>    <span class="hljs-meta">@Resource</span><br>    Scheduler scheduler;<br>    <br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据任务ID运行一个任务</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id 任务ID</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 运行状态</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;task_run&quot;)</span><br>    ResponseEntity&lt;Object&gt; <span class="hljs-title function_">taskRun</span><span class="hljs-params">(String id)</span> &#123;<br>        <span class="hljs-type">ScheduleJob</span> <span class="hljs-variable">job</span> <span class="hljs-operator">=</span> jobService.getById(jobId);<br>        ScheduleHandler.run(scheduler, job);<br>        <span class="hljs-keyword">return</span> ResponseEntity.ok(<span class="hljs-string">&quot;成功&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 保存任务</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> job 任务实体</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 保存结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostMapping(&quot;task_save&quot;)</span><br>    ResponseEntity&lt;Object&gt; <span class="hljs-title function_">taskSave</span><span class="hljs-params">(ScheduleJob job)</span> &#123;<br>        job.setId(IdWorker.getIdStr());<br>        job.setCreateTime(LocalDateTime.now());<br>        jobService.save(job);<br>        ScheduleHandler.createJob(scheduler, job);<br>        <span class="hljs-keyword">return</span> ResponseEntity.ok(<span class="hljs-string">&quot;成功&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 更新任务</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> job 任务数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 更新结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostMapping(&quot;task_update&quot;)</span><br>    ResponseEntity&lt;Object&gt; <span class="hljs-title function_">taskUpdate</span><span class="hljs-params">(ScheduleJob job)</span> &#123;<br>        jobService.updateById(job);<br>        ScheduleHandler.updateJob(scheduler, job);<br>        <span class="hljs-keyword">return</span> ResponseEntity.ok(<span class="hljs-string">&quot;成功&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 停止定时任务</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id 任务Id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 执行结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;task_pause&quot;)</span><br>    ResponseEntity&lt;Object&gt; <span class="hljs-title function_">taskPause</span><span class="hljs-params">(String id)</span> &#123;<br>        <span class="hljs-type">ScheduleJob</span> <span class="hljs-variable">scheduleJob</span> <span class="hljs-operator">=</span> jobService.getById(jobId);<br>        ScheduleHandler.pauseJob(scheduler, Long.parseLong(jobId));<br>        scheduleJob.setStatus(<span class="hljs-string">&quot;1&quot;</span>);<br>        jobService.updateById(scheduleJob);<br>        <span class="hljs-keyword">return</span> ResponseEntity.ok(<span class="hljs-string">&quot;成功&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 恢复定时任务</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id 任务Id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 执行结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;task_resume&quot;)</span><br>    ResponseEntity&lt;Object&gt; <span class="hljs-title function_">taskResume</span><span class="hljs-params">(String id)</span> &#123;<br>        <span class="hljs-type">ScheduleJob</span> <span class="hljs-variable">scheduleJob</span> <span class="hljs-operator">=</span> jobService.getById(jobId);<br>        ScheduleHandler.resumeJob(scheduler, Long.parseLong(jobId));<br>        scheduleJob.setStatus(<span class="hljs-string">&quot;0&quot;</span>);<br>        jobService.updateById(scheduleJob);<br>        <span class="hljs-keyword">return</span> ResponseEntity.ok(<span class="hljs-string">&quot;成功&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除一个任务</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> jobId 任务ID</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 删除结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;task_del&quot;)</span><br>    ResponseEntity&lt;Object&gt; <span class="hljs-title function_">taskDel</span><span class="hljs-params">(String jobId)</span> &#123;<br>        ScheduleHandler.deleteJob(scheduler, Long.parseLong(jobId));<br>        jobService.removeById(jobId);<br>        <span class="hljs-keyword">return</span> ResponseEntity.ok(<span class="hljs-string">&quot;成功&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="定时任务类"><a href="#定时任务类" class="headerlink" title="定时任务类"></a>定时任务类</h2><h3 id="新增接口接口BaseTaskService-java"><a href="#新增接口接口BaseTaskService-java" class="headerlink" title="新增接口接口BaseTaskService.java"></a>新增接口接口BaseTaskService.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangijun.springbootdemo.task.base;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BaseTaskService</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 任 务 实 现</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(String params)</span> <span class="hljs-keyword">throws</span> Exception;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="通用定时任务"><a href="#通用定时任务" class="headerlink" title="通用定时任务"></a>通用定时任务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangijun.springbootdemo.task;<br><br><span class="hljs-keyword">import</span> ...;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Describe: 示例任务</span><br><span class="hljs-comment"> * Author: 就免仪式</span><br><span class="hljs-comment"> * CreateTime: 2019/10/23</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component(&quot;commonTask&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonTaskImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BaseTaskService</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">FORMAT</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>) ;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 任务实现</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(String params)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;Params === &gt;&gt; &quot;</span> + params);<br>        log.info(<span class="hljs-string">&quot;当前时间::::&quot;</span> + FORMAT.format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()));<br>        System.out.println(<span class="hljs-string">&quot;执行成功&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="异常的定时任务"><a href="#异常的定时任务" class="headerlink" title="异常的定时任务"></a>异常的定时任务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangijun.springbootdemo.task;<br><br><br><span class="hljs-keyword">import</span> ...;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Describe: 示例任务</span><br><span class="hljs-comment"> * Author: 就免仪式</span><br><span class="hljs-comment"> * CreateTime: 2019/10/23</span><br><span class="hljs-comment"> * 异常任务</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component(&quot;exceptionTask&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionTaskImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BaseTaskService</span> &#123;<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">FORMAT</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>) ;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 任务实现</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(String params)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        log.info(<span class="hljs-string">&quot;当前时间::::&quot;</span> + FORMAT.format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()));<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>(<span class="hljs-string">&quot;发生异常&quot;</span>);<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>建表语句以及测试项目源码，mock.http文件中里面有测试数据，IDEA可以很方便的测试。</p><p><a href="https://gitee.com/wlf213/springboot-quartz">源码</a></p><h2 id="封面"><a href="#封面" class="headerlink" title="封面"></a>封面</h2><p><img src="https://tvax1.sinaimg.cn/large/005NNTS5ly1gwp89wm2nwj33n61o0x6q.jpg" alt="新璃月空港"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>quartz</tag>
      
      <tag>springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue3+TS+SetUp</title>
    <link href="/2021/11/19/vue-02/"/>
    <url>/2021/11/19/vue-02/</url>
    
    <content type="html"><![CDATA[<p>对Vue也算比较熟悉，熟悉的原因很简单，三大前端框架，只有Vue的官方文档中文最全。刚进入工作时用过Vue2,还是内嵌到HTML里面的形式，low是low了点，好处就是当时用(学)起来有没有什么负担，工作里的实践，闲暇中阅读文档，周末大致看看视频，到也不难理解，主要官方的中文文档很详细了，只要你耐得住性子去看，去学。</p><p>Vue3出来也挺长时间了，在Vue３的文档还没有中文翻译的时候我就去看了，当时对Vue这东西理解尚浅，加上一些琐事，没时间去学，学不动了，真的学不动了。不怎么忙的时间里，我于是静下心来了解了一下。</p><p>说升级，对于使用者来说，无外乎废弃了一些API，写法上多了些选择，至于性能提升，代码优化，这些东西我们并不太需要知道。Vue之所以保留旧版的写法，完全是为了照顾旧版本，让使用者就算打算升级也可以更平滑的升级。这对于前端框架来说非常难得，此处点名@angular, 完全不管旧版本的死活。</p><p>尤大官方也说，不建议使用旧版的语法，推荐使用组合式API，那就试试去理解学习组合式API。对于会Vue2的来说理解最重要的，升级的底层核心我们触碰不到，也不需要触碰到，理解Vue2的痛点，以及缺陷，再去理解Vue3新语法解决了什么问题，这个是目前主要需要做的事。</p><p>Vue3简单的说就是把Vue2中分的零零碎碎的代码放在了一起，首先我们回想Vue2中有哪几块代码，data (响应式的属性) methods (基本的代码逻辑)计算属性，还有一个监听属性，生命周期先不考虑，尤大认为这种写法逻辑太过分散，一个数据可能需要要经过三到四个不同的地方,这时候我们就需要在不同的块中找代码，这个一个块里上百行代码是非常常见的。需要跳来跳去的看代码，容易造成关注点混乱。</p><p>组合式写法就是为了解决这种情况，而且组合式的方向对了，没写过React,据说是很像，简单的一点组合式代码提示会更友好，明眼人一看，起码给IDE的计算负担减低不少。不管是JS还是TS。那么学习组合式需要注意什么呢，不要把它想的很难,什么简直都需要重学，实际上就是换了一种写法，定义data变成了ref以及reactive,加上一些奇奇怪怪的语法糖，定义methods,直接定义函数就行了，监听属性，计算属性，都有对应的写法，生命周期随便再看看。Vue3内嵌Html的用法就这些。组件化时加了两个东西一个props以及自定义事件( emit), 这两个东西没怎么变，至少基于JS来说。对于TS这两个变化略多，可以说一种写法一种定义或者声明方式，主要还是这两个东西历史包袱过重。</p><p>Vue3据我目前所了解的，算上旧版本的写法，这种写法不配拥有姓名，所以只能称之为旧版本写法，算上旧版本的写法有四种了。很多啊，我没有兴趣去研究那么多，基于目前来看，<code>&lt;script setup &gt;</code>这种写法应该是最优雅的，尤大官方微博也说了，Vue3 + TS+ setup + Volar &#x3D; 真香。下面主要代码介绍这种写法。</p><p>这种写法不能使用HTML来写，只能使用单文件方式来写，主要看写法</p><h3 id="组件HelloWord"><a href="#组件HelloWord" class="headerlink" title="组件HelloWord"></a>组件HelloWord</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;visible&quot;</span>&gt;</span>是否显示 &#123;&#123; visible &#125;&#125; sumcom = &#123;&#123; sumcom &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span>点击抛出事件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; watch, ref, computed, toRefs &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// props,只声明类型时的写法</span></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> props = defineProps&lt;&#123;</span><br><span class="language-javascript">  <span class="hljs-attr">msg</span>: string</span><br><span class="language-javascript">  <span class="hljs-attr">visible</span>: boolean</span><br><span class="language-javascript">&#125;&gt;()</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// props有默认值时的写法</span></span><br><span class="language-javascript"><span class="hljs-comment">/* interface Props &#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">  msg?: string</span></span><br><span class="hljs-comment"><span class="language-javascript">  labels?: string[]</span></span><br><span class="hljs-comment"><span class="language-javascript">&#125;</span></span><br><span class="hljs-comment"><span class="language-javascript">const props = withDefaults(defineProps&lt;Props&gt;(), &#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">  msg: &#x27;hello&#x27;,</span></span><br><span class="hljs-comment"><span class="language-javascript">  labels: () =&gt; [&#x27;one&#x27;, &#x27;two&#x27;]</span></span><br><span class="hljs-comment"><span class="language-javascript">&#125;) */</span></span><br><span class="language-javascript"><span class="hljs-comment">// end props有默认值时的写法</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 自定义事件,这种写法代码提示十分友好，且在使用组件时的代码提示也十分友好</span></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> emit = defineEmits&lt;&#123;</span><br><span class="language-javascript">  (<span class="hljs-attr">e</span>: <span class="hljs-string">&#x27;change&#x27;</span>, <span class="hljs-attr">id</span>: number): <span class="hljs-keyword">void</span></span><br><span class="language-javascript">  (<span class="hljs-attr">e</span>: <span class="hljs-string">&#x27;update&#x27;</span>, <span class="hljs-attr">value</span>: string): <span class="hljs-keyword">void</span></span><br><span class="language-javascript">&#125;&gt;()</span><br><span class="language-javascript"><span class="hljs-comment">// 定义一个普普通通方法</span></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">test</span> = (<span class="hljs-params"></span>) =&gt; &#123;</span><br><span class="language-javascript">  <span class="hljs-comment">// 抛出自定义事件，这里的代码提示十分友好，</span></span><br><span class="language-javascript">  <span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;update&#x27;</span>, <span class="hljs-string">&#x27;从前从前&#x27;</span>)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 响应式</span></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> sum = <span class="hljs-title function_">ref</span>(<span class="hljs-number">200</span>)</span><br><span class="language-javascript"><span class="hljs-comment">// 计算属性</span></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> sumcom = <span class="hljs-title function_">computed</span>((): <span class="hljs-function"><span class="hljs-params">number</span> =&gt;</span> &#123; <span class="hljs-keyword">return</span> sum.<span class="hljs-property">value</span> * <span class="hljs-number">4</span> &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 监听</span></span><br><span class="language-javascript"><span class="hljs-title function_">watch</span>(sum, <span class="hljs-function">(<span class="hljs-params">newVal, oldVal</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newVal + <span class="hljs-string">&quot;----&quot;</span> + oldVal);</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-title function_">defineExpose</span>(&#123;</span><br><span class="language-javascript">  <span class="hljs-comment">// 导出组件内的东西，给组件外部访问，父组件需要访问子组件内数据时，需要导出，也可以导出函数，</span></span><br><span class="language-javascript">  sum</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- Add &quot;scoped&quot; attribute to limit CSS to this component only --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="组件APP"><a href="#组件APP" class="headerlink" title="组件APP"></a>组件APP</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Vue logo&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./assets/logo.png&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">HelloWorld</span> <span class="hljs-attr">msg</span>=<span class="hljs-string">&quot;欢迎来到你的VUe+TS项目&quot;</span> <span class="hljs-attr">:visible</span>=<span class="hljs-string">&quot;flag&quot;</span> @<span class="hljs-attr">update</span>=<span class="hljs-string">&quot;upd&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;model&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@vue/reactivity&#x27;</span>;</span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; onMounted &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@vue/runtime-core&#x27;</span>;</span><br><span class="language-javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">HelloWorld</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/HelloWorld.vue&#x27;</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> flag = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">false</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> upd = (<span class="hljs-attr">value</span>: string): <span class="hljs-function"><span class="hljs-params">void</span> =&gt;</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value)</span><br><span class="language-javascript">  flag.<span class="hljs-property">value</span> = !flag.<span class="hljs-property">value</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-comment">// 暂时只能这样，实际上不报错，但是TS语法会报错，只能这样定义了。</span></span><br><span class="language-javascript">interface expHello &#123;</span><br><span class="language-javascript">  <span class="hljs-attr">sum</span>: number</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-comment">// 对应子组件</span></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> model = ref&lt;<span class="hljs-title class_">InstanceType</span>&lt;<span class="hljs-keyword">typeof</span> <span class="hljs-title class_">HelloWorld</span>&gt; &amp; expHello&gt;()</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-comment">// 访问子组件里的属性</span></span><br><span class="language-javascript">  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(model.<span class="hljs-property">value</span>?.<span class="hljs-property">sum</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-id">#app</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">font-family</span>: Avenir, Helvetica, Arial, sans-serif;</span><br><span class="language-css">  -webkit-<span class="hljs-attribute">font-smoothing</span>: antialiased;</span><br><span class="language-css">  -moz-osx-<span class="hljs-attribute">font-smoothing</span>: grayscale;</span><br><span class="language-css">  <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">  <span class="hljs-attribute">color</span>: <span class="hljs-number">#2c3e50</span>;</span><br><span class="language-css">  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">60px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="封面"><a href="#封面" class="headerlink" title="封面"></a>封面</h2><p><img src="https://tva1.sinaimg.cn/large/005NNTS5ly1gwo8dswfcpj34mo334e86.jpg" alt="绿色的心"></p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>typescipt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>郭德纲写给儿子郭麒麟的信</title>
    <link href="/2021/11/08/other-04/"/>
    <url>/2021/11/08/other-04/</url>
    
    <content type="html"><![CDATA[<p>甲午年，正月初九，我儿子十八了，正所谓成人长大，学名奇临，取奇妙降临之意，后下海，艺名麒麟，乃仿周大师之遗韵。</p><p>人生一世，极不容易，登天难，求人更难，黄连苦，无钱更苦，江湖险，人心更险，春冰薄，人情更薄。过去有句话，既落江湖内，便是薄命人。我本不愿儿从艺，奈何人自有志无法横拦，但有几句话要说清楚。艺人分几类，种种相隔，一是普通艺人，有一技之长，凭能耐吃饭，一是名演员，知名度高，但不代表艺术高。此类还要两说，一是角儿，何为角儿，舞台上的顶梁柱，剧团班社的灵魂，贴出你的名字要保证卖的出票，全团老少指着你吃饭，角儿是有责任的艺人。</p><p>郭麒麟刚十八，我不希望儿子大红，人红麻烦多，一大三大，名气大后，开销大压力大是非大，红起来容易，难的是接住自己。年三十吃顿饺子容易，之后呢？得天天吃饺子才行啊。可你有那么多面和馅儿吗？所以，要多下功夫，并且要保持一个好的心态，很多人不成功的原因，主要是太尊重自己了。</p><p>一个人刚出道，不狂，没出息，但如果一直狂是肯定没有出息的。你眼中的你和别人眼中的你不是一回事，无限赞美自己只是一种胆怯。我一直认为恐惧到头就是愤怒，发挥无敌想象，给自己描绘了一个童话世界，白衣如雪来去如风，刀光剑影闪过之后，你满脸冷酷独立于珠峰顶端，傲视苍生无比英武，此时我要问的是：孩子，你怎么下去？</p><p>不让古人，是谓有志，不让今人，是谓无良。记住了，小俗便雅，大雅则俗。</p><p>有人夸你，别信，有人骂你，别听。</p><p>周围人随意捧骂，不可与之交，因其无至性也。记住，言语多反复，以防欺诈，忘恩思小过，定会反戈。开口说大义，临大难必变节。逢人称兄弟，即深交也平常。</p><p>此外凡事要慎重。江湖子弟，拿得起来放得下，身边人很重要。一根稻草，扔到街上就是垃圾，捆上白菜就是白菜价，捆上大闸蟹就是大闸蟹价。包括脚下这个平台也极重要。同样是一个人，步行一小时你能走多远？骑车呢？开车呢？坐飞机呢？平台会决定你的速度。且记且记。</p><p>此外钱财要珍惜。但不可看得太重。财乃天地至公之物，假手于人罢了，雨打残花风卷流云，轮番更转而已。穷转富，富转穷，哪有百世富家翁。</p><p>至于交友，吃点亏也无妨，人没所谓，穷通寿夭为命所系，岂不知造物之报施。全视人之自取，芸芸众生富贵贫寒，不是谁都可以傲世乾坤的，其中有命有运。要知因果懂善恶,我儿且记, 但行好事 ，莫问前程。</p><h2 id="封"><a href="#封" class="headerlink" title="封"></a>封</h2><p><img src="https://tvax1.sinaimg.cn/large/005NNTS5ly1gw7jy4zpuwj32yo1o0u0x.jpg" alt="刻晴cos原神"></p>]]></content>
    
    
    <categories>
      
      <category>Other</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springboot事务三两言</title>
    <link href="/2021/11/01/java-04/"/>
    <url>/2021/11/01/java-04/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>经历是会潜移默化改变人的，连自己都不知道，还以为自己内心永远单纯。</p>          </div><p>聊事务，先明白什么是事务，举个烂大街的例子，银行转账，转出方减钱，转入方加钱。这种情况下是不允许其中一个环节单独失败的，但是这种情况又必须执行两次以上的数据库操作语句，保证语句执行结果的一致性功能就是事务功能。</p><p>现在的关系型数据库大多都支持事务控制，事务的四大特性，我还真记不太清，原子性，隔离性，一致性，还有一个特性是什么来着，我查查，查到了，还有一个持久性。持久性没啥好说的，我就记不住。原子性，一致性，这个都好理解，就是都成功或者都失败。隔离性，这个就需要注意一点。具体情况具体处理。理论知识就不赘述了。</p><p>接下来进入下一话题，《母猪的产后护理》，对不起，拿错书了，</p><p>介绍一下spring提供的事务控制，分为编程式和声明式，先说我们用的多的声明式事务控制，且不建议使用编程式的事务控制，springboot2.5.x系列默认就开启了注解式事务控制，只需要在类上或方法上加上<code>@Transactional</code>注解就可以了，加在类上，表示此类中的所有方法都添加了默认的事务支持，如果 类上和方法上同时加了注解，以方法上的注解为准。只要方法抛出了RuntimeException，事务就进行回滚的操作，但如果你把异常try catch了，且没有在catch块里抛出RuntimeException，这种情况下出现异常事务是不会进行回滚的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServiceA</span>&#123;<br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTest</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 这种情况下出现异常是不会进行事务回滚的。</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            updateById(<span class="hljs-literal">null</span>);<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>        <br>        <span class="hljs-comment">// 会进行事务回滚的写法</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            updateById(<span class="hljs-literal">null</span>);<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;测试&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="详解-Transactional注解"><a href="#详解-Transactional注解" class="headerlink" title="详解@Transactional注解"></a>详解@Transactional注解</h2><h3 id="rollbackFor参数"><a href="#rollbackFor参数" class="headerlink" title="rollbackFor参数"></a>rollbackFor参数</h3><p>这个参数是表明捕获什么异常进行回滚数据的。默认只有捕获到RuntimeException和Error才会进行回滚，（基于springboot2.5.x，不同版本可能有差异，请自己查看代码。）不会回滚的是什么异常呢，就是那种需要声明的异常，springboot事务控制是不会捕获到，并回滚数据的，至于为啥，很简单啊，因为声明的异常，大多都是自己手动处理的，继续往上抛或者Try Catch一下，如果不手动处理，程序无法编译。比如IO异常，这些是不会被事务控制捕捉到的。</p><h3 id="propagation参数"><a href="#propagation参数" class="headerlink" title="propagation参数"></a>propagation参数</h3><p>propagation 代表事务的传播行为，默认值为<code>Propagation.REQUIRED</code>，其他的属性信息如下：</p><ul><li><p><code>Propagation.REQUIRED</code>：如果当前存在事务，则加入该事务，如果当前不存在事务，则创建一个新的事务。( 也就是说如果A方法和B方法都添加了注解，在默认传播模式下，A方法内部调用B方法，会把两个方法的事务合并为一个事务 ）</p></li><li><p><code>Propagation.SUPPORTS</code>：如果当前存在事务，则加入该事务；如果当前不存在事务，则以非事务的方式继续运行。</p></li><li><p><code>Propagation.MANDATORY</code>：如果当前存在事务，则加入该事务；如果当前不存在事务，则抛出异常。</p></li><li><p><code>Propagation.REQUIRES_NEW</code>：重新创建一个新的事务，如果当前存在事务，暂停当前的事务。( 当类A中的 a 方法用默认Propagation.REQUIRED模式，类B中的 b方法加上采用 Propagation.REQUIRES_NEW模式，然后在 a 方法中调用 b方法操作数据库，然而 a方法抛出异常后，b方法并没有进行回滚，因为Propagation.REQUIRES_NEW会暂停 a方法的事务 )</p></li></ul><p>-<code>Propagation.NOT_SUPPORTED</code>：以非事务的方式运行，如果当前存在事务，暂停当前的事务。</p><ul><li><p><code>Propagation.NEVER</code>：以非事务的方式运行，如果当前存在事务，则抛出异常。</p></li><li><p><code>Propagation.NESTED</code> ：和 Propagation.REQUIRED 效果一样。</p></li></ul><p>更多参数可以百度了解。</p><h2 id="实际的问题"><a href="#实际的问题" class="headerlink" title="实际的问题"></a>实际的问题</h2><p>本人处理一些银行账务动账信息时，比如一个记账操作时，我需要把需要记账的数据的状态先改成在处理的状态，且需要提交事务，且需要确定下一个事务开启时需要记账的数据状态已经是修改过后的状态，防止重复操作同一笔数据，那么问题就来了，在使用spring声明事务控制时，如何进行这样的操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServiceA</span>&#123;<br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTest</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 检查数据状态是否处于正常状态，如果在处理中就不进行操作</span><br>        <span class="hljs-keyword">if</span> (status == <span class="hljs-string">&quot;2&quot;</span>)&#123;<br>          log.info(<span class="hljs-string">&quot;此数据正在修改中，无法操作&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 先更新一下状态</span><br>        setStatus(<span class="hljs-string">&quot;2&quot;</span>);<br>        <span class="hljs-comment">// 此时需要提交</span><br><br>        <span class="hljs-comment">// 下面进行一些耗时的操作，</span><br><br>        <span class="hljs-comment">//操作结束后,还需进行一些需要事务控制的操作</span><br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这种情况就默认的事务控制一个方法内只能有一个事务，所以中间那步的提交操作以我的解决方式，既然一个方法只能有一个事务，那我把逻辑单独提一个方法不就行了，说干就干，这是修改后的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServiceA</span>&#123;<br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTest2</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 先更新一下状态</span><br>        setStatus(<span class="hljs-string">&quot;2&quot;</span>);<br>        <br>    &#125;<br><br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTest</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 检查数据状态是否处于正常状态，如果在处理中就不进行操作</span><br>        <span class="hljs-keyword">if</span> (status == <span class="hljs-string">&quot;2&quot;</span>)&#123;<br>          log.info(<span class="hljs-string">&quot;此数据正在修改中，无法操作&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 先更新一下状态</span><br>        <span class="hljs-comment">// setStatus(&quot;2&quot;);</span><br>        <span class="hljs-comment">// 调用方法</span><br>        <span class="hljs-built_in">this</span>.setTest2();<br>        <span class="hljs-comment">// 此时需要提交</span><br><br>        <span class="hljs-comment">// 下面进行一些耗时的操作，</span><br><br>        <span class="hljs-comment">//操作结束后,还需进行一些需要事务控制的操作</span><br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个时候信心满满的操作发现setTest2方法调用过后，发现还是只有一个事务，且setTest2的更新操作还是没有分开提交，原因是，JDK的动态代理。在SpringIoC容器中返回的调用的对象是代理对象而不是真实的对象，只有被动态代理直接调用的才会产生事务。这里的this是自身是真实对象而不是代理对象，问题到这里已经很明朗了，这样啊，既然this调用的话事务不能起作用，spring最擅长的不就是注入，我注入一个，然后代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServiceA</span>&#123;<br>  <span class="hljs-comment">// 这是我注入的，实际就是从容器里面取出自己的代理类</span><br>    <span class="hljs-meta">@Resource</span><br>    ServiceA serviceA;<br><br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTest2</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 先更新一下状态</span><br>        setStatus(<span class="hljs-string">&quot;2&quot;</span>);<br>        <br>    &#125;<br><br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTest</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 检查数据状态是否处于正常状态，如果在处理中就不进行操作</span><br>        <span class="hljs-keyword">if</span> (status == <span class="hljs-string">&quot;2&quot;</span>)&#123;<br>          log.info(<span class="hljs-string">&quot;此数据正在修改中，无法操作&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 先更新一下状态</span><br>        <span class="hljs-comment">// setStatus(&quot;2&quot;);</span><br>        <span class="hljs-comment">// 调用方法</span><br>        <span class="hljs-comment">// this.setTest2();</span><br>        <span class="hljs-comment">// 使用注入的对象调用方法，就能触发事务了，</span><br>        serviceA.setTest2();<br>        <span class="hljs-comment">// 此时需要提交</span><br><br>        <span class="hljs-comment">// 下面进行一些耗时的操作，</span><br><br>        <span class="hljs-comment">//操作结束后,还需进行一些需要事务控制的操作</span><br>        <br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>到这步，心里想着应该就可以了，但实际上还是不行，这个时候我们就要看这个了<a href="#propagation%E5%8F%82%E6%95%B0">注解</a>，默认的规则是</p><div class="note note-info">            <p>如果当前存在事务，则加入该事务，如果当前不存在事务，则创建一个新的事务。</p>          </div><p>很显然这个不是我想要的，因为我就是需要两个事务分别提交，你还给我加入同一个事务里，闹呢，一个一个看，配置事务的隔离性配置为<code>Propagation.REQUIRES_NEW</code>。</p><div class="note note-info">            <p><code>REQUIRES_NEW</code>，重新创建一个新的事务，如果当前存在事务，暂停当前的事务。且新增的事务处理完成后在处理当前的事务</p>          </div><p>代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServiceA</span>&#123;<br>   <span class="hljs-meta">@Resource</span><br>    ServiceA serviceA;<br><br>    <span class="hljs-meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTest2</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 先更新一下状态</span><br>        setStatus(<span class="hljs-string">&quot;2&quot;</span>);<br>        <br>    &#125;<br><br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTest</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 检查数据状态是否处于正常状态，如果在处理中就不进行操作</span><br>        <span class="hljs-keyword">if</span> (status == <span class="hljs-string">&quot;2&quot;</span>)&#123;<br>          log.info(<span class="hljs-string">&quot;此数据正在修改中，无法操作&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 先更新一下状态</span><br>        <span class="hljs-comment">// setStatus(&quot;2&quot;);</span><br>        <span class="hljs-comment">// 调用方法</span><br>        <span class="hljs-comment">// this.setTest2();</span><br>        <span class="hljs-comment">// 使用注入的对象调用方法，就能触发事务了，</span><br>        serviceA.setTest2();<br>        <span class="hljs-comment">// 此时需要提交</span><br><br>        <span class="hljs-comment">// 下面进行一些耗时的操作，</span><br><br>        <span class="hljs-comment">//操作结束后,还需进行一些需要事务控制的操作</span><br>        <br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>注意看控制台，应该会出现两个事务，这个时候我的需求就算是完成了。给你带来方便的事务总会多多少少给你带来些许的不便，这些不便的地方叫做规则，因为你用了别人开发的技术，你就需要研究和遵守别人的定下的规则。一开始可能会让你束手束脚的，但是一旦你掌握了规则，你的编码能力会得到大大的提升。</p><h2 id="手动控制事务"><a href="#手动控制事务" class="headerlink" title="手动控制事务"></a>手动控制事务</h2><p>不建议使用，在一些特殊的场景里可以使用，如多线程的情况下，直接看代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 需要注入的对象</span><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> DataSourceTransactionManager dataSourceTransactionManager;<br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> TransactionDefinition transactionDefinition;<br><br><span class="hljs-comment">// 开启事务</span><br><br>TransactionStatus transactionStatus=dataSourceTransactionManager.getTransaction(transactionDefinition);<br><br><span class="hljs-comment">// 提交事务</span><br>dataSourceTransactionManager.commit(transactionStatus);<br><br><span class="hljs-comment">// 回滚事务</span><br>dataSourceTransactionManager.rollback(transactionStatus);<br><br></code></pre></td></tr></table></figure><p>具体使用方法根据自己的业务来编写代码就可以了</p><h2 id="封"><a href="#封" class="headerlink" title="封"></a>封</h2><p><img src="https://tvax3.sinaimg.cn/large/005NNTS5ly1gw5ui05viuj33341wo1kz.jpg" alt="女孩子 风景 外廊 冬景色 夕阳 晚霞"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring</tag>
      
      <tag>事务控制</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springboot打包二三事</title>
    <link href="/2021/10/20/java-03/"/>
    <url>/2021/10/20/java-03/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>爱情是两个强者之间的风花雪月，而不是弱者之间的苦大仇深。</p>          </div><p>简单的打包，无需多言吧，idea里面直接点点点就行。可惜凡事大都不能按照我们预期的那样。总有一些奇奇怪怪的需求，会让你头痛一会，但是遇到问题也不用慌，实际我们遇到的大多问题，网上一搜一大票解决方法，然后自己根据自己的经验从里面找到自己想要的结果就行。</p><p>springboot打包默认的情况下打完包后会进行一次测试，所谓测试就是启停一下项目，自己测试打包玩的时候，感觉并无大碍，最多只是拖慢一点打包速度。但实际上打包的线上配置很难和打包环境做到一致，就是说你用线上的配置打包项目，项目大多数情况下都是跑不起来的，那么这个默认的测试步骤就没啥用，一般我们都是关闭的。</p><h2 id="关闭打包的测试配置"><a href="#关闭打包的测试配置" class="headerlink" title="关闭打包的测试配置"></a>关闭打包的测试配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 跳过测试 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">skipTests</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">skipTests</span>&gt;</span><br>    ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure><p>继续聊，Java项目的依赖管理工具，如Maven，又或者Gradle，给我们带来了方便的同时也有了一点点的小限制，实际上并不能称作为限制，只是需求太诡异吧，比如本程序员就遇到过，项目新旧碰撞，有一个依赖及其古老，多老不清楚，Maven中央仓库里已经找不到这个版本了，又不敢用别的依赖替换，那怎么办，项目怎么跑起来呢，大部分IDE工具玩的熟的人，知道怎么弄，手动添加classpath路径，不同IDE有不同的操作方法，不细说。知道这步的，项目开发调试运行没有问题了，但是，我既然都说了，问题肯定还没解决。开发的差不多了，打包发布，一上线，咋报错了呢，一般缺少依赖时，如果你启动过程中没有用到这个依赖，它不会报错，当你执行方法过程中某个类中用到了这个依赖，它才会报错。为啥报错呢，首先我们看异常，我也记不太清，依赖缺失的异常叫什么ClassNotFund什么之类的异常，单词记得不清楚，中式英语２级水平的我翻译就是找不到类异常。这时，对于SpringBoot打的包熟悉的人已经开始查看包里是否有问题，简单看一下，定位到问题了，我们手动添加的依赖，并不能被SpringBoot打包打进去，那怎么办呢。到也不难，既然maven中的依赖能打包进去，我们把依赖在Maven中配一下就行了呗。</p><h2 id="Maven在pom中加载本地依赖方法"><a href="#Maven在pom中加载本地依赖方法" class="headerlink" title="Maven在pom中加载本地依赖方法"></a>Maven在pom中加载本地依赖方法</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.oracle<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span> <span class="hljs-comment">&lt;!-- 这个随便填，一般用倒写域名的方式吧--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>ojdbc10<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-comment">&lt;!-- 这个同样随便填，上面加这个内容要保证全球唯一，所以一般都用域名来写--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-comment">&lt;!-- 随便写 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>system<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><span class="hljs-comment">&lt;!-- 不懂，请搜索Maven依赖scope标签做什么的--&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 核心：$&#123;project.basedir&#125;指项目根路径， /lib/ojdbc10.jar，一般我是在项目根庐江下新建一个lib文件夹，里面放jar包即可。--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">systemPath</span>&gt;</span>$&#123;project.basedir&#125;/lib/ojdbc10.jar<span class="hljs-tag">&lt;/<span class="hljs-name">systemPath</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 将SystemScope配置的依赖打包到构建包中 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">includeSystemScope</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">includeSystemScope</span>&gt;</span><br>        ...<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>    ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><p>继续说吧，这两种以及涵盖了百分之八十以上情况，继续说打包，springboot的打包，很方便，一个整体的Jar包，一行命令就能直接运行启动，很不错。 在一些场景下，就是在你不方便访问线上测试的环境下，一个五六十兆的jar上传将及其麻烦，尤其是在线上测试的时候，实际上每次就更新几个文件，线上部署却依然需要上传很大的依赖，这种情况下，依赖和Jar包分开打包就显得十分有必要了。</p><h2 id="SpringBoot项目Jar包依赖分离打包"><a href="#SpringBoot项目Jar包依赖分离打包" class="headerlink" title="SpringBoot项目Jar包依赖分离打包"></a>SpringBoot项目Jar包依赖分离打包</h2><p>这个需要几个步骤，首先我们按正常的方式默认打包一下，把正常的打包的Jar包中的lib文件夹粘贴出来，然后配置pom文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    ...<br>        <span class="hljs-comment">&lt;!--这里对应项目的主入口--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mainClass</span>&gt;</span>com.jy.frame.BootApplication<span class="hljs-tag">&lt;/<span class="hljs-name">mainClass</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">layout</span>&gt;</span>ZIP<span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>nothing<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>nothing<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>    ...<br>    <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>repackage<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--end--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置完成后重新打包得到的就是没有依赖的Jar包了，把Jar和上面拷出来的lib文件夹放在同一目录，运行的命令需要加上lib目录</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">java -jar -Dloader.<span class="hljs-built_in">path</span>=./lib 打出来的Jar包名.jar<br></code></pre></td></tr></table></figure><h2 id="封"><a href="#封" class="headerlink" title="封"></a>封</h2><p><img src="https://tva2.sinaimg.cn/large/005NNTS5ly1gvlxsfazirj62yo1o01l002.jpg" alt="短发女孩"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>maven</tag>
      
      <tag>package</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于技术</title>
    <link href="/2021/10/13/gossip-02/"/>
    <url>/2021/10/13/gossip-02/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>理性的思维并不比感性的思维要高级，我们灵魂的画像上也绝不应该只存在某一种色彩。</p>          </div><p>自认为对技术有着无限的热爱，赚钱只是顺带，解决问题对我来说，比赚钱更有意思，赚钱能力，只是证明一下，自己不是废材就够了，</p><p>宏图大志也没有，苟且偷生到也不屑。想自在，为自己而活，可是啊，人就不能完全的为自己而活啊，否则那就是自私。转念一想自在两个字说难也难，说简单也简单。简单的方式，赚点钱给父母养老，然后咱们那就五台山山上见；难的方式，花样就多了，房子，车子，票子，女子，我是一个子都没有啊😅😅</p><p>知乎上看到一个问题，当你发现你引以为豪的技术其实只是工具而已，你会感到悲哀吗</p><p>我需要感到悲哀嘛，技术本身就是工具，只是解决问题的一种更高级的做法，人类从石器时代，到青铜时代，再到现在的钢铁时代，技术和工具是相辅相成的。工具是技术，技术是工具，这并不重要，重要的是能不能巧妙的解决问题。</p><p>有次搞个Java的Springboot项目，往前端进行Json格式转换的时候，发现属性的大写首字母变小写了，这极大的不方便前后一致性，太艹蛋了。属性名JSON化时竟然会有变化，感觉Java的很多框架开发者有点死脑筋，命名规范这玩意就是个规范，你做框架底层没必要越厨代庖，强制采用这些规范。做底层的东西就要把自由度留给使用人员，别人才好在此基础上扩展。虽然可以通过一些注解什么的解决问题，但浪费很多时间。整体上来说，无论是Java的一些框架还是语法本身都为了规范牺牲了太多的自由度，很多时候都是做些没有什么技术含量的东西。</p><p>智能IDE，智能编程语言的飞速发展，让我感觉现在这个编程的门槛真的是低到没话说，但是啊，编程的规范，工具和语言可以帮你做到，但是编程的灵魂，思想，就不是一时半会能够形成的。并不能说你精通编码，就能写出任何东西。一个简单的权限框架，如果你不知道或者不理解一些简单的如RBAC权限模型，只会用if和else来写，你感觉这可能嘛，就算能，写出来的代码也是一个天坑，每加一个权限你就要多写一个if,这是噩梦一样的代码。不管你砌砖你砌的的多好，只会砌砖是建不出摩天大楼的。</p><p>说回编程语言，我对编程语言很是感兴趣，我喜欢研究不同类型的语言，动态语言，静态语言，弱类型，强类型。Java，Javascript等等，对于JS这个语言很奇怪，我有点搞不太明白，动态语言花样太多了，一个this的指向问题，就能让人头痛很久，还有闭包，JS的作用域可以说是诡异到让人难以接受。回调函数，我到现在都不是很懂回调函数的操作原理，怎么能把值传进函数的参数里面，这对于我学Java入门的我来说，这种操作这太不可思议了。我还得学习。判断自己对JS的掌握程度，可以去看Jquery的源码，Jquery实际上算不上框架，更多只是一个JS的语法糖工具，如果能看懂里面一些花里胡哨的操作，那么你的JS水平实际上已经很可以了，对于JS这门语言，又爱又恨。后来又了解了TS，对于前端我是很疑惑的，因为现在没有一个标准，前端开发有JS党，而现在一些框架又转而拥抱TS，Ts类型语言需要IDE的支持才能发挥出静态类型的优势，而VSCode，虽说是使用TS开发的，但是语法提示并不是那么友好，起码给我的感觉不是那么友好。框架虽多，但要记住，原生JS的才是你的立身之本啊。框架可能会过时，原生JS也有可会过时，但相较框架来说概率极低。</p><p>Kotlin，算是一个智能语言，这语言对于自然语言十分友好，带来的副作用就是，编译成机器语言时有点慢。智能，符合编程语言的设计哲学，怎么说呢，谁用这个语言，写出来的代码基本都是十分符合编程规范的代码，面向对象语言的设计规则是被它给玩明白了。Kotlin和Java一样是jvm语言，和Ts对应JS一样，Ts里面是适应JS的，Kotlin里也是能写Java的。这是一种包容的哲学吧。</p><p>Java，springboot3.0最低的JDK版本为17.0，一些固守Java8 的企业和公司，你发任你发呗。技术是需要创新的，Java不是没有发展，而是发展了一直没人用，不停的吐槽Jdk8的槽点，然后造一些轮子，实际上一些痛点，以及轮子，Java新特性中已经有了，比如大家常用的Lombok插件，JDK17中已经不需要这个插件了，看过每个版本的新特性介绍，忘了，我不喜欢用Lombok所以我对这个特性我记得比较清楚。其他的性能，多线程，GC等等优化，这个我不是太懂，也不需要懂，程序跑的动，跑得快，跑的稳就行。</p><p>实际上每种语言类型里你学一种就行了，因为同类型的语言差不多，编程语言本质就三个东西，变量，循环和条件控制。我经常调侃人，一个编程语言我会定义变量，会if,会for,就已经掌握核心技巧了，至于方法和函数，这两个实际上是一个东西，这个应该很简单，不管写法怎么变，核心在那，管你怎么变。参数值，返回值，访问域控制，这些东西不会变吧。</p><p>AOP，面向切面编程，这个编程思想上的不一样了，一般都用来弥补面向对象上的一些不足之处，在不改变源码的情况下，做一些增强操作。如果不考虑多人开发，这个玩法就多了去了，你甚至可以根据方法名或函数名来进行增强操作。考虑多人开发，那就老老实实的加注解吧。</p><h2 id="封"><a href="#封" class="headerlink" title="封"></a>封</h2><p><img src="https://tvax4.sinaimg.cn/large/005NNTS5ly1gvdvmcqdh6j631a1uonpd02.jpg" alt="女子,夜景"></p>]]></content>
    
    
    <categories>
      
      <category>碎碎念</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂文</tag>
      
      <tag>技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>想到什么就说些什么</title>
    <link href="/2021/10/10/other-03/"/>
    <url>/2021/10/10/other-03/</url>
    
    <content type="html"><![CDATA[<p>声音，气味，触觉，它们是可以承载记忆的，一些歌，一些香水的味道，一个不经意的动作。苦难会放大人的感官。类似于心理学中的吊桥效应，但远远比吊桥效应来的更真实，研究心理学的人大多偏执且傲慢，我不喜欢看这玩意，这东西学多了，就没人味了，同销冠，被越来越多人理解的偏见，就不是偏见了，比如大家一提到温州人，第一反应大多都是，靠，有钱人。</p><p>我上初中的时候就住校了，我是一个农村娃娃，当时刚上初中，班上的女同学她们都好厉害的，我玩不过她们，我的性格不是很好，可以说有点臭了，没人可以说教我，不喜欢女老师，除非是我自己想做，否则我只会和你对着干。以现在的我往回看那时的我，多酷啊，简直酷到没朋友。哈哈哈，男人至死是少年。</p><p>我听到一些上面说的苦难时期听的歌，脑海中会控制不住浮现当时的画面，初二上学期，寒冬，手里钱又不多，在校园里飘荡，晚自习教室也没空调，我记得最清楚的就是我们教学楼和宿舍之间有个巷子，那里面的风，怎么说呢，就是每次路过都会说一句，艹，好冷！宿舍里面也没有热水，只能靠一个暖水瓶到食堂里面打点热水，五毛钱一瓶，对当时的我来说，好贵！！有时水放时间长了，不热了，泡面泡不开，就多泡几遍，就是泡一遍把水倒掉，然后继续泡。哈哈当时经典点的娱乐活动就是在外面买点熟食，回到宿舍，在阳台把桌子一摆，喝点啤酒，打打纸牌，下下象棋，这些活动一般都是放假的前一晚。回想起来，到也丰富了回忆。</p><p>大家对花露水的味道应该很熟悉，以前有个人觉得花露水的味道很好闻，我当时表情记不清了，宝藏啊，就是这种感觉吧。乃至于我到现在闻到花露水的气味，便能想到她坐在被窝里的画面，我问她屋子里什么味，她眼睛里好像有小星星一样闪闪发光看着我说，这是花露水的气味啊，你不觉得很好闻嘛。我点点头。</p><p>我不耐寒，简单来说就是怕冷，去年的这个时候，当时的那份工作每天上班下班我需要走十几分钟的路才能到家，路上我习惯听听歌，打开网抑云，《修炼爱情》，《怎么了》，以至于现在我听到这两首歌，我就能想到那个时候，可能是寒冷放大了我当时的感官，形成了永久记忆吧。</p><p>公交站台，红绿灯，电梯，路边摊，路上的流浪狗，出租屋，这些零零散散的东西构成了我当时生活的全部，然后一种由心而生的落寞感控制不住的向我袭来，我现在想到，我到了这个时候还是一样。</p><div class="note note-info">            <p>我们听歌的时候，其实暴露的大都不过是小情绪而已，所谓小情绪，就是并不会对生活造成实质性影响的，反正轨迹不会变。是吧，是我们是什么样的人决定了我们听什么样的歌，而不是听什么样的歌决定我们是什么样的人^_^，不要沉溺于小情绪之中，乖啊。</p><p>这一路时光温柔也好，坎坷崎岖也罢，总得向前。</p>          </div><h2 id="封"><a href="#封" class="headerlink" title="封"></a>封</h2><p><img src="https://tva4.sinaimg.cn/large/005NNTS5ly1gopbvuf16wj32yo1o0e84.jpg" alt="程潇"></p>]]></content>
    
    
    <categories>
      
      <category>Other</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>那时我还不明白</title>
    <link href="/2021/09/23/other-02/"/>
    <url>/2021/09/23/other-02/</url>
    
    <content type="html"><![CDATA[<p>中秋节，团圆夜，三天假期，我也是回了一趟老家，上次回家是端午节，农历五月初五到八月十五，三个月没有回家了，上班，下班，周末，没有暑假的夏天过的飞快。</p><p>下了车，到家门口，在回家的路上通过家里安装的网络摄像头，在手机上我便看到了家里多了两只小狗，果不其然，刚踏进院子，汪汪汪，狗子便一颠一颠的跑出来，奶奶听见狗叫，嗯?狗叫? ?也很自然的出来了，回家的感觉，别的感觉说出不来，就是一种安心的感觉，家里平时只有爷爷奶奶在家，人不多，少了点生气，屋子里的角角落落，到是生了不少蜘蛛网，问题不大，生物除虫，两个字环保，我到也不忍心打扰它们的安宁。家里一只猫，也养了好长时间了。估计也过了一大半的猫生了。猫生不易，且喵且珍惜。</p><p>回家习惯般的把书包往楼梯扶手一挂，方便上楼时带着，不经意看了一眼上面的灰尘，我确实很长时间没回家了。</p><p>人们习惯说下次再见，下次再见，总以为未来很长，殊不知人与人之间是见一面少一面的，你不知道的哪次见面，也许是一个风和日丽的午后，你站在月台上送他上车，目送他离去。你自己也没有想到，至此，你就再也没有见过他了。</p><p>和奶奶聊天，邻里邻外，我奶奶的年纪聊天聊的多是这个走了，那个走了，说罢，奶奶很自然的来一句，人活这一辈子，没意思。我也不懂，奶奶说的人中，有一个我有印象，去年过年的时候，还来我家做客，觥筹交错的光影里我还记得他的样子，世事无常，不知道作何感想，或需要有何感想。</p><p>世俗眼中，不管男女，三四十岁的年纪没有家室，是有问题的，我也难免落俗。以前的成家立业的习俗放在现代好像不合适了，在社会方方面面的潜移默化中，或是电视剧，或是电影中，你没有业，是不配拥有爱情的。国内的绝大部分电视剧中男主或女主必须要有一个有钱的，不然导演不会拍。</p><p>可现实是，事业尚未有起色，家乡难以割舍又难以融入，谈婚论嫁己至眼前。</p><h2 id="封"><a href="#封" class="headerlink" title="封"></a>封</h2><p><img src="https://tvax2.sinaimg.cn/large/005NNTS5ly1gntu80rs7nj30xc0gxn7b.jpg" alt="粉红"></p>]]></content>
    
    
    <categories>
      
      <category>Other</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue3加TS使用Class写法</title>
    <link href="/2021/09/01/vue-01/"/>
    <url>/2021/09/01/vue-01/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>这种写法提案貌似被取消了，GitHub上也停留在rc1版本了，已经一年左右没有提交代码了，确实用Class写Vue确实有点奇怪，现在有更优的选择，如<code>&lt;script setup&gt;</code>写法,博客里面对Vuex，以及Vue-Router的封装还可以用，Class的写法不提倡使用了。</p>          </div><p>总在盼望，总在失望，日子还不都这样。代码也需要雅俗共赏，博客亦如此。</p><p>鄙人不善前端，但是又会一点，近日后端写的乏味，便拎起前端端详端详，一日不见如隔三秋的Vue，让我感觉到生疏，Vue3的语法奇奇怪怪，官网上的写法，我是并不能很理解，或者说就是不易于后端程序员理解，加上Ts这个JS的类型系统语言，让我深深的感觉到，眉眼不如初，让我怎敢相认。</p><p>但是光说不练，是很难体会到其中的玄妙的，我便开始了时隔好多月的Vue3重逢之旅。</p><p>打开VsCode,打开终端，输入vue create vue3_demo。一顿框选，主要记得要选择Vue3以及TS的支持。之后，看着进度条，不停在变动，嘴角疯狂上扬，邪魅一笑，还是内味。</p><p>进度条加载完毕，VsCode,文件-&gt; 将文件夹添加到工作区，打开终端，yarn run serve，回车，嘴角继续疯狂上扬，</p><p>绿色的美好提示<code>Compiled successfully</code>，项目成功启动，复制url, 浏览器打开，回来了，他们都回来了。</p><p>娴熟的打开<code>Home.vue</code>让我看看,这几月没见，变成什么样了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescipt">import &#123; Vue &#125; from &#x27;vue-class-component&#x27;<br><br>export default class Home extends Vue &#123;&#125;<br></code></pre></td></tr></table></figure><p>看到了这两行代码，让我陷入了深思，嗯，这啥玩意，最佳实践嘛，本着实践的态度，试试基本的文档中的新语法，不过有一说一我甚至不知道，新语法的代码我甚至不知道往哪里写，这tm不是欺负老实人嘛。程序员嘛，喜欢学习，搜索<code>vue-class-component</code>，原来是以类的方式写代码啊，Over，Java入门的我写起TS到也不觉得生疏，语法虽有区别，但理念都是一样的。声明变量时需要声明属性，定义方法时需要规定入参格式和返回值格式。况且Ts更多的时候只是一种约束，并不是一种规则。这句话很重要，还记得SpringBoot的一个经典理论，约束大于规则。编程的哲学是通用的。</p><p>大致知道了怎么写之后，容我新起一行，坑就如约而至，父子组件传值的时候，我不知道props在什么地方写，还有监听属性等等。这些问题待我一一解答</p><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>Vue3加Ts必须，VueRouter和Vuex，一般来说项目中都会用到，就都加上。</p><p>我建议不启用代码质量检查和ESlint，原因，Vue3和ts能很好的兼容，在<code>vue-class-component</code>的加持下，实际项目中可能百分之九十九的代码都是使用TS编写，Ts天生就有静态检查，再使用EsLint，在开发中反倒是有点徒增功耗。</p><p>在Vue的可视化项目创建平台中，勾选这几项就行。如图所示，我并没有打算写保姆教程。<br><img src="https://tva3.sinaimg.cn/large/005NNTS5ly1gu201nkgakj30ny04xgmh.jpg" alt="创建项目"></p><p>路由模式，主要分为两种一种是带<code>#</code>的还有一种就是不带的，看个人喜好，我不讨厌这个<code>#</code>。默认就是带的。css预处理器编译，一般都是选用node-sass。就选这个就行了。</p><h3 id="第三方库和CSS组件"><a href="#第三方库和CSS组件" class="headerlink" title="第三方库和CSS组件"></a>第三方库和CSS组件</h3><p>第三方组件：<a href="https://element-plus.gitee.io/#/zh-CN">element-plus</a>这个组件库在写后台管理系统的时候比较好用，更多的时候是提供一个组件，并不能用来写样式。而且我是打算写一个差不多的前台内容系统，考虑到暗黑模式的兼容，我并不能直接开箱即用里面的组件。</p><p>CSS框架：<a href="https://windicss.org/">Windi CSS</a>，被称作为下一代的CSS框架，天然支持暗黑模式，弥补上面组件库样式的不足，而且写起来很舒服。</p><p>Jquery：<a href="https://jquery.com/">JQ</a>这个会引起一点争议，不要提到Jquery就是什么过时啦，都是上个世纪的东西了。Jq一直在更新，Jq适配了Ts, Jq的兼容性很好，JQuery和Vue能一起使用。虽说感觉会很low，但是能抓到老鼠的猫就是好猫，主要原因还是，鄙人不善前端！！。</p><p>为了实现一个多行文本输入高度自适应，嗯，就是很尴尬的那种。挺难的，Element实现方式的源码我看了，有点看不懂，直接用Jquery能实现，但是不完美，就是为了追求我认为的完美，挺难的。</p><p>Axios：用来通信，性能优异，好处多多。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>packegt.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs json"><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ql_blog&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.1.0&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;private&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;serve&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vue-cli-service serve&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vue-cli-service build&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;dependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;@element-plus/icons&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^0.0.11&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;@types/jquery&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^3.5.6&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;axios&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^0.21.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;core-js&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^3.6.5&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;element-plus&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^1.1.0-beta.8&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;jquery&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^3.6.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;vue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^3.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;vue-class-component&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^8.0.0-0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;vue-router&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^4.0.0-0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;vuex&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^4.0.0-0&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;devDependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;@vue/cli-plugin-babel&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;~4.5.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;@vue/cli-plugin-router&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;~4.5.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;@vue/cli-plugin-typescript&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;~4.5.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;@vue/cli-plugin-vuex&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;~4.5.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;@vue/cli-service&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;~4.5.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;@vue/compiler-sfc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^3.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;node-sass&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^4.12.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;sass-loader&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^8.0.2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;typescript&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;~4.1.5&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;vue-cli-plugin-windicss&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;~1.0.4&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;browserslist&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;&gt; 1%&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;last 2 versions&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;not dead&quot;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="引入Jquery"><a href="#引入Jquery" class="headerlink" title="引入Jquery"></a>引入Jquery</h3><p>项目根目录中有的话添加里面的内容即可，没有的话直接新建即可。</p><p>vue.config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> webpack = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack&#x27;</span>)<br><br><span class="hljs-comment">// 这里只列一部分，具体配置参考文档</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">// 开发服务器代理</span><br>  <span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-attr">proxy</span>: &#123;<br>      <span class="hljs-string">&#x27;^/api&#x27;</span>: &#123;<br>        <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://localhost:8001&#x27;</span>,<br>        <span class="hljs-attr">ws</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span><br>      &#125;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">configureWebpack</span>: &#123;<br>    <span class="hljs-attr">plugins</span>: [<br>      <span class="hljs-comment">// 引入Jquery</span><br>      <span class="hljs-keyword">new</span> webpack.<span class="hljs-title class_">ProvidePlugin</span>(&#123;<br>        <span class="hljs-attr">$</span>: <span class="hljs-string">&#x27;jquery&#x27;</span>,<br>        <span class="hljs-attr">jQuery</span>: <span class="hljs-string">&#x27;jquery&#x27;</span>,<br>        <span class="hljs-string">&#x27;windows.jQuery&#x27;</span>: <span class="hljs-string">&#x27;jquery&#x27;</span><br>      &#125;)<br>    ]<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="axios简单的封装"><a href="#axios简单的封装" class="headerlink" title="axios简单的封装"></a>axios简单的封装</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> axios, &#123; <span class="hljs-title class_">AxiosInstance</span>, <span class="hljs-title class_">AxiosRequestConfig</span>, <span class="hljs-title class_">AxiosResponse</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span>;<br><span class="hljs-keyword">import</span> qs <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;qs&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ElMessage</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-plus&#x27;</span><br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">axiosInstance</span>: <span class="hljs-title class_">AxiosInstance</span> = axios.<span class="hljs-title function_">create</span>(&#123;<br>  <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&#x27;/api&#x27;</span>,<br>  <span class="hljs-comment">// 延迟</span><br>  <span class="hljs-attr">timeout</span>: <span class="hljs-number">3000</span>,<br>&#125;);<br><br><span class="hljs-comment">// axios实例拦截请求</span><br>axiosInstance.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<br>  <span class="hljs-function">(<span class="hljs-params">config: AxiosRequestConfig</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(config);<br>    <span class="hljs-title function_">removePending</span>(config) <span class="hljs-comment">// 在请求开始前，对之前的请求做检查取消操作</span><br>    <span class="hljs-title function_">addPending</span>(config) <span class="hljs-comment">// 将当前请求添加到 pending 中</span><br>    config.<span class="hljs-property">headers</span>.<span class="hljs-property">sa_token</span> = <span class="hljs-string">&#x27;ken&#x27;</span><br>    <span class="hljs-keyword">return</span> config;<br>  &#125;,<br>  <span class="hljs-function">(<span class="hljs-params">error: <span class="hljs-built_in">any</span></span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;请求错误拦截&#x27;</span> + error);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error);<br>  &#125;<br>)<br><br><span class="hljs-comment">// axios实例拦截响应</span><br>axiosInstance.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<br>  <span class="hljs-function">(<span class="hljs-params">response: AxiosResponse</span>) =&gt;</span> &#123;<br>    <span class="hljs-title function_">removePending</span>(response)<br>    <span class="hljs-keyword">return</span> response;<br>  &#125;,<br>  <span class="hljs-comment">// 请求失败</span><br>  <span class="hljs-function">(<span class="hljs-params">error: <span class="hljs-built_in">any</span></span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (axios.<span class="hljs-title function_">isCancel</span>(error)) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;repeated request: &#x27;</span> + error.<span class="hljs-property">message</span>)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// handle error code</span><br>      <span class="hljs-comment">// 错误抛到业务代码</span><br>      error.<span class="hljs-property">data</span> = &#123;&#125;<br>      error.<span class="hljs-property">data</span>.<span class="hljs-property">msg</span> = <span class="hljs-string">&#x27;请求超时或服务器异常，请检查网络或联系管理员！&#x27;</span><br>      <span class="hljs-title class_">ElMessage</span>.<span class="hljs-title function_">error</span>(error.<span class="hljs-property">data</span>.<span class="hljs-property">msg</span>)<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error)<br>  &#125;<br>);<br><br><span class="hljs-comment">// 声明一个 Map 用于存储每个请求的标识 和 取消函数</span><br><span class="hljs-keyword">const</span> pending = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>()<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 添加请求</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">Object</span>&#125; config </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">addPending</span> = (<span class="hljs-params">config: AxiosRequestConfig</span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> url = [<br>    config.<span class="hljs-property">method</span>,<br>    config.<span class="hljs-property">url</span>,<br>    qs.<span class="hljs-title function_">stringify</span>(config.<span class="hljs-property">params</span>),<br>    qs.<span class="hljs-title function_">stringify</span>(config.<span class="hljs-property">data</span>)<br>  ].<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&amp;&#x27;</span>)<br>  config.<span class="hljs-property">cancelToken</span> = config.<span class="hljs-property">cancelToken</span> || <span class="hljs-keyword">new</span> axios.<span class="hljs-title class_">CancelToken</span>(<span class="hljs-function"><span class="hljs-params">cancel</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (!pending.<span class="hljs-title function_">has</span>(url)) &#123; <span class="hljs-comment">// 如果 pending 中不存在当前请求，则添加进去</span><br>      pending.<span class="hljs-title function_">set</span>(url, cancel)<br>    &#125;<br>  &#125;)<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 移除请求</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">Object</span>&#125; config </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">removePending</span> = (<span class="hljs-params">config: AxiosRequestConfig</span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> url = [<br>    config.<span class="hljs-property">method</span>,<br>    config.<span class="hljs-property">url</span>,<br>    qs.<span class="hljs-title function_">stringify</span>(config.<span class="hljs-property">params</span>),<br>    qs.<span class="hljs-title function_">stringify</span>(config.<span class="hljs-property">data</span>)<br>  ].<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&amp;&#x27;</span>)<br>  <span class="hljs-keyword">if</span> (pending.<span class="hljs-title function_">has</span>(url)) &#123; <span class="hljs-comment">// 如果在 pending 中存在当前请求标识，需要取消当前请求，并且移除</span><br>    <span class="hljs-keyword">const</span> cancel = pending.<span class="hljs-title function_">get</span>(url)<br>    <span class="hljs-title function_">cancel</span>(url)<br>    pending.<span class="hljs-title function_">delete</span>(url)<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 清空 pending 中的请求（在路由跳转时调用）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">clearPending</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> [url, cancel] <span class="hljs-keyword">of</span> pending) &#123;<br>    <span class="hljs-title function_">cancel</span>(url)<br>  &#125;<br>  pending.<span class="hljs-title function_">clear</span>()<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> axiosInstance<br></code></pre></td></tr></table></figure><h3 id="路由的简单配置（Vue-router）"><a href="#路由的简单配置（Vue-router）" class="headerlink" title="路由的简单配置（Vue-router）"></a>路由的简单配置（Vue-router）</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHashHistory, <span class="hljs-title class_">RouteRecordRaw</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">routes</span>: <span class="hljs-title class_">Array</span>&lt;<span class="hljs-title class_">RouteRecordRaw</span>&gt; = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/home&#x27;</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home/:type&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Home&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;@/views/Home.vue&#x27;</span>),<br>    <span class="hljs-attr">alias</span>: [<span class="hljs-string">&#x27;/home&#x27;</span>],<br>    <span class="hljs-attr">props</span>: <span class="hljs-literal">true</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;About&#x27;</span>,<br>    <span class="hljs-comment">// route level code-splitting</span><br>    <span class="hljs-comment">// this generates a separate chunk (about.[hash].js) for this route</span><br>    <span class="hljs-comment">// which is lazy-loaded when the route is visited.</span><br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;@/views/About.vue&#x27;</span>)<br>  &#125;<br>]<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123;<br>  <span class="hljs-attr">history</span>: <span class="hljs-title function_">createWebHashHistory</span>(),<br>  routes<br>&#125;)<br><br><span class="hljs-comment">// 全局前置拦截</span><br>router.<span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;全局前置拦截&#x27;</span>)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(to)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">from</span>)<br><br>  <span class="hljs-title function_">next</span>()<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br><br></code></pre></td></tr></table></figure><h3 id="全局的状态管理（Vuex）"><a href="#全局的状态管理（Vuex）" class="headerlink" title="全局的状态管理（Vuex）"></a>全局的状态管理（Vuex）</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; createStore, <span class="hljs-title class_">Store</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><br><span class="hljs-keyword">declare</span> <span class="hljs-variable language_">module</span> <span class="hljs-string">&#x27;@vue/runtime-core&#x27;</span> &#123;<br>  <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Photo</span> &#123;<br>    <span class="hljs-attr">src</span>: <span class="hljs-built_in">string</span>;<br>  &#125;<br>  <span class="hljs-comment">// declare your own store states</span><br>  <span class="hljs-keyword">interface</span> <span class="hljs-title class_">State</span> &#123;<br>    <span class="hljs-attr">dark</span>: <span class="hljs-built_in">boolean</span>,<br>    <span class="hljs-attr">count</span>: <span class="hljs-built_in">number</span>,<br>    <span class="hljs-attr">user</span>: &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>,<br>      <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>,<br>      <span class="hljs-attr">photoList</span>: <span class="hljs-title class_">Array</span>&lt;<span class="hljs-title class_">Photo</span>&gt;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// provide typings for `this.$store`</span><br>  <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ComponentCustomProperties</span> &#123;<br>    <span class="hljs-attr">$store</span>: <span class="hljs-title class_">Store</span>&lt;<span class="hljs-title class_">State</span>&gt;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">createStore</span>(&#123;<br>  <span class="hljs-attr">state</span>: &#123;<br>    <span class="hljs-attr">dark</span>: <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;dackModel&#x27;</span>) === <span class="hljs-literal">undefined</span> ? <span class="hljs-literal">false</span> : <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;dackModel&#x27;</span>) + <span class="hljs-string">&#x27;&#x27;</span>),<br>    <span class="hljs-attr">count</span>: <span class="hljs-number">112</span>,<br>    <span class="hljs-attr">user</span>: &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>      <span class="hljs-attr">age</span>: <span class="hljs-number">0</span>,<br>      <span class="hljs-attr">photoList</span>: [&#123;<br>        <span class="hljs-attr">src</span>: <span class="hljs-string">&#x27;test&#x27;</span><br>      &#125;]<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">getters</span>: &#123;<br><br>  &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-title function_">switchDarkMode</span>(<span class="hljs-params">state</span>) &#123;<br>      state.<span class="hljs-property">dark</span> = !state.<span class="hljs-property">dark</span><br>      <span class="hljs-keyword">if</span> (state.<span class="hljs-property">dark</span>) &#123;<br>        $(<span class="hljs-string">&#x27;html&#x27;</span>).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&#x27;dark&#x27;</span>)<br>        <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;dackModel&#x27;</span>, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(<span class="hljs-literal">true</span>))<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        $(<span class="hljs-string">&#x27;html&#x27;</span>).<span class="hljs-title function_">removeClass</span>(<span class="hljs-string">&#x27;dark&#x27;</span>)<br>        <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;dackModel&#x27;</span>, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(<span class="hljs-literal">false</span>))<br>      &#125;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">actions</span>: &#123;<br>  &#125;,<br>  <span class="hljs-attr">modules</span>: &#123;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="项目的main-ts"><a href="#项目的main-ts" class="headerlink" title="项目的main.ts"></a>项目的main.ts</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ElementPlus</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-plus&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;element-plus/dist/index.css&#x27;</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;windi.css&#x27;</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store&#x27;</span><br><br><span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>).<span class="hljs-title function_">use</span>(store).<span class="hljs-title function_">use</span>(router).<span class="hljs-title function_">use</span>(<span class="hljs-title class_">ElementPlus</span>).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>)<br><br></code></pre></td></tr></table></figure><h2 id="封"><a href="#封" class="headerlink" title="封"></a>封</h2><p><img src="https://tvax4.sinaimg.cn/large/005NNTS5ly1gpo8t35xs5j33341r8qv5.jpg" alt="少女马尾辫 夜晚 电脑 听音乐"></p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>typescipt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>yarn和npm操作指南</title>
    <link href="/2021/08/30/vue-04/"/>
    <url>/2021/08/30/vue-04/</url>
    
    <content type="html"><![CDATA[<p>NPM老牌工具，Yarn后起之秀。作为一个后端程序员，可以理解成Maven和Gradle。Node.js为JS这个原本只能在浏览器中运行的语言，提供了一个运行环境，你可以理解成Java的JDK，使原本被浏览器限制的JS放飞自我了。</p><p>NPM和Yarn都是项目管理工具。核心是管理依赖的功能，为项目的运行提供一些支持。</p><h2 id="查看npm，yarn全局安装的包"><a href="#查看npm，yarn全局安装的包" class="headerlink" title="查看npm，yarn全局安装的包"></a>查看npm，yarn全局安装的包</h2><p>npm</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm list -g --depth 0<br></code></pre></td></tr></table></figure><p>yarn</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn global list<br><br><span class="hljs-comment"># 或者</span><br>yarn global list --depth=0<br></code></pre></td></tr></table></figure><h2 id="nrm相关命令"><a href="#nrm相关命令" class="headerlink" title="nrm相关命令"></a>nrm相关命令</h2><p>nrm(npm registry manager )是npm的镜像源管理工具，有时候国外资源太慢，那么我们可以用这个来切换镜像源。<br><strong>安装nrm</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g nrm<br></code></pre></td></tr></table></figure><h3 id="列出可用源"><a href="#列出可用源" class="headerlink" title="列出可用源"></a>列出可用源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nrm <span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><h3 id="切换源"><a href="#切换源" class="headerlink" title="切换源"></a>切换源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nrm use taobao<br></code></pre></td></tr></table></figure><h2 id="npm-x2F-yarn查看当前使用源与设置其它源"><a href="#npm-x2F-yarn查看当前使用源与设置其它源" class="headerlink" title="npm&#x2F;yarn查看当前使用源与设置其它源"></a>npm&#x2F;yarn查看当前使用源与设置其它源</h2><h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看npm当前镜像源</span><br>npm config get registry  <br><br><span class="hljs-comment"># 设置npm当前镜像源</span><br>npm config <span class="hljs-built_in">set</span> registry https://registry.npmjs.org<br></code></pre></td></tr></table></figure><h3 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看yarn当前镜像源</span><br>yarn config get registry<br><br><span class="hljs-comment"># 设置yarn当前镜像源</span><br>yarn config <span class="hljs-built_in">set</span> registry https://registry.yarnpkg.com <br></code></pre></td></tr></table></figure><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><p>这个我是真的不是很想写，因为这东西官网上很详细，而且一点进去就能看到，有些东西，在官网上藏得比较深，又或者语言不同的问题。yarn有个敷衍的中文官网，npm连敷衍都不敷衍，大家优先用哪个知道了么🤣🤣🤣</p><h3 id="yarn常用"><a href="#yarn常用" class="headerlink" title="yarn常用"></a>yarn常用</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">全局添加依赖，添加全局依赖建议yarn和npm两者选其一，</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果同时都添加了全局依赖，我也不知道哪个优先。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">所以二者选其一即可</span><br>yarn global add &lt;package...&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">正常项目中的添加依赖（默认添加到运行依赖中）</span><br>yarn add &lt;package...&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用--dev或-D将在您的 开发依赖中，和运行依赖的区别就是打包时开发依赖不打包进去</span><br>yarn add &lt;package...&gt; [--dev/-D]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除依赖，同时删除开发依赖和运行依赖</span><br>yarn remove &lt;package...&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装本地node_modules文件夹中package.json中列出的所有依赖项。(这百度翻译翻译的可以啊)</span><br>yarn install<br><br></code></pre></td></tr></table></figure><h3 id="npm常用"><a href="#npm常用" class="headerlink" title="npm常用"></a>npm常用</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">对应 yarn install</span><br>npm install<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">对应 yarn add &lt;package...&gt;</span><br>npm install [package] --save<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">对应 yarn add &lt;package...&gt; [--dev/-D]</span><br>npm install [package] --save-dev<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">对应 yarn global add &lt;package...&gt;</span><br>npm install [package] --global<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">对应 yarn remove &lt;package...&gt;</span><br>npm uninstall [package]<br></code></pre></td></tr></table></figure><p>简单的介绍了一下，详细的可以去官网上自行查看，这里只列举了一些常用的。</p><h2 id="快速删除node-modules文件"><a href="#快速删除node-modules文件" class="headerlink" title="快速删除node_modules文件"></a>快速删除node_modules文件</h2><h3 id="使用rimraf模块的命令"><a href="#使用rimraf模块的命令" class="headerlink" title="使用rimraf模块的命令"></a>使用rimraf模块的命令</h3><p>全局安装rimraf模块，然后通过其命令来快速删除node_modules目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install rimraf -g<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">进入项目文件夹中</span><br>rimraf node_modules<br></code></pre></td></tr></table></figure><h3 id="使用命令来删除目录"><a href="#使用命令来删除目录" class="headerlink" title="使用命令来删除目录"></a>使用命令来删除目录</h3><h4 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h4><p>首先在cmd窗口中进入到node_modules文件夹所在的路径，接着执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rmdir /s/q node_modules<br></code></pre></td></tr></table></figure><h4 id="linux下"><a href="#linux下" class="headerlink" title="linux下"></a>linux下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm -f /node_modules<br></code></pre></td></tr></table></figure><h2 id="封"><a href="#封" class="headerlink" title="封"></a>封</h2><p><img src="https://tva4.sinaimg.cn/large/005NNTS5ly1gt3p80og1jj338q1o0b2a.jpg" alt="美少女"></p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>yarn</tag>
      
      <tag>npm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Excel导入导出。</title>
    <link href="/2021/08/16/java-02/"/>
    <url>/2021/08/16/java-02/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>介绍一下Excel的导入导出，用到的开源项目MyExcel，这是个十分好用的轮子，开发者的代码功底十分了得，</p><p>说起这个’了得‘，有意思的是了得和了不得，是一个意思。代码功底十分了得，代码功底十分了不得，表达的是一个意思。中国的文字，确实有点难为老外。</p><p>这个项目的文档已经详细到一种让人感觉到啰嗦的地步，功能也十分健壮，涵盖了各种使用场景。话不多说。进入正文</p>          </div><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><blockquote><p>版本号建议一致，项目中如果有之前的POI的依赖可能会导致版本冲突，解决依赖冲突的方法，请自行百度。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--excel导入导出--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.liaochong<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>myexcel<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.11.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--使用模板导出时过程中如果报包含Ognl关键字的异常，导入此依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ognl<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>ognl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.21<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Excel导入"><a href="#Excel导入" class="headerlink" title="Excel导入"></a>Excel导入</h2><p>导入分为一般导入、sax导入，二者的区别在于sax导入更关注内存，内存使用更少，且sax方式导入功能增强，建议使用sax方式导入（可读取公式值）</p><h3 id="一般导入（不支持csv文件导入，支持图片读取）"><a href="#一般导入（不支持csv文件导入，支持图片读取）" class="headerlink" title="一般导入（不支持csv文件导入，支持图片读取）"></a>一般导入（不支持csv文件导入，支持图片读取）</h3><p>一般导入又分为两种方式，两种方式的区别：</p><ul><li>全部读取：速度快，相对一行一行读取要占内存一点</li><li>一行一行读取：省内存，在高并发下不易引发OOM</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">URL</span> <span class="hljs-variable">htmlToExcelEampleURL</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getClass().getResource(<span class="hljs-string">&quot;/templates/read_example.xlsx&quot;</span>);<br><span class="hljs-type">Path</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> Paths.get(htmlToExcelEampleURL.toURI());<br><br><span class="hljs-comment">// 方式一：全部读取后处理</span><br>List&lt;ArtCrowd&gt; result = DefaultExcelReader.of(ArtCrowd.class)<br>        .sheet(<span class="hljs-number">0</span>) <span class="hljs-comment">// 0代表第一个，如果为0，可省略该操作，也可sheet(&quot;名称&quot;)读取</span><br>        .rowFilter(row -&gt; row.getRowNum() &gt; <span class="hljs-number">0</span>) <span class="hljs-comment">// 如无需过滤，可省略该操作，0代表第一行</span><br>        .beanFilter(ArtCrowd::isDance) <span class="hljs-comment">// bean过滤</span><br>        .startSheet(sheet-&gt;System.out.println(sheet.getName())) <span class="hljs-comment">// 在开始读取sheet前执行指定操作</span><br>        .read(path.toFile());<span class="hljs-comment">// 可接收inputStream</span><br><br><span class="hljs-comment">// 方式二：读取一行处理一行，可自行决定终止条件</span><br><span class="hljs-comment">// readThen有两种重写接口，返回Boolean型接口允许在返回False情况下直接终止读取</span><br>DefaultExcelReader.of(ArtCrowd.class)<br>        .sheet(<span class="hljs-number">0</span>) <span class="hljs-comment">// 0代表第一个，如果为0，可省略该操作，也可sheet(&quot;名称&quot;)读取</span><br>        .rowFilter(row -&gt; row.getRowNum() &gt; <span class="hljs-number">0</span>) <span class="hljs-comment">// 如无需过滤，可省略该操作，0代表第一行</span><br>        .beanFilter(ArtCrowd::isDance) <span class="hljs-comment">// bean过滤</span><br>        .readThen(path.toFile() ,artCrowd -&gt; &#123;System.out.println(artCrowd.getName);&#125;);<span class="hljs-comment">// 可接收inputStream</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArtCrowd</span> &#123;<br>    <span class="hljs-comment">// index代表列索引，从0开始</span><br>    <span class="hljs-meta">@ExcelColumn(index = 0)</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-meta">@ExcelColumn(index = 1)</span><br>    <span class="hljs-keyword">private</span> String age;<br><br>    <span class="hljs-meta">@ExcelColumn(index = 2,format=&quot;yyyy-MM-dd&quot;)</span><br>    <span class="hljs-keyword">private</span> Date birthday;<br>&#125;<br></code></pre></td></tr></table></figure><div class="note note-info">            <p>可不使用@ExcelColumn注解，如不使用，则使用字段默认顺序读取，意思是。excel中从左到右，对应bean中从上到下。</p>          </div><h2 id="Excel默认导出"><a href="#Excel默认导出" class="headerlink" title="Excel默认导出"></a>Excel默认导出</h2><p>默认导出采用普通方式导出List&lt; Bean &gt;，适合小数据量场景，如数据量很大-10万+，建议使用DefaultStreamExcelBuilder，避免内存占用过多。<br><strong>导出需使用到如下注解</strong></p><ul><li>@ExcelModel(includeAllField,excludeParent,workbookType,sheetName,useFieldNameAsTitle,defaultValue)（可选，用于全局设定， 一般情况下只需要使用sheetName）</li><li>@IgnoreColumn（可选，用于排出不需要导出的字段）</li><li>@ExcelColumn(title,order,format,groups,defaultValue,style)</li></ul><blockquote><p>默认导出默认计算宽度、斑马线背景色，若无需上述样式，请调用 noStyle() 方法</p></blockquote><p>对应注解详情请见：<a href="#%E6%B3%A8%E8%A7%A3">注解</a></p><p><code>附件导出示例：</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/default/excel/example&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">defaultBuild</span><span class="hljs-params">(HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    List&lt;ArtCrowd&gt; dataList = <span class="hljs-built_in">this</span>.getDataList();<br>    <span class="hljs-type">Workbook</span> <span class="hljs-variable">workbook</span> <span class="hljs-operator">=</span> DefaultExcelBuilder.of(ArtCrowd.class)<br>            .build(dataList);<br>    AttachmentExportUtil.export(workbook, <span class="hljs-string">&quot;艺术生信息&quot;</span>, response);<br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>附件加密导出示例：</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/default/excel/example&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">defaultBuild</span><span class="hljs-params">(HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    List&lt;ArtCrowd&gt; dataList = <span class="hljs-built_in">this</span>.getDataList();<br>    <span class="hljs-type">Workbook</span> <span class="hljs-variable">workbook</span> <span class="hljs-operator">=</span> DefaultExcelBuilder.of(ArtCrowd.class)<br>            .build(dataList);<br>    AttachmentExportUtil.encryptExport(workbook, <span class="hljs-string">&quot;艺术生信息&quot;</span>, response,<span class="hljs-string">&quot;123456&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>文件导出示例：</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;ArtCrowd&gt; dataList = <span class="hljs-built_in">this</span>.getDataList();<br><span class="hljs-type">Workbook</span> <span class="hljs-variable">workbook</span> <span class="hljs-operator">=</span> DefaultExcelBuilder.of(ArtCrowd.class)<br>         .build(dataList);<br>FileExportUtil.export(workbook, <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;/User/demo.xlsx&quot;</span>));<br><br></code></pre></td></tr></table></figure><p><code>文件加密导出示例：</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;ArtCrowd&gt; dataList = <span class="hljs-built_in">this</span>.getDataList();<br><span class="hljs-type">Workbook</span> <span class="hljs-variable">workbook</span> <span class="hljs-operator">=</span> DefaultExcelBuilder.of(ArtCrowd.class)<br>         .build(dataList);<br>FileExportUtil.encryptExport(workbook, <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;/User/demo.xlsx&quot;</span>),<span class="hljs-string">&quot;123456&quot;</span>);<br><br></code></pre></td></tr></table></figure><p><code>单纯数据获取：</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> List&lt;ArtCrowd&gt; <span class="hljs-title function_">getDataList</span><span class="hljs-params">()</span> &#123;<br>    List&lt;ArtCrowd&gt; dataList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(<span class="hljs-number">1000</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>        <span class="hljs-type">ArtCrowd</span> <span class="hljs-variable">artCrowd</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArtCrowd</span>();<br>         artCrowd.setName(<span class="hljs-string">&quot;李四&quot;</span>);<br>         artCrowd.setAge(<span class="hljs-number">18</span>);<br>         artCrowd.setGender(<span class="hljs-string">&quot;Woman&quot;</span>);<br>         artCrowd.setPaintingLevel(<span class="hljs-string">&quot;一级证书&quot;</span>);<br>         artCrowd.setDance(<span class="hljs-literal">true</span>);<br>         artCrowd.setAssessmentTime(LocalDateTime.now());<br>         artCrowd.setHobby(<span class="hljs-string">&quot;钓鱼&quot;</span>);<br>        dataList.add(artCrowd);<br>    &#125;<br>    <span class="hljs-keyword">return</span> dataList;<br>&#125;<br><br><span class="hljs-meta">@ExcelModel(sheetName = &quot;艺术生&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArtCrowd</span> &#123;<br><br>    <span class="hljs-meta">@ExcelColumn(order = 0, title = &quot;姓名&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-meta">@ExcelColumn(order = 1, title = &quot;年龄&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer age;<br><br>    <span class="hljs-meta">@ExcelColumn(order = 2, title = &quot;性别&quot;)</span><br>    <span class="hljs-keyword">private</span> String gender;<br><br>    <span class="hljs-meta">@ExcelColumn(order = 3,title = &quot;绘画等级&quot;)</span><br>    <span class="hljs-keyword">private</span> String paintingLevel;<br><br>    <span class="hljs-meta">@ExcelColumn(order = 4, title = &quot;是否会跳舞&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> dance;<br><br>    <span class="hljs-meta">@ExcelColumn(order = 5, title = &quot;考核时间&quot;, format = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span><br>    <span class="hljs-keyword">private</span> LocalDateTime assessmentTime;<br><br>    <span class="hljs-meta">@IgnoreColumn</span><br>    <span class="hljs-keyword">private</span> String hobby;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="Excel模板构建"><a href="#Excel模板构建" class="headerlink" title="Excel模板构建"></a>Excel模板构建</h2><blockquote><p>所有Excel构建器均不可单例化，务必注意！！！<br>模板构建，核心原理是根据模板引擎渲染出符合需求布局的Html Table元素，构建器迭代table元素中的单元格渲染出Excel单元格。</p></blockquote><h3 id="导出模板引擎选定"><a href="#导出模板引擎选定" class="headerlink" title="导出模板引擎选定"></a>导出模板引擎选定</h3><blockquote><p>以下模板引擎默认均未被引入，使用者可根据自身需要选择在pom.xml中声明引入。<br>以下模板引擎版本为最低版本号。</p></blockquote><p>使用时根据实际需要自行选择就行了，或者你会哪个引擎就用哪个引擎就Ok。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.ibeetl<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>beetl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.23<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.freemarker<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>freemarker<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.23<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.codehaus.groovy<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>groovy-templates<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.4.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.velocity<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>velocity<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.jfinal<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>enjoy<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Workbook生成"><a href="#Workbook生成" class="headerlink" title="Workbook生成"></a>Workbook生成</h3><p>已存在Html文件时，使用这种方式，Html文件不局限于放在项目的classpath（如：resources）下，也无需模板引擎</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// get html file</span><br><span class="hljs-type">File</span> <span class="hljs-variable">htmlFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;/Users/liaochong/Downloads/example.html&quot;</span>);<br><br><span class="hljs-comment">// read the html file and use default excel style to create excel</span><br><span class="hljs-type">Workbook</span> <span class="hljs-variable">workbook</span> <span class="hljs-operator">=</span> HtmlToExcelFactory.readHtml(htmlFile).useDefaultStyle().build();<br><br><span class="hljs-comment">// this is a example,you can write the workbook to any valid outputstream</span><br>FileExportUtil.export(workbook, <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;/Users/liaochong/Downloads/excel.xlsx&quot;</span>));<br></code></pre></td></tr></table></figure><p>使用内置的Freemarker等模板引擎Excel构建器，模板文件应当存放在classpath下，具体请参照项目中的example</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* use non-default-style excel builder</span><br><span class="hljs-comment">* 模板文件放置在resources下</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> response response</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@GetMapping(&quot;/freemarker/example&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">build</span><span class="hljs-params">(HttpServletResponse response)</span> &#123;<br>     Map&lt;String, Object&gt; dataMap = <span class="hljs-built_in">this</span>.getDataMap();<br>     <span class="hljs-keyword">try</span> (<span class="hljs-type">ExcelBuilder</span> <span class="hljs-variable">excelBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FreemarkerExcelBuilder</span>()) &#123;<br>          <span class="hljs-type">Workbook</span> <span class="hljs-variable">workbook</span> <span class="hljs-operator">=</span> excelBuilder<br>                   <span class="hljs-comment">// fileTemplate(dirPath,fileName)</span><br>                   .classpathTemplate(<span class="hljs-string">&quot;/templates/freemarkerToExcelExample.ftl&quot;</span>)<br>                   .build(dataMap);<br>          AttachmentExportUtil.export(workbook, <span class="hljs-string">&quot;freemarker_excel&quot;</span>, response);<br>     &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* use default-style excel builder</span><br><span class="hljs-comment">* 模板文件放置在resources下</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> response response</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@GetMapping(&quot;/freemarker/defaultStyle/example&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildWithDefaultStyle</span><span class="hljs-params">(HttpServletResponse response)</span> &#123;<br>    Map&lt;String, Object&gt; dataMap = <span class="hljs-built_in">this</span>.getDataMap();<br>    <span class="hljs-keyword">try</span> (<span class="hljs-type">ExcelBuilder</span> <span class="hljs-variable">excelBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FreemarkerExcelBuilder</span>())&#123;<br>         <span class="hljs-type">Workbook</span> <span class="hljs-variable">workbook</span> <span class="hljs-operator">=</span> excelBuilder<br>                  <span class="hljs-comment">// fileTemplate(dirPath,fileName)</span><br>                  .classpathTemplate(<span class="hljs-string">&quot;/templates/freemarkerToExcelExample.ftl&quot;</span>)<br>                  .useDefaultStyle()<br>                  .build(dataMap);<br>         AttachmentExportUtil.export(workbook, <span class="hljs-string">&quot;freemarker_excel&quot;</span>, response);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> Map&lt;String, Object&gt; <span class="hljs-title function_">getDataMap</span><span class="hljs-params">()</span> &#123;<br>    Map&lt;String, Object&gt; dataMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    dataMap.put(<span class="hljs-string">&quot;sheetName&quot;</span>, <span class="hljs-string">&quot;freemarker_excel_example&quot;</span>);<br><br>    List&lt;String&gt; titles = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    titles.add(<span class="hljs-string">&quot;Category&quot;</span>);<br>    titles.add(<span class="hljs-string">&quot;Product Name&quot;</span>);<br>    titles.add(<span class="hljs-string">&quot;Count&quot;</span>);<br>    dataMap.put(<span class="hljs-string">&quot;titles&quot;</span>, titles);<br><br>    List&lt;Product&gt; data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        <span class="hljs-type">Product</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Product</span>();<br>        <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>            product.setCategory(<span class="hljs-string">&quot;蔬菜&quot;</span>);<br>            product.setName(<span class="hljs-string">&quot;小白菜&quot;</span>);<br>            product.setCount(<span class="hljs-number">100</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            product.setCategory(<span class="hljs-string">&quot;电子产品&quot;</span>);<br>            product.setName(<span class="hljs-string">&quot;ipad&quot;</span>);<br>            product.setCount(<span class="hljs-number">999</span>);<br>        &#125;<br>        data.add(product);<br>    &#125;<br>    dataMap.put(<span class="hljs-string">&quot;data&quot;</span>, data);<br>    <span class="hljs-keyword">return</span> dataMap;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="模板示例"><a href="#模板示例" class="headerlink" title="模板示例"></a>模板示例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">caption</span>&gt;</span>$&#123;sheetName&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">caption</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: #6495ED&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;3&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center;vertical-align: middle;font-weight: bold;font-size: 14px;&quot;</span>&gt;</span>产品介绍<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        &lt;#list titles as title&gt;<br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>$&#123;title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        &lt;/#list&gt;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>    &lt;#list data as item&gt;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;item.category&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;item.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;item.count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">url</span>&gt;</span>百度地址<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    &lt;/#list&gt;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><p>模板中的样式请看这里<a href="#%E6%A0%B7%E5%BC%8F%E6%94%AF%E6%8C%81">样式支持</a></p><h2 id="csv文件导出"><a href="#csv文件导出" class="headerlink" title="csv文件导出"></a>csv文件导出</h2><h3 id="一般方式导出"><a href="#一般方式导出" class="headerlink" title="一般方式导出"></a>一般方式导出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span>(<span class="hljs-type">Csv</span> <span class="hljs-variable">csv</span> <span class="hljs-operator">=</span> CsvBuilder.of(People.class).build(getDataList()))&#123;<br>    AttachmentExportUtil.export(csv.getFilePath(), <span class="hljs-string">&quot;test.csv&quot;</span>, response);<br>    <span class="hljs-comment">// csv.write(Paths.get(&quot;/User/append.csv&quot;));</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Map导出"><a href="#Map导出" class="headerlink" title="Map导出"></a>Map导出</h3><blockquote><p>Map类型为Map&lt;String,Object&gt;</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span>(<span class="hljs-type">Csv</span> <span class="hljs-variable">csv</span> <span class="hljs-operator">=</span> CsvBuilder.of(Map.class).build(getMapList()))&#123;<br>    AttachmentExportUtil.export(csv.getFilePath(), <span class="hljs-string">&quot;test.csv&quot;</span>, response);<br>    <span class="hljs-comment">// csv.write(Paths.get(&quot;/User/append.csv&quot;));</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="追加方式导出"><a href="#追加方式导出" class="headerlink" title="追加方式导出"></a>追加方式导出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span>(CsvBuilder&lt;CsvPeople&gt; csvBuilder = CsvBuilder.of(People.class))&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        csvBuilder.append(data(<span class="hljs-number">1000</span>));<br>    &#125;<br>    <span class="hljs-type">Csv</span> <span class="hljs-variable">csv</span> <span class="hljs-operator">=</span> csvBuilder.build();<br>    AttachmentExportUtil.export(csv.getFilePath(), <span class="hljs-string">&quot;test.csv&quot;</span>, response);<br>    <span class="hljs-comment">// csv.write(Paths.get(&quot;/User/append.csv&quot;));</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="二次文件追加"><a href="#二次文件追加" class="headerlink" title="二次文件追加"></a>二次文件追加</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span>(CsvBuilder&lt;CsvPeople&gt; csvBuilder = CsvBuilder.of(People.class).noTitles())&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        csvBuilder.append(data(<span class="hljs-number">1000</span>));<br>    &#125;<br>    <span class="hljs-type">Csv</span> <span class="hljs-variable">csv</span> <span class="hljs-operator">=</span> csvBuilder.build();<br>    <span class="hljs-comment">// 该种方式会在原append.csv文件继续追加数据，而不是覆盖</span><br>    csv.write(Paths.get(<span class="hljs-string">&quot;/User/append.csv&quot;</span>),<span class="hljs-literal">true</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>Bean定义</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> &#123;<br><br>    <span class="hljs-meta">@ExcelColumn(order = 0, title = &quot;姓名&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-meta">@ExcelColumn(order = 1, title = &quot;年龄&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer age;<br><br>    <span class="hljs-meta">@ExcelColumn(order = 2, title = &quot;性别&quot;)</span><br>    <span class="hljs-keyword">private</span> String gender;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>与excel导出注解相比，支持属性减少，width、style属性将不被支持，注解请移步: <a href="#%E6%B3%A8%E8%A7%A3">注解</a></p></blockquote><h2 id="多sheet导入"><a href="#多sheet导入" class="headerlink" title="多sheet导入"></a>多sheet导入</h2><p>多sheet导入，指的是SaxExcelReader多sheet导入，不包含DefaultExcelReader。</p><h3 id="按sheet索引多sheet导入"><a href="#按sheet索引多sheet导入" class="headerlink" title="按sheet索引多sheet导入"></a>按sheet索引多sheet导入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">SaxExcelReader.of(People.class).sheets(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>).read(excelFile);<br></code></pre></td></tr></table></figure><h3 id="按sheet名称多sheet导入"><a href="#按sheet名称多sheet导入" class="headerlink" title="按sheet名称多sheet导入"></a>按sheet名称多sheet导入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">SaxExcelReader.of(People.class).sheets(<span class="hljs-string">&quot;sheet名称1&quot;</span>,<span class="hljs-string">&quot;sheet名称2&quot;</span>).read(excelFile);<br></code></pre></td></tr></table></figure><h2 id="多sheet导出"><a href="#多sheet导出" class="headerlink" title="多sheet导出"></a>多sheet导出</h2><h3 id="DefaultExcelBuilder、DefaultStreamExcelBuilder"><a href="#DefaultExcelBuilder、DefaultStreamExcelBuilder" class="headerlink" title="DefaultExcelBuilder、DefaultStreamExcelBuilder"></a>DefaultExcelBuilder、DefaultStreamExcelBuilder</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Workbook workbook1=DefaultExcelBuilder.of(A.class).build(dataList);<br><span class="hljs-comment">// of(class,workbook)</span><br>Workbook workbook2=DefaultExcelBuilder.of(B.class , workbook1).build(dataList);<br></code></pre></td></tr></table></figure><h3 id="模板导出"><a href="#模板导出" class="headerlink" title="模板导出"></a>模板导出</h3><p>模板导出情况下，每一个table就是一个sheet。</p><blockquote><p>如需多table导出在同一sheet中，使用sheetStrategy(SheetStrategy.ONE_SHEET)</p></blockquote><h2 id="自定义样式"><a href="#自定义样式" class="headerlink" title="自定义样式"></a>自定义样式</h2><blockquote><p>本模块仅针对DefaultExcelBuilder、DefaultStreamExcelBuilder，模板构建天然支持。</p></blockquote><h3 id="标题（title）样式自定义"><a href="#标题（title）样式自定义" class="headerlink" title="标题（title）样式自定义"></a>标题（title）样式自定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ExcelColumn(style=&#123;&quot;title-&gt;color:red&quot;,&quot;cell-&gt;color:green&quot;&#125;)</span><br>Integer age;<br></code></pre></td></tr></table></figure><h3 id="内容行样式自定义"><a href="#内容行样式自定义" class="headerlink" title="内容行样式自定义"></a>内容行样式自定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ExcelColumn(style=&quot;cell-&gt;color:green&quot;)</span><br>Integer age;<br></code></pre></td></tr></table></figure><h3 id="方法调用设定样式"><a href="#方法调用设定样式" class="headerlink" title="方法调用设定样式"></a>方法调用设定样式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">DefaultExcelBuilder.of(ArtCrowd.class)<br>                   .style(<span class="hljs-string">&quot;title-&gt;color:red&quot;</span>,<span class="hljs-string">&quot;background-color:green;&quot;</span>)<br>                   .build(dataList);<br></code></pre></td></tr></table></figure><p>使用 -&gt; 分隔符：</p><ul><li>title标明该样式针对标题；</li><li>cell标明该样式针对内容行；</li><li>odd标明该样式针对奇数内容行；</li><li>even标明该样式针对偶数内容行；</li></ul><p>具体样式支持，请移步<a href="#%E6%A0%B7%E5%BC%8F%E6%94%AF%E6%8C%81">样式支持</a></p><h2 id="单元格内换行"><a href="#单元格内换行" class="headerlink" title="单元格内换行"></a>单元格内换行</h2><h3 id="DefaultExcelBuilder-x2F-DefaultSteamExcelBuilder"><a href="#DefaultExcelBuilder-x2F-DefaultSteamExcelBuilder" class="headerlink" title="DefaultExcelBuilder&#x2F;DefaultSteamExcelBuilder"></a>DefaultExcelBuilder&#x2F;DefaultSteamExcelBuilder</h3><p>默认上述构建器会自动换行，@ExcelModel(wrapText&#x3D;true)</p><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><p>如需在模板的单元格内换行，请使用<code>&lt;br/&gt;</code>或p标签。</p><h2 id="图片导出"><a href="#图片导出" class="headerlink" title="图片导出"></a>图片导出</h2><h3 id="DefaultExcelBuilder、DefaultStreamExcelBuilder图片导出"><a href="#DefaultExcelBuilder、DefaultStreamExcelBuilder图片导出" class="headerlink" title="DefaultExcelBuilder、DefaultStreamExcelBuilder图片导出"></a>DefaultExcelBuilder、DefaultStreamExcelBuilder图片导出</h3><p>图片导出属性定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ExcelColumn(fileType = FileType.IMAGE)</span><br>File image;<br></code></pre></td></tr></table></figure><p>属性类型必须是File，后续会增加其他类型支持。</p><h3 id="模板图片导出"><a href="#模板图片导出" class="headerlink" title="模板图片导出"></a>模板图片导出</h3><p>td单元格内含图片即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;图片绝对路径&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="图片导入"><a href="#图片导入" class="headerlink" title="图片导入"></a>图片导入</h2><p>图片导入仅DefaultExcelReader支持，属性类型为InputStream，实际赋值类型为ByteArrayInputStream。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> &#123;<br>   <span class="hljs-meta">@ExcelColumn(index=0)</span><br>   InputStream picture;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="单元格设置"><a href="#单元格设置" class="headerlink" title="单元格设置"></a>单元格设置</h2><p>默认情况下，程序会自动判别单元格内容类型，目前自动识别类型有以下三种：</p><ul><li>String</li><li>Double</li><li>Boolean</li></ul><p>如果String的内容全为数字时，导出时有可能会被使用科学计数法展示。解决这种情况强制使用String的方式构建即可。</p><h3 id="设置为字符串类型数据可做如下操作"><a href="#设置为字符串类型数据可做如下操作" class="headerlink" title="设置为字符串类型数据可做如下操作"></a>设置为字符串类型数据可做如下操作</h3><p>在td上增加属性string设置该单元格类型为字符串</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">string</span>&gt;</span>19<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="设置为数值类型数据可做如下操作"><a href="#设置为数值类型数据可做如下操作" class="headerlink" title="设置为数值类型数据可做如下操作"></a>设置为数值类型数据可做如下操作</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">double</span>&gt;</span>19<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="设置为布尔类型数据可做如下操作"><a href="#设置为布尔类型数据可做如下操作" class="headerlink" title="设置为布尔类型数据可做如下操作"></a>设置为布尔类型数据可做如下操作</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">boolean</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="添加水印"><a href="#添加水印" class="headerlink" title="添加水印"></a>添加水印</h2><blockquote><p>不支持.xls文件添加水印，支持XSSF、SXSSF模式下添加水印，如数据量过大，可能会造成内存溢出，请注意⚠️</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.github.liaochong.myexcel.utils.WatermarkUtil;<br><br>List&lt;ArtCrowd&gt; dataList = <span class="hljs-built_in">this</span>.getDataList();<br><span class="hljs-type">Workbook</span> <span class="hljs-variable">workbook</span> <span class="hljs-operator">=</span> DefaultExcelBuilder.of(ArtCrowd.class).build(dataList);<br><span class="hljs-comment">// 使用水印工具添加水印</span><br>WatermarkUtil.addWatermark(workbook,<span class="hljs-string">&quot;艺术生水印&quot;</span>);<br>AttachmentExportUtil.export(workbook, <span class="hljs-string">&quot;艺术生信息&quot;</span>, response);<br></code></pre></td></tr></table></figure><h2 id="模板相关"><a href="#模板相关" class="headerlink" title="模板相关"></a>模板相关</h2><h3 id="在html中设置excel的sheet名称"><a href="#在html中设置excel的sheet名称" class="headerlink" title="在html中设置excel的sheet名称"></a>在html中设置excel的sheet名称</h3><blockquote><p>设置sheet name：在表格里添加<code>&lt;caption&gt;</code>sheet名称</caption></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">caption</span>&gt;</span>sheet名称<span class="hljs-tag">&lt;/<span class="hljs-name">caption</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="样式支持"><a href="#样式支持" class="headerlink" title="样式支持"></a>样式支持</h2><div class="note note-info">            <h3 id="宽度（widht）"><a href="#宽度（widht）" class="headerlink" title="宽度（widht）"></a>宽度（widht）</h3><table><thead><tr><th>CSS</th><th>Value</th><th>Example</th></tr></thead><tbody><tr><td>width</td><td>数值，如15px</td><td>style&#x3D;”width: 15px”</td></tr></tbody></table>          </div><div class="note note-info">            <h3 id="高度（height）"><a href="#高度（height）" class="headerlink" title="高度（height）"></a>高度（height）</h3><table><thead><tr><th>CSS</th><th>Value</th><th>Example</th></tr></thead><tbody><tr><td>height</td><td>数值，如15px，特别注意⚠️：如模板使用，该样式只能放置在 tr 上</td><td>style&#x3D;”height: 15px”</td></tr></tbody></table>          </div><div class="note note-info">            <h3 id="背景色（background）"><a href="#背景色（background）" class="headerlink" title="背景色（background）"></a>背景色（background）</h3><table><thead><tr><th>CSS</th><th>Value</th><th>Example</th></tr></thead><tbody><tr><td>background-color</td><td>十六进制：#FFFFFF、RGB：rgb(0,255,255)、常用背景色名称：green，推荐使用十六进制</td><td>style&#x3D;”background-color:#ABFF00”</td></tr></tbody></table>          </div><div class="note note-info">            <h3 id="边框（border）"><a href="#边框（border）" class="headerlink" title="边框（border）"></a>边框（border）</h3><table><thead><tr><th>CSS</th><th>Value</th><th>Example</th></tr></thead><tbody><tr><td>border-style</td><td>thin、dashed、medium、dotted、thick、double、hair、medium_dashed、dash_dot</td><td>style&#x3D;”border-style:thin”</td></tr><tr><td>border-top-style</td><td>thin、dashed、medium、dotted、thick、double、hair、medium_dashed、dash_dot</td><td>style&#x3D;”border-top-style:thin”</td></tr><tr><td>border-right-style</td><td>thin、dashed、medium、dotted、thick、double、hair、medium_dashed、dash_dot</td><td>style&#x3D;”border-right-style:thin”</td></tr><tr><td>border-bottom-style</td><td>thin、dashed、medium、dotted、thick、double、hair、medium_dashed、dash_dot</td><td>style&#x3D;”border-bottom-style:thin”</td></tr><tr><td>border-left-style</td><td>thin、dashed、medium、dotted、thick、double、hair、medium_dashed、dash_dot</td><td>style&#x3D;”border-left-style:thin”</td></tr></tbody></table>          </div><div class="note note-info">            <h3 id="字体（font）"><a href="#字体（font）" class="headerlink" title="字体（font）"></a>字体（font）</h3><table><thead><tr><th>CSS</th><th>Value</th><th>Example</th></tr></thead><tbody><tr><td>color</td><td>green</td><td>style&#x3D;”color:green;”</td></tr><tr><td>font-size</td><td>数值：14px（只会截取数值，非数值部分会被删除）</td><td>style&#x3D;”font-size:14px”</td></tr><tr><td>font-family</td><td>Times New Roman（不支持备选字体）</td><td>style&#x3D;”font-family:Times New Roman”</td></tr><tr><td>font-style</td><td>italic</td><td>style&#x3D;”font-style:italic”</td></tr><tr><td>font-weight</td><td>bold</td><td>style&#x3D;”font-weight:bold”</td></tr><tr><td>text-decoration</td><td>text-decoration</td><td>style&#x3D;”text-decoration: underline”</td></tr></tbody></table>          </div><div class="note note-info">            <h3 id="对齐方式（align）"><a href="#对齐方式（align）" class="headerlink" title="对齐方式（align）"></a>对齐方式（align）</h3><table><thead><tr><th>CSS</th><th>Value</th><th>Example</th></tr></thead><tbody><tr><td>text-align</td><td>general,left,center,right,fill,justify,center_selection,distributed</td><td>style&#x3D;”text-align:center”</td></tr><tr><td>vertical-align</td><td>top,center,bottom,justify,distributed</td><td>style&#x3D;”vertical-align:center”</td></tr></tbody></table>          </div><div class="note note-info">            <h3 id="隐藏（visibility）"><a href="#隐藏（visibility）" class="headerlink" title="隐藏（visibility）"></a>隐藏（visibility）</h3><table><thead><tr><th>CSS</th><th>Value</th><th>Example</th></tr></thead><tbody><tr><td>visibility</td><td>hidden：隐藏，目前仅设置在tr上生效</td><td>&lt; tr style&#x3D;”visibility: hidden” &gt;</td></tr></tbody></table>          </div><div class="note note-info">            <h3 id="自动换行（word-break）"><a href="#自动换行（word-break）" class="headerlink" title="自动换行（word-break）"></a>自动换行（word-break）</h3><table><thead><tr><th>CSS</th><th>Value</th><th>Example</th></tr></thead><tbody><tr><td>word-break</td><td>break-all：自动换行</td><td>&lt; tr style&#x3D;”word-break: break-all” &gt;、&lt; td style&#x3D;”word-break: break-all” &gt;</td></tr></tbody></table>          </div><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>注解说明</p><ul><li>注解</li></ul><blockquote><p>@ExcelModel</p></blockquote><ul><li>位置</li></ul><blockquote><p>Class</p></blockquote><ul><li><p>方法</p><ul><li>includeAllField：是否导出该类的所有字段，默认为true</li><li>excludeParent：是否排除父类字段，默认为false</li><li>workbookType：设置工作簿类型，默认WorkbookType.SXLSX，不建议修改</li><li>sheetName：设置导出的工作簿sheet名称</li><li>useFieldNameAsTitle：设置是否直接使用字段名称作为导出标题，默认false</li><li>defaultValue：设置全局导出时，字段为Null时的默认值，如字段也包含defaultValue，则进行覆盖</li><li>wrapText：是否开启自动换行，默认开启</li></ul></li><li><p>dateFormat：设置全局LocalDate格式，默认为yyyy-MM-dd</p></li><li><p>dateTimeFormat：设置全局Date\LocalDateTime格式，默认为yyyy-MM-dd HH:mm:ss</p></li><li><p>ignoreStaticFields：是否忽略静态字段导出，默认忽略</p></li><li><p>titleSeparator：标题分离器，用于多级标题，默认为“-&gt;”</p></li><li><p>|设置导出Excel的公共属性 @ExcelColumn|Field|</p></li><li><p>title：导出时使用，该字段对应导出列标题</p></li><li><p>order：导出时使用，该字段对应的导出展示顺序，初始为0，建议按列顺序设置，如字段顺序就是列顺序，可不设置</p></li><li><p>format：导入导出时使用，当字段类型为时间类型、金钱类型时生效，用于设置该时间类型字段格式化，如<code>yyyy-MM-dd HH:mm:ss</code></p></li><li><p>groups：导出时使用，当前字段所属分组，构建时根据传入的分组选择导出的字段</p></li><li><p>index：导入时使用，用于标志该字段对应的Excel列，从0开始，不允许重复</p></li><li><p>defaultValue：导出时使用，设置导出时字段为Null时的默认值</p></li><li><p>width：导出时使用，用于自定义单元格宽度，配合AutoWidthStrategy.CUSTOM_WIDTH使用</p></li><li><p>style：自定义样式</p></li><li><p>设置导入、导出字段属性 @IgnoreColumn,排除该字段的导出</p></li></ul><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/liaochong/myexcel">myexcel</a></p><h2 id="封"><a href="#封" class="headerlink" title="封"></a>封</h2><p><img src="https://tvax3.sinaimg.cn/large/005NNTS5ly1grgj7do4e0j32yo1o04qp.jpg" alt="伴我同行"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>excel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java8的stream的使用方法</title>
    <link href="/2021/08/12/java-01/"/>
    <url>/2021/08/12/java-01/</url>
    
    <content type="html"><![CDATA[<h2 id="Stream的由来"><a href="#Stream的由来" class="headerlink" title="Stream的由来"></a>Stream的由来</h2><div class="note note-info">            <p>我们正常处理集合里的数据时，第一想到的是不是就是for循环，别问，问就是for循环大法。确实，面向对象的编程思维，让我们第一时间想到的就是一个一个循环然后进行一些过滤，查找，分类操作。在Java没有这个流之前，大家伙都这么做的。</p><p>为什么Java8要推出流这个东西呢，肯定是这种方法有优越性。之前的循环大法从最终的结果来看和流操作的结果是一样的，都可以完成功能。流的操作来源于Lambda表达式，如果没有Lambda表达式也不会有这个东西。使用流可以提升代码的简洁度，这个提升是质的飞跃，以前十几行代码甚至更多，现在可能只需要一行代码就能完成，这是就有不同的意见了，说这种代码难以维护，我感觉完成同样的功能，代码越少是越容易维护的，一个三百行代码的方法和一个三十行的方法，维护成本不是一个量级的。</p>          </div><h2 id="Stream流的用法"><a href="#Stream流的用法" class="headerlink" title="Stream流的用法"></a>Stream流的用法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LocalDateTimeDemoTest</span> &#123;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        ArrayList&lt;User&gt; list = getUserList();<br></code></pre></td></tr></table></figure><h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 过滤</span><br><span class="hljs-comment">// 年龄大于10的</span><br>List&lt;User&gt; collect = list.stream()<br>.filter(user -&gt; user.getAge() &gt; <span class="hljs-number">10</span>).collect(Collectors.toList());<br><span class="hljs-comment">// 名字最后是2的</span><br>List&lt;User&gt; collect1 = list.stream()<br>.filter(user -&gt; user.getUserName().endsWith(<span class="hljs-string">&quot;2&quot;</span>)).collect(Collectors.toList());<br><span class="hljs-comment">// 组合过滤</span><br>List&lt;User&gt; collect2 = list.stream()<br>.filter(user -&gt; user.getAge() &gt; <span class="hljs-number">10</span>).filter(user -&gt; user.getUserName().endsWith(<span class="hljs-string">&quot;2&quot;</span>)).collect(Collectors.toList());<br><br><span class="hljs-comment">// 查找名为王0的，如果有重名的取第一个,如果为空则初始化一个(这种写法主要是让程序更加健壮，避免的空指针)。</span><br><span class="hljs-type">User</span> <span class="hljs-variable">user1</span> <span class="hljs-operator">=</span> list.stream()<br>.filter(user -&gt; user.getUserName().equals(<span class="hljs-string">&quot;王0&quot;</span>)).findFirst().orElse(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>());<br><br><span class="hljs-comment">// 这种也是获取第一个,这个的效率比上面的高，一般查找唯一数据，用这个比较快。</span><br><span class="hljs-type">User</span> <span class="hljs-variable">user2</span> <span class="hljs-operator">=</span> list.stream()<br>.filter(user -&gt; user.getUserName().equals(<span class="hljs-string">&quot;王0&quot;</span>)).findAny().orElse(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>());<br></code></pre></td></tr></table></figure><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">// 按年龄从小到大排序</span><br>List&lt;User&gt; collect7 = list.stream()<br>.sorted(Comparator.comparing(User::getAge))<br>.collect(Collectors.toList());<br><br><span class="hljs-comment">// 按年龄从大到小排序</span><br>List&lt;User&gt; collect8 = list.stream()<br>.sorted(Comparator.comparing(User::getAge).reversed())<br>.collect(Collectors.toList());<br></code></pre></td></tr></table></figure><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 分组</span><br><span class="hljs-comment">// 以班级分组, 返回一个map,key为部门ID，value为分组的集合</span><br>Map&lt;Integer, List&lt;User&gt;&gt; collect3 = list.stream()<br>.collect(Collectors.groupingBy(User::getGradeId));<br><br><span class="hljs-comment">// 多级分组 这个就比较好玩了，Map里面嵌套Map，哈哈和上面一样，先以班级分组，然后再按年龄分组</span><br><span class="hljs-comment">// 外层的Map的Key为班级ID，里面的Map的Key为年龄。</span><br>Map&lt;Integer, Map&lt;Integer, List&lt;User&gt;&gt;&gt; collect4 = list.stream()<br>.collect(Collectors.groupingBy(User::getGradeId, Collectors.groupingBy(User::getAge)));<br><br><span class="hljs-comment">// 分组加汇总，以班级为单位总薪酬</span><br><span class="hljs-comment">// Map的Key 为班级ID，Value为分过组后的总和，注意这里喔，</span><br><span class="hljs-comment">// 直接用double来进行总和计算，一般来说肯定会发生精度丢失。所以这种这种double运算，一般来说是不可以直接sum的</span><br>Map&lt;Integer, Double&gt; collect5 = list.stream()<br>.collect(Collectors.groupingBy(User::getGradeId, Collectors.summingDouble(User::getSalary)));<br><br></code></pre></td></tr></table></figure><h3 id="归总"><a href="#归总" class="headerlink" title="归总"></a>归总</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">// 归总，</span><br>    <span class="hljs-comment">// 何为归总，就是结果集是一个。</span><br><br>    <span class="hljs-comment">//求所有人年龄总和（好像没啥意义，）</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> list.stream()<br>    .mapToInt(User::getAge).sum();<br><br>    <span class="hljs-comment">// 也可以先过滤班级编号为3的同学再进行年龄求和</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">sum1</span> <span class="hljs-operator">=</span> list.stream()<br>    .filter(user -&gt; user.getGradeId() == <span class="hljs-number">3</span>).mapToInt(User::getAge).sum();<br><br>    <span class="hljs-comment">// 找到年龄最小的同学</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> list.stream()<br>    .min(Comparator.comparing(User::getAge)).orElse(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>());<br><br>    <span class="hljs-comment">// 找到年龄最大的同学并输出最小年龄是多少（强行凑代码，哈哈）</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> list.stream()<br>    .max(Comparator.comparing(User::getAge)).orElse(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>()).getAge();<br><br>    <span class="hljs-comment">// 获取按班级分组后年龄总和最小值是多少（乍一听感觉很绕，实际有啥绕的,自己写了一下，确实有点绕，淦。）</span><br>    <span class="hljs-comment">// 实际意义待斟酌啊。。</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">integer</span> <span class="hljs-operator">=</span> list.stream()<br>    .collect(Collectors.groupingBy(User::getGradeId, <br>    Collectors.summingInt(User::getAge))).values().stream()<br>            .min(Comparator.comparing(Integer::valueOf)).orElse(<span class="hljs-number">0</span>);<br><br><br>    <span class="hljs-comment">// 演示一下BigDecimal的运算吧，差点忘了,</span><br>    <span class="hljs-comment">// 啥也不干直接就是算金额总和</span><br>    <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">bigDecimal</span> <span class="hljs-operator">=</span> list.stream()<br>    .map(User::getMoney).reduce(BigDecimal::add).orElse(BigDecimal.valueOf(<span class="hljs-number">0</span>));<br><br>    <span class="hljs-comment">// 先进行简单的过滤，再进行计算</span><br>    <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">bigDecimal1</span> <span class="hljs-operator">=</span> list.stream()<br>    .filter(user3 -&gt; user3.getMoney() != <span class="hljs-literal">null</span>)<br>    .map(User::getMoney).reduce(BigDecimal::add).orElse(BigDecimal.valueOf(<span class="hljs-number">0</span>));<br>    <br>    <span class="hljs-comment">// 计算所有同学的年龄</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">sum2</span> <span class="hljs-operator">=</span> list.stream().mapToInt(User::getAge).sum();<br>    <br>    <span class="hljs-comment">// 计算Double型的Salary,这里肯定会发生精度丢失，具体怎么处理，大家可以百度一下，提示要想不丢精度，肯定是要用BigDecimal的</span><br>    <span class="hljs-type">double</span> <span class="hljs-variable">sum3</span> <span class="hljs-operator">=</span> list.stream().mapToDouble(User::getSalary).sum();<br>    <br>    <span class="hljs-comment">// 计算年轻平均数</span><br>    <span class="hljs-type">Double</span> <span class="hljs-variable">collect6</span> <span class="hljs-operator">=</span> list.stream().collect(Collectors.averagingDouble(User::getAge));<br>    <br><br>    <span class="hljs-comment">// 看看姓王同学有几个.</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> list.stream().filter(user3 -&gt; user3.getUserName().startsWith(<span class="hljs-string">&quot;王&quot;</span>)).count();<br><br>     <span class="hljs-comment">// anyMatch表示，判断的条件里，任意一个元素成功，返回true</span><br>    <span class="hljs-comment">// 这里就是如果同学中有一个小于六岁的则返回true</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> list.stream().anyMatch(i -&gt; i.getAge() &lt; <span class="hljs-number">6</span>);<br><br>    <span class="hljs-comment">// allMatch表示，判断条件里的元素，所有的都是，返回true</span><br>    <span class="hljs-comment">// 判断同学里面是不是所有人的年龄都小于六十岁，如果都小于六十岁则返回true</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> list.stream().allMatch(i -&gt; i.getAge() &lt; <span class="hljs-number">60</span>);<br><br>    <span class="hljs-comment">// noneMatch跟allMatch相反，判断条件里的元素，所有的都不是，返回true</span><br>    <span class="hljs-comment">// 判断同学的年龄是不是都不大于六十岁，如果有一个大于六十岁  返回false</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> list.stream().noneMatch(i -&gt; i.getAge() &gt; <span class="hljs-number">60</span>);<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="用来测试的数据"><a href="#用来测试的数据" class="headerlink" title="用来测试的数据"></a>用来测试的数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">// 模拟数据组，真是数据远远比这复杂，但是你只需要用关键数据即可。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ArrayList&lt;User&gt; <span class="hljs-title function_">getUserList</span><span class="hljs-params">()</span> &#123;<br>        ArrayList&lt;User&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;王0&quot;</span>,<span class="hljs-number">3</span>,<span class="hljs-number">22</span>,<span class="hljs-number">12.3</span>,BigDecimal.valueOf(<span class="hljs-number">1600</span>)));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;王1&quot;</span>,<span class="hljs-number">3</span>,<span class="hljs-number">8</span>,<span class="hljs-number">11.7</span>,BigDecimal.valueOf(<span class="hljs-number">1300</span>)));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;王2&quot;</span>,<span class="hljs-number">3</span>,<span class="hljs-number">25</span>,<span class="hljs-number">16.3</span>,BigDecimal.valueOf(<span class="hljs-number">1500</span>)));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;王3&quot;</span>,<span class="hljs-number">2</span>,<span class="hljs-number">17</span>,<span class="hljs-number">19.3</span>,BigDecimal.valueOf(<span class="hljs-number">1800</span>)));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;王4&quot;</span>,<span class="hljs-number">2</span>,<span class="hljs-number">22</span>,<span class="hljs-number">11.3</span>,BigDecimal.valueOf(<span class="hljs-number">2344</span>)));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">5</span>,<span class="hljs-string">&quot;王5&quot;</span>,<span class="hljs-number">2</span>,<span class="hljs-number">13</span>,<span class="hljs-number">15.3</span>,BigDecimal.valueOf(<span class="hljs-number">1120</span>)));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">6</span>,<span class="hljs-string">&quot;王6&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">8</span>,<span class="hljs-number">19.3</span>,BigDecimal.valueOf(<span class="hljs-number">9980</span>)));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">7</span>,<span class="hljs-string">&quot;王7&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">111.3</span>,BigDecimal.valueOf(<span class="hljs-number">1112</span>)));<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="模拟数据实体类"><a href="#模拟数据实体类" class="headerlink" title="模拟数据实体类"></a>模拟数据实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 主键Id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户名</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String userName;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 班级ID</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> gradeId;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 年龄</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 薪酬</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> salary;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 强行增加一个金额，用来演示BigDecimal运算</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-keyword">private</span> BigDecimal money;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(<span class="hljs-type">int</span> id, String userName, <span class="hljs-type">int</span> gradeId, <span class="hljs-type">int</span> age, <span class="hljs-type">double</span> salary, BigDecimal money)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.userName = userName;<br>        <span class="hljs-built_in">this</span>.gradeId = gradeId;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.salary = salary;<br>        <span class="hljs-built_in">this</span>.money = money;<br>    &#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 省略get,set方法</span><br><span class="hljs-comment"> */</span><br>&#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="尾"><a href="#尾" class="headerlink" title="尾"></a>尾</h2><div class="note note-info">            <p>其实这些方法，不用死记硬背，需要的时候查询一下就行了，当用的多了自然而然的就记住了。死记硬背，当时是背下来了，不常用到的话，也会很快的遗忘。</p><p>实际上在查询数据这方面，sql是全球第一的。不要小看任何一款数据库软件。数据库软件，可以说是人类智慧的结晶，是一群智商顶尖的人，并将数据结构和算法用到极致才开发出来的东西。一个几百兆的体积的数据库软件可以毫不费力的管理大于自身几百倍体积的数据。这种能力是真正编程的美丽。</p><p>我在整理这个流的操作时，如果我们把集合看成数据库里的一行行数据，Java这个对集合的流固然强大，可和SQL一比，也能理解，毕竟闻道有先后，术业有专攻。</p>          </div><h2 id="封"><a href="#封" class="headerlink" title="封"></a>封</h2><p><img src="https://tvax2.sinaimg.cn/large/005NNTS5ly1gl42sgpf56j32yo1o0kjl.jpg" alt="塞尔菲娅"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>stream</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>温柔的哲思</title>
    <link href="/2021/08/11/gossip-01/"/>
    <url>/2021/08/11/gossip-01/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>打算严格区分开来碎碎念和技术性的博客，不要正儿八经技术博客里面混杂着其他奇奇怪怪的文字，技术 嘛，纯粹一点，不是什么坏事啦，碎碎念，也纯碎一点咯。</p>          </div><h2 id="主"><a href="#主" class="headerlink" title="主"></a>主</h2><div class="note note-info">            <p>毕竟也没什么好毕竟的，大学期间的一些琐碎。</p><p>初上大学，当时我的成绩并不理想，用并不理解是为了自己给自己留一点面子。报考专业的时候，受到不知道哪位家长的撺掇，一边稀里糊涂，一遍明明白白的报了土木相关的专业，事实证明我不感兴趣加人人都学的的东西我真的很难学得进去，于是我课上的不多，挂科也很严重，不过考虑我是专科，我有堕落的资本，辅导员也不至于跟一个专科生过不去，大学里面看重的又不仅仅是成绩。当然其他的方面和我的成绩也是平分秋色😅😅，不好多说，反正从小到大，家长越是期待什么我就越会搞砸，我总是说自己什么叛逆，其实不是叛逆，只是我的抗压能力实在不强，身上一有压力，我就做不好事情了。也在练习啦，泰山崩于前面不改色我能做到，可心的砰砰的跳，我控制不住。</p><p>在大学之前，有耳闻大学中的各种学生组织貌似挺有趣的，大学里我加了一个学生会，做一个简简单单的现充（现实生活充实的人），不差的人品，加上正常的外形，加上非常能叭叭，所以我的女人缘不算差，我在大学里我甚至连班上的同学的名字都没记全，但是我却记住了部门中的每个人。一起经历了两届运动会，参与组织了大大小小的活动，一起为部门庆生，部门合并改名后但原班人马及集合点还在的窃喜，一起聚餐，一起在操场上玩耍，这是我在大学里最宝贵的回忆了。</p><p>大一我是部员，大二我是部长，大三我便就没有过多的参与学生会了，因为我要毕业了，我必须要花点时间思考我毕业了做什么，是本专业还是学习自己想学的，前两年的参加部门活动，最后一年的思考，有了这些事情我并没有在宿舍里面待很长时间，大学的宿舍是滋生颓废的温床，最后的最后迷茫过，但也最终走上了正途.</p><p>说到这里，我应该需要感谢生命中的一个人，要不是她的出现又消失，我可能也不会静下心来坚定自己的选择。过程或喜或悲已经不重要了，说得过去的结局，最后。谢谢！</p>          </div><h2 id="封"><a href="#封" class="headerlink" title="封"></a>封</h2><p><img src="https://tvax4.sinaimg.cn/large/005NNTS5ly1gn29xi0hq6j328f1cknpe.jpg" alt="鬼刀"></p>]]></content>
    
    
    <categories>
      
      <category>碎碎念</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>新的开始</title>
    <link href="/2021/08/10/other-01/"/>
    <url>/2021/08/10/other-01/</url>
    
    <content type="html"><![CDATA[<h2 id="主"><a href="#主" class="headerlink" title="主"></a>主</h2><div class="note note-info">            <p>流水账一样的博客并不会给人留下爱学习以及爱记录的印象，反而是减分项，请务必认真对待自己的每一篇博客，如果你想被人阅读的话。</p><p>记于：2021-08-10晚11点整</p>          </div><div class="note note-primary">            <p>生活需要定期整理，博客也需要定期整理，宁缺勿滥，断舍离一直是我的人生箴言。</p><p>以写博客例，我实际上我也花了时间写博客，写了一些流水账一样的博客，有意义嘛，肯定有意义，但是没有太大的意义，但是这些流水账一样的博客它也会占用了我的时间，我的精力，人的精力是有限的，我可能就没有精力写出自己喜欢的博客。</p><p>想起以前的一个道理，如果你敷衍了生活中很多的小事，这个时候我们的关注点可能就不是每件小事的结果上，关注点在而是我们没有时间去做大事了。</p>          </div><h2 id="封"><a href="#封" class="headerlink" title="封"></a>封</h2><p><img src="https://tva1.sinaimg.cn/large/005NNTS5ly1gtc325zazej32yo1o0b29.jpg" alt="英雄联盟LOL星籁歌姬 KDA ALL OUT 同人 萨勒芬妮"></p>]]></content>
    
    
    <categories>
      
      <category>Other</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂文</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
